<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>elasticsearch常用查询整理</title>
      <link href="/2019/07/19/elasticsearch%E5%B8%B8%E7%94%A8%E6%9F%A5%E8%AF%A2%E6%95%B4%E7%90%86/"/>
      <url>/2019/07/19/elasticsearch%E5%B8%B8%E7%94%A8%E6%9F%A5%E8%AF%A2%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="1-结构话查询（Structured-search）"><a href="#1-结构话查询（Structured-search）" class="headerlink" title="1. 结构话查询（Structured search）"></a>1. 结构话查询（Structured search）</h2><h3 id="1-1-精确查询（term）"><a href="#1-1-精确查询（term）" class="headerlink" title="1.1 精确查询（term）"></a>1.1 精确查询（term）</h3><p>最为常用的 term 查询， 可以用它处理数字（numbers）、布尔值（Booleans）、日期（dates）以及文本（text）。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"term"</span> : &#123;</span><br><span class="line">        <span class="attr">"price"</span> : <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似sql的<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">document</span></span><br><span class="line"><span class="keyword">FROM</span>   products</span><br><span class="line"><span class="keyword">WHERE</span>  price = <span class="number">20</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="1-2-查找多个精确值（terms）"><a href="#1-2-查找多个精确值（terms）" class="headerlink" title="1.2 查找多个精确值（terms）"></a>1.2 查找多个精确值（terms）</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"terms"</span> : &#123;</span><br><span class="line">        <span class="attr">"price"</span> : [<span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-范围查询-range"><a href="#1-3-范围查询-range" class="headerlink" title="1.3 范围查询(range)"></a>1.3 范围查询(range)</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">"range" : &#123;</span><br><span class="line">    "price" : &#123;</span><br><span class="line">        "gte" : 20,</span><br><span class="line">        "lte" : 40</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似sql的<br>在 SQL 中，范围查询可以表示为：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">document</span></span><br><span class="line"><span class="keyword">FROM</span>   products</span><br><span class="line"><span class="keyword">WHERE</span>  price <span class="keyword">BETWEEN</span> <span class="number">20</span> <span class="keyword">AND</span> <span class="number">40</span></span><br></pre></td></tr></table></figure></p><h2 id="2-全文检索（full-text-search）"><a href="#2-全文检索（full-text-search）" class="headerlink" title="2.全文检索（full-text search）"></a>2.全文检索（full-text search）</h2><h3 id="2-1-match查询（match）"><a href="#2-1-match查询（match）" class="headerlink" title="2.1 match查询（match）"></a>2.1 match查询（match）</h3><p>查询搜索全文字段中的单个词或多个词</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /my_index/my_type/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"match"</span>: &#123;</span><br><span class="line">            <span class="attr">"title"</span>: <span class="string">"QUICK!"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-match链接符（operator"><a href="#2-2-match链接符（operator" class="headerlink" title="2.2 match链接符（operator)"></a>2.2 match链接符（operator)</h3><p>match 查询的结构需要做稍许调整才能使用 operator 操作符参数。<br>下面查询会查找<code>BROWN</code>和<code>DOG</code>同时存在的doc<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /my_index/my_type/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"match"</span>: &#123;</span><br><span class="line">            <span class="attr">"title"</span>: &#123;      </span><br><span class="line">                <span class="attr">"query"</span>:    <span class="string">"BROWN DOG!"</span>,</span><br><span class="line">                <span class="attr">"operator"</span>: <span class="string">"and"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-3-组合查询（bool）"><a href="#2-3-组合查询（bool）" class="headerlink" title="2.3 组合查询（bool）"></a>2.3 组合查询（bool）</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /my_index/my_type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"bool"</span>: &#123;</span><br><span class="line">      <span class="attr">"must"</span>:     &#123; <span class="attr">"match"</span>: &#123; <span class="attr">"title"</span>: <span class="string">"quick"</span> &#125;&#125;,</span><br><span class="line">      <span class="attr">"must_not"</span>: &#123; <span class="attr">"match"</span>: &#123; <span class="attr">"title"</span>: <span class="string">"lazy"</span>  &#125;&#125;,</span><br><span class="line">      <span class="attr">"should"</span>: [</span><br><span class="line">                  &#123; <span class="attr">"match"</span>: &#123; <span class="attr">"title"</span>: <span class="string">"brown"</span> &#125;&#125;,</span><br><span class="line">                  &#123; <span class="attr">"match"</span>: &#123; <span class="attr">"title"</span>: <span class="string">"dog"</span>   &#125;&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-多字段查询（multi-match）"><a href="#2-4-多字段查询（multi-match）" class="headerlink" title="2.4 多字段查询（multi_match）"></a>2.4 多字段查询（multi_match）</h3><p>多匹配查询的类型有多种： best_fields 、 most_fields 和 cross_fields （最佳字段、多数字段、跨字段）</p><p>默认情况下，查询的类型是 best_fields ，这表示它会为每个字段生成一个 match 查询，然后将它们组合到 dis_max 查询的内部，如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"dis_max"</span>: &#123;</span><br><span class="line">    <span class="attr">"queries"</span>:  [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"match"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: &#123;</span><br><span class="line">            <span class="attr">"query"</span>: <span class="string">"Quick brown fox"</span>,</span><br><span class="line">            <span class="attr">"minimum_should_match"</span>: <span class="string">"30%"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"match"</span>: &#123;</span><br><span class="line">          <span class="attr">"body"</span>: &#123;</span><br><span class="line">            <span class="attr">"query"</span>: <span class="string">"Quick brown fox"</span>,</span><br><span class="line">            <span class="attr">"minimum_should_match"</span>: <span class="string">"30%"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"tie_breaker"</span>: <span class="number">0.3</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面这个查询用 multi_match 重写成更简洁的形式：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"multi_match"</span>: &#123;</span><br><span class="line">        <span class="attr">"query"</span>:                <span class="string">"Quick brown fox"</span>,</span><br><span class="line">        <span class="attr">"type"</span>:                 <span class="string">"best_fields"</span>, </span><br><span class="line">        <span class="attr">"fields"</span>:               [ <span class="string">"title"</span>, <span class="string">"body"</span> ],</span><br><span class="line">        <span class="attr">"tie_breaker"</span>:          <span class="number">0.3</span>,</span><br><span class="line">        <span class="attr">"minimum_should_match"</span>: <span class="string">"30%"</span> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>best_fields 类型是默认值，可以不指定。</p></blockquote><p>还可以模糊字段<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"multi_match"</span>: &#123;</span><br><span class="line">        <span class="attr">"query"</span>:  <span class="string">"Quick brown fox"</span>,</span><br><span class="line">        <span class="attr">"fields"</span>: <span class="string">"*_title"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-5-短语匹配（match-phrase-）"><a href="#2-5-短语匹配（match-phrase-）" class="headerlink" title="2.5 短语匹配（match_phrase ）"></a>2.5 短语匹配（match_phrase ）</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /my_index/my_type/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"match_phrase"</span>: &#123;</span><br><span class="line">            <span class="attr">"title"</span>: <span class="string">"quick brown fox"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>什么是短语<br>一个被认定为和短语 quick brown fox 匹配的文档，必须满足以下这些要求： &gt; </p><ul><li>quick 、 brown 和 fox 需要全部出现在域中。  </li><li>brown 的位置应该比 quick 的位置大 1 。  </li><li>fox 的位置应该比 quick 的位置大 2 。  </li></ul><p>如果以上任何一个选项不成立，则该文档不能认定为匹配  </p></blockquote><h3 id="2-6-前缀查询-prefix"><a href="#2-6-前缀查询-prefix" class="headerlink" title="2.6 前缀查询(prefix)"></a>2.6 前缀查询(prefix)</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /my_index/address/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"prefix"</span>: &#123;</span><br><span class="line">            <span class="attr">"postcode"</span>: <span class="string">"W1"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>为了支持前缀匹配，查询会做以下事情：</p><ol><li>扫描词列表并查找到第一个以 W1 开始的词。  </li><li>搜集关联的文档 ID 。  </li><li>*移动到下一个词。  </li><li>如果这个词也是以 W1 开头，查询跳回到第二步再重复执行，直到下一个词不以 W1 为止。  </li></ol></blockquote><h3 id="2-7-通配符查询（wildcard）"><a href="#2-7-通配符查询（wildcard）" class="headerlink" title="2.7 通配符查询（wildcard）"></a>2.7 通配符查询（wildcard）</h3><p> wildcard 通配符查询也是一种底层基于词的查询，与前缀查询不同的是它允许指定匹配的正则式。它使用标准的 shell 通配符查询： ? 匹配任意字符， * 匹配 0 或多个字符<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /my_index/address/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"wildcard"</span>: &#123;</span><br><span class="line">            <span class="attr">"postcode"</span>: <span class="string">"W?F*HW"</span> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-8-正则查询（regexp）"><a href="#2-8-正则查询（regexp）" class="headerlink" title="2.8 正则查询（regexp）"></a>2.8 正则查询（regexp）</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /my_index/address/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"regexp"</span>: &#123;</span><br><span class="line">            <span class="attr">"postcode"</span>: <span class="string">"W[0-9].+"</span> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>prefix 、 wildcard 和 regexp 查询是基于词操作的，如果用它们来查询 analyzed 字段，它们会检查字段里面的每个词，而不是将字段作为整体来处理。  </p><p>比方说包含 “Quick brown fox” （快速的棕色狐狸）的 title 字段会生成词： quick 、 brown 和 fox </p></blockquote><h2 id="3-query-string"><a href="#3-query-string" class="headerlink" title="3.query_string"></a>3.query_string</h2><h3 id="3-1-query-string"><a href="#3-1-query-string" class="headerlink" title="3.1 query_string"></a>3.1 query_string</h3><p>title字段包含crime，且权重为10，也要包含punishment，但是otitle不包含cat，同时author字段包含Fyodor和dostoevsky。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"query_string"</span>: &#123;</span><br><span class="line">             <span class="attr">"query"</span>:<span class="string">"title:crime^10 +title:punishment -otitle:cat +author:(+Fyodor +dostoevsky)"</span>,</span><br><span class="line">             <span class="attr">"default_field"</span>:<span class="string">"title"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常见query_string写法<br>常见写法：</p><p>name字段为obama<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"query"</span>: &#123;</span><br><span class="line"><span class="attr">"query_string"</span>: <span class="string">"name:obama"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>存在一个nam开头的字段，值为obama<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"query"</span>: &#123;</span><br><span class="line"><span class="attr">"query_string"</span>: <span class="string">"nam\\*:obama"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>name字段值为null的文档</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"query"</span>: &#123;</span><br><span class="line"><span class="attr">"query_string"</span>: <span class="string">"__missing__:name"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>name字段值不为null的文档<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"query"</span>: &#123;</span><br><span class="line"><span class="attr">"query_string"</span>: <span class="string">"__exists__:name"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>name字段为Obama或者xidada的文档</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"query"</span>: &#123;</span><br><span class="line"><span class="attr">"query_string"</span>: <span class="string">"name:（obama OR xidada)"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Wildcards<br>query的内容中支持？与<code>*</code> <code>？</code>可以代替一个任意字符、<code>*</code>可代表任意个字符（包括零个）。比如你要查询的内容很长，记不清了但是你记得末尾是tor，那么你只需要把query内容写成<code>*tor</code>即可  </p></blockquote><blockquote><p>正则<br>如果要在query的内容中使用正则表达式，在两端加上正斜杠/即可。比如<code>name:/ob[am]{2}a/</code>  </p></blockquote><h3 id="3-2-simple-query-string查询"><a href="#3-2-simple-query-string查询" class="headerlink" title="3.2 simple_query_string查询"></a>3.2 simple_query_string查询</h3><p>解析出错时不抛异常，丢弃查询无效的部分</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"simple_query_string"</span>: &#123;</span><br><span class="line">             <span class="attr">"query"</span>:<span class="string">"title:crime^10 +title:punishment -otitle:cat +author:(+Fyodor +dostoevsky)"</span>,</span><br><span class="line">             <span class="attr">"default_operator"</span>:<span class="string">"or"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-标识符查询"><a href="#3-3-标识符查询" class="headerlink" title="3.3 标识符查询"></a>3.3 标识符查询</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"ids"</span>: &#123;</span><br><span class="line">             <span class="attr">"type"</span>:<span class="string">"book"</span>,</span><br><span class="line">             <span class="attr">"values"</span>:[<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><p>bool查询的<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">GET test*/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>:<span class="number">3</span>,</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"bool"</span>:&#123;</span><br><span class="line">      <span class="attr">"must"</span>: [</span><br><span class="line">          &#123;<span class="attr">"match"</span>:&#123;<span class="attr">"message"</span>: <span class="string">"学生"</span>&#125;&#125;,</span><br><span class="line">          &#123;<span class="attr">"match"</span>:&#123;<span class="attr">"message"</span>: <span class="string">"所有"</span>&#125;&#125;</span><br><span class="line">        ],</span><br><span class="line">      <span class="attr">"should"</span>: [</span><br><span class="line">          &#123;<span class="attr">"match"</span>: &#123;<span class="attr">"port"</span>: <span class="string">"53198"</span>&#125;&#125;,</span><br><span class="line">          &#123;<span class="attr">"match"</span>: &#123;<span class="attr">"@timestamp"</span>:<span class="string">"2018-09-17T17:49:25.991Z"</span>&#125;&#125;</span><br><span class="line">        ],</span><br><span class="line">      <span class="attr">"must_not"</span>: [</span><br><span class="line">          &#123;<span class="attr">"match"</span>: &#123;<span class="attr">"port"</span>: <span class="string">"64273"</span>&#125;&#125;,</span><br><span class="line">          &#123;<span class="attr">"match"</span>: &#123;<span class="attr">"port"</span>:<span class="string">"1234"</span>&#125;&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>等价于<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">GET test*/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>:<span class="number">3</span>,</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"query_string"</span>:&#123;<span class="attr">"query"</span>: <span class="string">"message:学生 +message:所有 -port:55714"</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch非权威指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《如何阅读一本书》读书笔记</title>
      <link href="/2019/06/20/%E3%80%8A%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/06/20/%E3%80%8A%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>《如何阅读一本书》</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>每本书的封面之下都有一套自己的骨架，作为一个分析阅读的读者，责任就是要找出这个骨架。  </p><p>一本书出现在面前时，肌肉包着骨头，衣服包裹着肌肉，可说是盛装而来。  </p><p>读者用不着揭开它的外衣或是撕去它的肌肉来得到在柔软表皮下的那套骨架，但是一定要用一双X光般的透视眼来看这本书，因为那是了解一本书、掌握其骨架的基础。  </p><p>《如何阅读一本书》初版于1940年，1972年大幅增订改写为新版。  </p><p>懂阅读的人，初探阅读的人，读这本书可以少走冤枉路。对阅读有所体会的人，读这本书可以有更深的印证和领悟。  </p><p>(来自豆瓣)</p><p><img src="https://i.loli.net/2017/09/08/59b2a3843d8fb.jpg" alt="如何阅读一本书.jpg"><br><a id="more"></a></p><h2 id="作者简介"><a href="#作者简介" class="headerlink" title="作者简介"></a>作者简介</h2><p>莫提默·J. 艾德勒（1902－2001）以学者、教育家、编辑人等多重面貌享有盛名。除了写作《如何阅读一本书》外，以主编《西方世界的经典人并担任1974年第十五版《大英百科全书》的编辑相异而闻名于世。  </p><p>查尔斯·范多伦（1926－）先曾任美国哥伦比亚大学教授。后因故离任，和艾德勒一起工作。一方面襄助艾德勒编辑《大英百科全书》，一方面将本书1940年初版内容大幅度增补改写。  </p><h2 id="读书有感"><a href="#读书有感" class="headerlink" title="读书有感"></a>读书有感</h2><h3 id="为什么从这本书开始？"><a href="#为什么从这本书开始？" class="headerlink" title="为什么从这本书开始？"></a>为什么从这本书开始？</h3><p>工欲善其事，必先利其器。所以读书之前，读一本优秀的教人读书的书，是非常有必要的。《如何阅读一本书》正是一本这样的好书。 </p><p>看完这本书后，相信许多人都会像我一样，懊悔自己没有在更早的时候接触到它。<br>认识自己的阅读方式，然后使用更科学和有效的方式去阅读。  </p><p>因为本人认为他是一本很好的书（当然，本书的优秀不需要我的肯定），同时他能让我们收获阅读的方法和对阅读的理解。看完这本书后，我真的希望有人能在更早的时候推荐我阅读这本书。所以我打算从这本书开始。  </p><h3 id="看本书前我是怎么阅读？"><a href="#看本书前我是怎么阅读？" class="headerlink" title="看本书前我是怎么阅读？"></a>看本书前我是怎么阅读？</h3><p>首先，在看本书之前，我应该已经算是一个书中说的“阅读的人”, 但同时我也是一个不太懂得阅读的人。   </p><p>我是个小说迷，看小说时整个人都很轻松，正因为这种轻松的感觉，让我很多时候都不能自拔；我很喜欢看一些科普读物，让我的视野更宽广；因为工作需求，我也会看很多技术的书籍充电；因为好奇心很大，所以经常还会翻阅各种各样的‘杂书’；  </p><p>但在阅读本书之前，我一直都没有自己的一个很合理的阅读方法，也不了解自己阅读行为的一些理论层的解释。例如：我经常以阅读小说的速度去阅读一些技术书籍，往往不得其解，随之放弃。也很多时候沉迷于简单的小说阅读的快感中，还认为从中收获很多。  </p><p>错误的阅读方式让我错过了去体会很多好书的精华，浪费了许多时间在一些不好的书上面。  </p><h3 id="我的收获是？"><a href="#我的收获是？" class="headerlink" title="我的收获是？"></a>我的收获是？</h3><p>这本书让我对阅读有了一个更加系统和科学的认识，也纠正了我一些不合适的阅读方式。 </p><p>我们阅读书籍的目的在于获得新的资讯，从而让让我们获得成长。毫无疑问，我在这本书中收获了这些。  </p><p>在看到本书开始大概三分之一的位置的时候，我有一种与本书相见恨晚的感觉，作者描述的阅读状态和方式，都很契合我的从前总结的阅读感受。随着更加往后的阅读，发现作者所讲的内容越来越难，我阅读的难度也在增加，这个时候，作者告诉我们：当你阅读越是困难，说明与作者的层次相差越大，阅读的收获也是越大。  </p><p>随着整本书读完，做完后面的阅读测试题，才感受到作者对阅读的理解至深，有一种再看一遍的冲动。<br>也有一种找本新书来应用本书收获的感觉。  </p><h3 id="这本书该怎么读？"><a href="#这本书该怎么读？" class="headerlink" title="这本书该怎么读？"></a>这本书该怎么读？</h3><p>这本书我是花了近一个月早上早起，每天挤出半个小时来看完的。阅读作者阅读的数量和阅读涉及的领域之广，让我深深的钦佩。也是正是因为作者的博学，所以如果没有一定的知识储备，在阅读本书的时候还是会遇到一些困难的，当遇到这些困难的时候，就要像作者所说的：坚持看下去。<br>这是一本偏向应用的书，所以我们在阅读的时候，更重要的还有要注重实践。在本书结尾的地方也留了一些阅读的测验。当然更多的还是需要在以后的更多的阅读活动中去实践。  </p><h3 id="用简短的话总结？"><a href="#用简短的话总结？" class="headerlink" title="用简短的话总结？"></a>用简短的话总结？</h3><p>本书从阅读的四个层次，循序深入的为我们解析了各个阅读阶段的技巧和注意事项。是一本指导阅读人阅读的很好的一本书。值得推荐。  </p><blockquote><p><strong> 阅读的人：</strong>   所谓‘阅读的人’，是指那些今天仍然习惯于从书写文字中汲取大量资讯，以增进对世界了解的人。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> read </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql通过触发器远程同步</title>
      <link href="/2019/05/27/mysql%E9%80%9A%E8%BF%87%E8%A7%A6%E5%8F%91%E5%99%A8%E8%BF%9C%E7%A8%8B%E5%90%8C%E6%AD%A5/"/>
      <url>/2019/05/27/mysql%E9%80%9A%E8%BF%87%E8%A7%A6%E5%8F%91%E5%99%A8%E8%BF%9C%E7%A8%8B%E5%90%8C%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="mysql通过触发器远程同步"><a href="#mysql通过触发器远程同步" class="headerlink" title="mysql通过触发器远程同步"></a>mysql通过触发器远程同步</h2><blockquote><p>约定：  </p></blockquote><ul><li>需要同步的表为: <code>A表</code>  </li><li>中间的表为: <code>B表</code>  </li><li>同步到的远程表为: <code>C表</code><br><img src="https://static.oschina.net/uploads/space/2017/0124/211715_4QI1_733235.png" alt="逻辑表"></li></ul><a id="more"></a><h3 id="一、检查mysql是否支持federated数据引擎"><a href="#一、检查mysql是否支持federated数据引擎" class="headerlink" title="一、检查mysql是否支持federated数据引擎"></a>一、检查mysql是否支持federated数据引擎</h3><h4 id="1-查看开启的储存引擎"><a href="#1-查看开启的储存引擎" class="headerlink" title="1.查看开启的储存引擎"></a>1.查看开启的储存引擎</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW ENGINES;</span><br></pre></td></tr></table></figure><h4 id="2-如果不支持"><a href="#2-如果不支持" class="headerlink" title="2.如果不支持"></a>2.如果不支持</h4><p><code>Support</code>的值是<code>NO</code><br><code>| FEDERATED          | NO      | Federated MySQL storage engine                             | NULL         | NULL | NULL       |</code></p><p>可能需要修改mysql配置文件；<br>若没有<code>federated</code>引擎需要配置<code>my.cnf</code>文件。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/mysql/my.cnf</span><br><span class="line">```  </span><br><span class="line">在`[mysqld]`后面直接加`federated`，并且注释掉`skip-federated`（前面加#）</span><br></pre></td></tr></table></figure></p><p>[mysqld]<br>federated<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 二、建立同步的federated表和远程的表</span><br><span class="line">&gt; ip示例如下：</span><br><span class="line"></span><br><span class="line">- 数据源：      192.168.1.1</span><br><span class="line">- Federated:  192.168.1.1</span><br><span class="line">- 远程：  192.168.1.156</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 原表数据结构如下：</span><br><span class="line">```sql</span><br><span class="line">CREATE TABLE `test_20180425` (</span><br><span class="line">  `id` int(11) NOT NULL,  </span><br><span class="line">  `somthing` int(11) DEFAULT NULL,</span><br><span class="line"></span><br><span class="line">) ENGINE=MyISAM DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure></p><h4 id="federated表"><a href="#federated表" class="headerlink" title="federated表"></a>federated表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`db_bak`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`somthing`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">) <span class="keyword">ENGINE</span>=FEDERATED <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">CONNECTION</span>=<span class="string">'mysql://abc:abc123@192.168.1.156/remote_db/db_admin'</span></span><br></pre></td></tr></table></figure><h4 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">USE</span> <span class="string">`db`</span>$$</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> <span class="comment">/*!50032 IF EXISTS */</span></span><br><span class="line"><span class="string">`t_db_admin_insert`</span>$$</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="comment">/*!50017 DEFINER = 'root'@'%' */</span></span><br><span class="line"><span class="keyword">TRIGGER</span> <span class="string">`t_db_admin_insert`</span> <span class="keyword">AFTER</span> <span class="keyword">INSERT</span> <span class="keyword">ON</span> <span class="string">`test_20180425`</span> <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> db.<span class="string">`db_bak`</span> (</span><br><span class="line"><span class="string">`id`</span>,</span><br><span class="line"><span class="string">`someting`</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(</span><br><span class="line">NEW.id,</span><br><span class="line">NEW.someting</span><br><span class="line">) ;</span><br><span class="line"><span class="keyword">END</span> ;$$</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode算法题Z字形变换的解答</title>
      <link href="/2019/04/20/leetcode%E7%AE%97%E6%B3%95%E9%A2%98Z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2%E7%9A%84%E8%A7%A3%E7%AD%94/"/>
      <url>/2019/04/20/leetcode%E7%AE%97%E6%B3%95%E9%A2%98Z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2%E7%9A%84%E8%A7%A3%E7%AD%94/</url>
      
        <content type="html"><![CDATA[<h2 id="题目内容如下"><a href="#题目内容如下" class="headerlink" title="题目内容如下"></a>题目内容如下</h2><p>将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。</p><p>比如输入字符串为 “LEETCODEISHIRING” 行数为 3 时，排列如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L   C   I   R</span><br><span class="line">E T O E S I I G</span><br><span class="line">E   D   H   N</span><br></pre></td></tr></table></figure><p>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：<code>&quot;LCIRETOESIIGEDHN&quot;</code>。<br><a id="more"></a></p><p>请你实现这个将字符串进行指定行数变换的函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string convert(string s, int numRows);</span><br></pre></td></tr></table></figure></p><blockquote><p>示例 1:</p></blockquote><p>输入: <code>s = &quot;LEETCODEISHIRING&quot;, numRows = 3</code>  </p><p>输出: <code>&quot;LCIRETOESIIGEDHN&quot;</code>   </p><blockquote><p>示例 2: </p></blockquote><p>输入: <code>s = &quot;LEETCODEISHIRING&quot;, numRows = 4</code>  </p><p>输出: <code>&quot;LDREOEIIECIHNTSG&quot;</code>  </p><p>解释:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">L     D     R</span><br><span class="line">E   O E   I I</span><br><span class="line">E C   I H   N</span><br><span class="line">T     S     G</span><br></pre></td></tr></table></figure></p><h2 id="题目解答"><a href="#题目解答" class="headerlink" title="题目解答"></a>题目解答</h2><p>思路：<br>明显的解决方案就是row个数组，<br>然后循环切割字符串，row个数组里填。<br>当最大的时候就往回<code>-1</code>,最小时候就<code>+1</code>,如此循环。<br>当然，当<code>row==1</code>时候直接返回元字符串</p><blockquote><p>解法1</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(self, s, numRows)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :type numRows: int</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        tmp = &#123;&#125;</span><br><span class="line">        z = <span class="number">0</span></span><br><span class="line">        f = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> numRows == <span class="number">1</span>:</span><br><span class="line">            print(s)</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> range(numRows):</span><br><span class="line">            tmp[n] = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">            tmp[z].append(i)</span><br><span class="line">            <span class="keyword">if</span> f == <span class="number">1</span>:</span><br><span class="line">                z -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                z += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> z == (numRows<span class="number">-1</span>):</span><br><span class="line">                f = <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> z == <span class="number">0</span>:</span><br><span class="line">                f = <span class="number">0</span></span><br><span class="line">        r = <span class="string">""</span></span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> tmp:</span><br><span class="line">            r += <span class="string">""</span>.join(tmp[t])</span><br><span class="line">        <span class="keyword">return</span> r</span><br></pre></td></tr></table></figure><p>这个解法的效率不高，思路不变，优化一下代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(self, s, numRows)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :type numRows: int</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        z = <span class="number">0</span></span><br><span class="line">        f = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> numRows == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">        tmp = [<span class="string">""</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(numRows)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">            tmp[z] += i</span><br><span class="line">            <span class="keyword">if</span> z == (numRows<span class="number">-1</span>) <span class="keyword">or</span> z == <span class="number">0</span>: f = <span class="keyword">not</span> f</span><br><span class="line">            z = z<span class="number">-1</span> <span class="keyword">if</span> f <span class="keyword">else</span> z+<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>.join(tmp)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用mysql命令笔记</title>
      <link href="/2019/04/10/%E5%B8%B8%E7%94%A8mysql%E5%91%BD%E4%BB%A4%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/04/10/%E5%B8%B8%E7%94%A8mysql%E5%91%BD%E4%BB%A4%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> zhangsan <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'zhangsan'</span>;</span><br></pre></td></tr></table></figure><h3 id="查看当前用户"><a href="#查看当前用户" class="headerlink" title="查看当前用户"></a>查看当前用户</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>();</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CURRENT_USER</span>();</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="查看用户的权限"><a href="#查看用户的权限" class="headerlink" title="查看用户的权限"></a>查看用户的权限</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> 你的用户;</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> root@<span class="string">'localhost'</span>;</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> webgametest@<span class="number">10.3</span><span class="number">.18</span><span class="number">.158</span>;</span><br></pre></td></tr></table></figure><h3 id="重载权限表"><a href="#重载权限表" class="headerlink" title="重载权限表"></a>重载权限表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span>;</span><br></pre></td></tr></table></figure><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> zhangsanDb.* <span class="keyword">TO</span> zhangsan@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'zhangsan'</span>;</span><br><span class="line"><span class="comment"># FLUSH PRIVILEGES;</span></span><br></pre></td></tr></table></figure><blockquote><p>说明：<br>除了“ALL PRIVILEGES”是所有权限外，还有常用的：<br><strong> SELECT </strong>：读取权限。<br><strong> DELETE </strong>：删除权限。<br><strong> UPDATE </strong>：更新权限。<br><strong> CREATE </strong>：创建权限。<br><strong> DROP </strong>：删除数据库、数据表权限。  </p></blockquote><p>###修改密码<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> mysql.user <span class="keyword">SET</span> <span class="keyword">password</span> = <span class="keyword">PASSWORD</span>(<span class="string">'zhangsannew'</span>) <span class="keyword">WHERE</span><span class="keyword">user</span> = <span class="string">'zhangsan'</span> <span class="keyword">AND</span> HOST = <span class="string">'%'</span>;</span><br><span class="line"><span class="comment">#FLUSH PRIVILEGES;</span></span><br></pre></td></tr></table></figure></p><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> zhangsan@<span class="string">'%'</span>;</span><br></pre></td></tr></table></figure><h3 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysql 命令导入</span></span><br><span class="line">mysql -uroot -p123456 -Ddbname &lt; file.sql</span><br><span class="line"><span class="comment"># source 命令导入数据库需要先登录到数库终端：</span></span><br><span class="line">source /home/abc/abc.sql  <span class="comment"># 导入备份数据库</span></span><br><span class="line"><span class="comment"># load命令上传</span></span><br><span class="line"><span class="keyword">LOAD</span> <span class="keyword">DATA</span> <span class="keyword">LOCAL</span> <span class="keyword">INFILE</span> <span class="string">'dump.txt'</span> <span class="keyword">INTO</span> <span class="keyword">TABLE</span> mytbl <span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">':'</span> <span class="keyword">LINES</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">'\r\n'</span>;</span><br></pre></td></tr></table></figure><h3 id="数据导出"><a href="#数据导出" class="headerlink" title="数据导出"></a>数据导出</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导出某个表</span></span><br><span class="line">mysqldump -u root -p DB table &gt; dump.txt</span><br><span class="line"><span class="comment"># 导出某个库</span></span><br><span class="line">mysqldump -u root -p DB &gt; database_dump.txt</span><br><span class="line"><span class="comment"># 导出所有数据库：</span></span><br><span class="line">mysqldump -u root -p --all-databases &gt; database_dump.txt</span><br></pre></td></tr></table></figure><h3 id="查看数据库的引擎"><a href="#查看数据库的引擎" class="headerlink" title="查看数据库的引擎"></a>查看数据库的引擎</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">ENGINES</span>;</span><br></pre></td></tr></table></figure><h3 id="创建数据库并指定编码"><a href="#创建数据库并指定编码" class="headerlink" title="创建数据库并指定编码"></a>创建数据库并指定编码</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> my_db <span class="keyword">default</span> <span class="keyword">charset</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br></pre></td></tr></table></figure><h3 id="复制表-同一表结构"><a href="#复制表-同一表结构" class="headerlink" title="复制表(同一表结构)"></a>复制表(同一表结构)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span>  <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> teacher_his <span class="keyword">LIKE</span> teacher ;</span><br></pre></td></tr></table></figure><h3 id="重命名表"><a href="#重命名表" class="headerlink" title="重命名表"></a>重命名表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t1 <span class="keyword">RENAME</span> t2;</span><br></pre></td></tr></table></figure><h3 id="查看当前数据库的编码"><a href="#查看当前数据库的编码" class="headerlink" title="查看当前数据库的编码"></a>查看当前数据库的编码</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> DB;</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'character_set_database'</span>;</span><br></pre></td></tr></table></figure><h3 id="修改数据库的编码"><a href="#修改数据库的编码" class="headerlink" title="修改数据库的编码"></a>修改数据库的编码</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> xxx <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> gb2312;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker学习笔记</title>
      <link href="/2019/02/01/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/02/01/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-docker是什么？？"><a href="#1-docker是什么？？" class="headerlink" title="1.docker是什么？？"></a>1.docker是什么？？</h2><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的Linux 机器上，也可以实现虚拟化。 容器是完全使用沙箱机制，相互之间不会有任何接口。<br>讲简单点：docker就类似一个虚拟机软件，但是与虚拟机软件又有所区别。</p><p>docker和虚拟机的区别      </p><p><img src="https://i.loli.net/2018/10/11/5bbef55470222.png" alt="docker和虚拟机的区别.png"></p><a id="more"></a><h2 id="2-docker的重要概念"><a href="#2-docker的重要概念" class="headerlink" title="2.docker的重要概念"></a>2.docker的重要概念</h2><h3 id="镜像（image）"><a href="#镜像（image）" class="headerlink" title="镜像（image）"></a>镜像（image）</h3><p>镜像类似于虚拟机的一个快照，一般包含了系统，我们想要的服务程序等。<br>例如：Nginx的官方image就包含了，基本的linux操作系统和Nginx服务器的程序。</p><h3 id="容器（container）"><a href="#容器（container）" class="headerlink" title="容器（container）"></a>容器（container）</h3><p>镜像（image）我们可以把它看做一个虚拟机的快照文件。这个快照</p><h3 id="仓库（repository）"><a href="#仓库（repository）" class="headerlink" title="仓库（repository）"></a>仓库（repository）</h3><p>docker在很多地方都借鉴了git的优秀思想，仓库这个估计也是。<br>仓库是一个集中存放镜像的地方。<br>这样做的好处有很多，最典型的就是，我们需要在内网多个服务器上使用某个镜像时，可以从本地的镜像仓库中pull。</p><ul><li>注册服务器（Registry），一个注册服务器上可以有多个仓库，一个仓库里可以放多个镜像。</li></ul><h3 id="docker架构图"><a href="#docker架构图" class="headerlink" title="docker架构图"></a>docker架构图</h3><p><img src="https://i.loli.net/2018/10/11/5bbf09d504115.png" alt="架构图.png"></p><h2 id="3-docker的基本操作"><a href="#3-docker的基本操作" class="headerlink" title="3.docker的基本操作"></a>3.docker的基本操作</h2><h3 id="基本操作图"><a href="#基本操作图" class="headerlink" title="基本操作图"></a>基本操作图</h3><ol><li><p>常用命令<br><img src="https://i.loli.net/2018/10/11/5bbf0c83a9bb9.png" alt="常用命令.png">      </p></li><li><p>简单版<br><img src="https://i.loli.net/2018/10/11/5bbf0d0247ed9.png" alt="docker_cli_stage.png">       </p></li></ol><h3 id="镜像（image）的操作"><a href="#镜像（image）的操作" class="headerlink" title="镜像（image）的操作"></a>镜像（image）的操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>列出全部的image    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi [imageID,name]</span><br></pre></td></tr></table></figure><p>删除指定的某个镜像，可以用id或者image的name。<br>注：当有镜像正在被使用的时候是无法删除的    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag [image_name:tag] [new_name:new_tag]</span><br></pre></td></tr></table></figure><p>docker给镜像（image）写标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker history [imageID,name]</span><br></pre></td></tr></table></figure><p>查看指定的镜像构成的历史</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it [imageID,name]</span><br></pre></td></tr></table></figure><p>执行一个镜像到</p><h3 id="容器（container）的操作"><a href="#容器（container）的操作" class="headerlink" title="容器（container）的操作"></a>容器（container）的操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p>查看当前的容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elasticsearch_cat_api笔记</title>
      <link href="/2018/12/09/elasticsearch_cat_api%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/12/09/elasticsearch_cat_api%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>如果经常在命令行环境下工作，cat API 对你会非常有用。用 Linux 的 cat 命令命名，这些 API 也就设计成像 *nix 命令行工具一样工作了。</p><p>他们提供的统计和前面已经讨论过的 API ( 健康、节点统计 等等 ) 是一样的。但是输出以表格的形式提供，而不是 JSON。对于系统管理员来说这是 非常 方便的，你仅仅想浏览一遍集群或者找出内存使用偏高的节点而已。</p><a id="more"></a><p>通过 GET 请求发送 cat 命名可以列出所有可用的 API：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">GET /_cat</span><br><span class="line"></span><br><span class="line">=^.^=</span><br><span class="line">/_cat/allocation</span><br><span class="line">/_cat/shards</span><br><span class="line">/_cat/shards/&#123;index&#125;</span><br><span class="line">/_cat/master</span><br><span class="line">/_cat/nodes</span><br><span class="line">/_cat/indices</span><br><span class="line">/_cat/indices/&#123;index&#125;</span><br><span class="line">/_cat/segments</span><br><span class="line">/_cat/segments/&#123;index&#125;</span><br><span class="line">/_cat/count</span><br><span class="line">/_cat/count/&#123;index&#125;</span><br><span class="line">/_cat/recovery</span><br><span class="line">/_cat/recovery/&#123;index&#125;</span><br><span class="line">/_cat/health</span><br><span class="line">/_cat/pending_tasks</span><br><span class="line">/_cat/aliases</span><br><span class="line">/_cat/aliases/&#123;alias&#125;</span><br><span class="line">/_cat/thread_pool</span><br><span class="line">/_cat/plugins</span><br><span class="line">/_cat/fielddata</span><br><span class="line">/_cat/fielddata/&#123;fields&#125;</span><br></pre></td></tr></table></figure><h3 id="健康（health）"><a href="#健康（health）" class="headerlink" title="健康（health）"></a>健康（health）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET /_cat/health?v</span><br><span class="line"></span><br><span class="line">epoch   time    cluster status node.total node.data shards pri relo init</span><br><span class="line">1408[..] 12[..] el[..]  1         1         114 114    0    0     114</span><br><span class="line">unassign</span><br></pre></td></tr></table></figure><blockquote><p><code>?v</code>是为了显示数据的标题</p></blockquote><h3 id="命令help"><a href="#命令help" class="headerlink" title="命令help"></a>命令help</h3><p>我们看到集群里节点的一些统计，不过和完整的 节点统计 输出相比而言是非常基础的。你可以包含更多的指标，但是比起查阅文档，让我们直接问 cat API 有哪些可用的吧。  </p><p>你可以过对任意 API 添加 <code>?help</code> 参数来做到这点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /_cat/nodes?help</span><br><span class="line"></span><br><span class="line">id               | id,nodeId               | unique node id</span><br><span class="line">pid              | p                       | process id</span><br><span class="line">host             | h                       | host name</span><br><span class="line">ip               | i                       | ip address</span><br><span class="line">port             | po                      | bound transport port</span><br><span class="line">version          | v                       | es version</span><br><span class="line">build            | b                       | es build hash</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><h3 id="节点统计（nodes）"><a href="#节点统计（nodes）" class="headerlink" title="节点统计（nodes）"></a>节点统计（nodes）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /_cat/nodes?v</span><br><span class="line"></span><br><span class="line">host         ip            heap.percent ram.percent load node.role master name</span><br><span class="line">zacharys-air 192.168.1.131           45          72 1.85 d         *      Zach</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /_cat/nodes?v&amp;h=ip,port,heapPercent,heapMax</span><br><span class="line"></span><br><span class="line">ip            port heapPercent heapMax</span><br><span class="line">192.168.1.131 9300          53 990.7mb</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch非权威指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL触发器基本的使用</title>
      <link href="/2018/11/20/MySQL%E8%A7%A6%E5%8F%91%E5%99%A8%E5%9F%BA%E6%9C%AC%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/11/20/MySQL%E8%A7%A6%E5%8F%91%E5%99%A8%E5%9F%BA%E6%9C%AC%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><p>触发器是一种特殊的<code>存储过程</code>，是嵌入到mysql的一段程序，它在插入，删除或修改特定表中的数据时触发执行。</p><h2 id="一、基本语法"><a href="#一、基本语法" class="headerlink" title="一、基本语法"></a>一、基本语法</h2><h3 id="1-创建触发器："><a href="#1-创建触发器：" class="headerlink" title="1. 创建触发器："></a>1. 创建触发器：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TRIGGER /*触发器名称*/</span><br><span class="line">AFTER / BEFORE /*(触发器工作的时机)*/ </span><br><span class="line">UPDATE / DELETE / INSERT /*(触发器监听事件)*/ </span><br><span class="line">ON /*表名(触发器监听的目标表)*/ </span><br><span class="line">FOR EACH ROW /*(行级监视，mysql固定写法，oracle不同)*/</span><br><span class="line">BEGIN</span><br><span class="line">/*sql语句集........（触发器执行动作，分号结尾）*/</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2-删除触发器："><a href="#2-删除触发器：" class="headerlink" title="2. 删除触发器："></a>2. 删除触发器：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> <span class="keyword">IF</span> exist <span class="string">`trigger_name`</span>;</span><br></pre></td></tr></table></figure><h3 id="3-查询数据库触发器："><a href="#3-查询数据库触发器：" class="headerlink" title="3. 查询数据库触发器："></a>3. 查询数据库触发器：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">triggers</span>;</span><br></pre></td></tr></table></figure><h3 id="4-触发器声明变量"><a href="#4-触发器声明变量" class="headerlink" title="4.触发器声明变量:"></a>4.触发器声明变量:</h3><p>一个变量名可以由当前字符集的数字字母字符和“<code>_</code>”、“<code>$</code>”和“<code>.</code>”组成;</p><h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><p>MySQL 中使用 <code>DECLARE</code> 来定义一局部变量，该变量只能在 <code>BEGIN … END</code> 复合语句中使用，并且应该定义在复合语句的开头，即其它语句之前。  </p><p>语法是：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> var_name[...]<span class="keyword">type</span>[<span class="keyword">DEFAULT</span> <span class="keyword">value</span>]</span><br></pre></td></tr></table></figure></p><p>其中，  </p><ul><li><code>var_name</code> 为变量名称，同sql语句一样，变量名不区分大小写;   </li><li><code>type</code> 为mysql支持的任何数据类型;   </li><li><code>DEFAULT</code> 子句提供默认值，值可以是一个表达式 (如果需要可以使用)。   </li></ul><blockquote><p>注: 可以同时定义多个同类型的变量，用逗号隔开，变量初始值为NULL；  </p></blockquote><p>例如：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> a <span class="built_in">INT</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span> b <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure></p><h4 id="用户变量"><a href="#用户变量" class="headerlink" title="用户变量"></a>用户变量</h4><p>用户变量：相当与全局变量。 只在一个数据库中有效<br>在客户端连接到数据库实例整个过程中用户变量都是有效的<br>mysql中用户变量<strong>不需要事先声明</strong>，在用的时候直接用<code>@变量名</code> 使用就可以<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*set语句可用于向系统变量或用户变量赋值*/</span></span><br><span class="line"><span class="keyword">SET</span> @<span class="keyword">num</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="keyword">num</span> := <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*也可使用select语句来定义*/</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="keyword">num</span> := <span class="number">1</span>;</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="keyword">num</span> := field_name <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="number">1</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p><blockquote><p>注：SELECT只能用<code>:=</code> 定义 </p></blockquote><h3 id="5-变量的赋值"><a href="#5-变量的赋值" class="headerlink" title="5.变量的赋值"></a>5.变量的赋值</h3><p>mysql触发器内，对变量赋值采用 SET 语句<br>语法是：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> var_name = expr [,var_name = expr] ...</span><br></pre></td></tr></table></figure></p><p>使用举例<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> c <span class="built_in">INT</span>; </span><br><span class="line"><span class="keyword">SET</span> c = ( <span class="keyword">SELECT</span> stuCount <span class="keyword">FROM</span> <span class="keyword">class</span> <span class="keyword">WHERE</span> classID = new.classID );</span><br></pre></td></tr></table></figure></p><blockquote><h6 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a>Tips:</h6><p><strong>行变量：</strong>当目标表发生改变时候，变化的行可用行变量表示<br><code>new</code> :代表目标表目标行发生改变之后的行<br><code>old</code> :代表目标表目标行发生改变之前的行  </p></blockquote><h3 id="6-逻辑判断语句"><a href="#6-逻辑判断语句" class="headerlink" title="6.逻辑判断语句"></a>6.逻辑判断语句</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">IF <span class="comment">/*condition1*/</span> THEN</span><br><span class="line">　　　<span class="comment">/*do something;*/</span></span><br><span class="line">　ELSEIF <span class="comment">/*condition2*/</span> THEN</span><br><span class="line">　<span class="comment">/*do something;*/</span></span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</span><br></pre></td></tr></table></figure><h2 id="二、示例"><a href="#二、示例" class="headerlink" title="二、示例"></a>二、示例</h2><h3 id="1-触发器监听：insert"><a href="#1-触发器监听：insert" class="headerlink" title="1.触发器监听：insert"></a>1.触发器监听：insert</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> <span class="string">`trigger_name`</span> </span><br><span class="line"><span class="keyword">AFTER</span> <span class="keyword">INSERT</span> </span><br><span class="line"><span class="keyword">ON</span> <span class="string">`table`</span> </span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">/* 要做的SQL操作，如：</span></span><br><span class="line"><span class="comment">UPDATE table1 SET field = 'abc' WHERE id = new.id;</span></span><br><span class="line"><span class="comment">new 是行变量。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><h3 id="2-触发器监听：delete"><a href="#2-触发器监听：delete" class="headerlink" title="2.触发器监听：delete"></a>2.触发器监听：delete</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> <span class="string">`trigger_name2`</span> </span><br><span class="line"><span class="keyword">AFTER</span> <span class="keyword">DELETE</span> </span><br><span class="line"><span class="keyword">ON</span> <span class="string">`table`</span> </span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">/* 要做的SQL操作，如：</span></span><br><span class="line"><span class="comment">UPDATE table1 SET field = 'abc' WHERE id = old.id;</span></span><br><span class="line"><span class="comment">old 是行变量。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><h3 id="3-触发器监听：update"><a href="#3-触发器监听：update" class="headerlink" title="3.触发器监听：update"></a>3.触发器监听：update</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> <span class="string">`trigger_name3`</span> </span><br><span class="line"><span class="keyword">AFTER</span> <span class="keyword">UPDATE</span> </span><br><span class="line"><span class="keyword">ON</span> <span class="string">`table`</span> </span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">/* 要做的SQL操作，如：</span></span><br><span class="line"><span class="comment">UPDATE table1 SET field = 'abc' WHERE id = new.id;</span></span><br><span class="line"><span class="comment">old 是行变量。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><h3 id="4-触发器SET和IF语句的综合使用"><a href="#4-触发器SET和IF语句的综合使用" class="headerlink" title="4.触发器SET和IF语句的综合使用"></a>4.触发器SET和IF语句的综合使用</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> <span class="string">`trigger_name4`</span> </span><br><span class="line"><span class="keyword">AFTER</span> <span class="keyword">UPDATE</span> </span><br><span class="line"><span class="keyword">ON</span> <span class="string">`table`</span> </span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> c <span class="built_in">INT</span>;</span><br><span class="line"><span class="keyword">SET</span> c = <span class="number">1</span>;</span><br><span class="line">IF c &lt; 1 THEN</span><br><span class="line"><span class="keyword">SET</span> c = <span class="number">2</span>;</span><br><span class="line">ELSEIF c &gt; 1 THEN</span><br><span class="line">　<span class="keyword">SET</span> c = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="comment">/* 要做的SQL操作，如：</span></span><br><span class="line"><span class="comment">UPDATE table1 SET field = 'abc' WHERE id = new.id;</span></span><br><span class="line"><span class="comment">old 是行变量。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><blockquote><p>注意：<br><strong>①</strong>：for each row:必须填写，保证mysql支持行级控制，oracle同时支持行级控制和语句级控制。<br><strong>②</strong>：如果在BEFORE或AFTER触发程序的执行过程中出现错误，将导致调用触发程序的整个语句的失败。对于事务性表，如果触发程序失败（以及由此导致的整个语句的失败），该语句所执行的所有更改将回滚。对于非事务性表，不能执行这类回滚，因而，即使语句失败，失败之前所作的任何更改依然有效。  </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机装osx</title>
      <link href="/2018/11/10/%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%A3%85osx/"/>
      <url>/2018/11/10/%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%A3%85osx/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="工具-原料"><a href="#工具-原料" class="headerlink" title="工具/原料"></a>工具/原料</h3><p><a href>VMware® Workstation 12 Pro</a><br><a href>unlocker 208（for OS X 插件补丁）</a><br><a href>Mac OS X 10.11镜像</a><br><a href>darwin.iso</a></p><h2 id="方法-步骤"><a href="#方法-步骤" class="headerlink" title="方法/步骤"></a>方法/步骤</h2><h3 id="1-下载以上文件"><a href="#1-下载以上文件" class="headerlink" title="1. 下载以上文件"></a>1. 下载以上文件</h3><h3 id="2-unlocker208安装"><a href="#2-unlocker208安装" class="headerlink" title="2. unlocker208安装"></a>2. unlocker208安装</h3><a id="more"></a><p><img src="https://i.loli.net/2017/10/23/59edad5acc0a5.png" alt="I.png"><br>VM安装完成后，打开任务管理器，找到服务项，选择按描述排序，将框中关于VMware全部停止运行。  </p><p><img src="https://i.loli.net/2017/10/23/59edae0758792.png" alt="W7.png">  </p><p>解压<code>unlocker208</code>文件，找到<code>win-install.cmd</code>文件，<strong>右键以管理员身份运行</strong> 。  </p><p><strong>这一步骤很关键，决定了后续VM会不会识别出OS X。</strong>   </p><p>我安装的时候，出现了VM无法识别Mac OS X 的问题，找到了好多 <code>unlocker</code>文件都没能解决，最后试了下<code>208</code>可以了。</p><p><img src="https://i.loli.net/2017/10/23/59edaee451965.png" alt="Q.png"> </p><h3 id="3-创建虚拟机"><a href="#3-创建虚拟机" class="headerlink" title="3. 创建虚拟机"></a>3. 创建虚拟机</h3><h3 id="4-选择安装程序光盘映像文件，点击选择CDR镜像文件路径"><a href="#4-选择安装程序光盘映像文件，点击选择CDR镜像文件路径" class="headerlink" title="4. 选择安装程序光盘映像文件，点击选择CDR镜像文件路径"></a>4. 选择安装程序光盘映像文件，点击选择CDR镜像文件路径</h3><p><img src="https://i.loli.net/2017/10/23/59edaf6e13c88.png" alt="FL.png">  </p><h3 id="5-选择安装Apple-Mac-OS-X"><a href="#5-选择安装Apple-Mac-OS-X" class="headerlink" title="5. 选择安装Apple Mac OS X"></a>5. 选择安装Apple Mac OS X</h3><blockquote><p>如果第二步unlocker文件没有处理好的话，这个地方可能就不会出现Apple Mac OS X。<br>如果不行，可以多下载几个unlocker试试。版本根据实际版本选择，我的是10.11.<br>如果还是不行，关闭所有的vm进程和服务后再试试（我就是这样试好的）   </p></blockquote><h3 id="6-名称和安装位置自己定义一下"><a href="#6-名称和安装位置自己定义一下" class="headerlink" title="6. 名称和安装位置自己定义一下"></a>6. 名称和安装位置自己定义一下</h3><h3 id="7-指定磁盘大小-40G-，我选择的是“将虚拟磁盘拆分成多个文件”-点击”下一步”"><a href="#7-指定磁盘大小-40G-，我选择的是“将虚拟磁盘拆分成多个文件”-点击”下一步”" class="headerlink" title="7. 指定磁盘大小 40G ，我选择的是“将虚拟磁盘拆分成多个文件”,点击”下一步”"></a>7. 指定磁盘大小 40G ，我选择的是“将虚拟磁盘拆分成多个文件”,点击”下一步”</h3><h3 id="8-自定义硬件-设置内存4G-CPU-4个-点击“完成”"><a href="#8-自定义硬件-设置内存4G-CPU-4个-点击“完成”" class="headerlink" title="8. 自定义硬件 设置内存4G CPU 4个 点击“完成”"></a>8. 自定义硬件 设置内存4G CPU 4个 点击“完成”</h3><p>点击编辑虚拟机设置–》点击选项卡–》常规中  “增强型键盘”选择“在可用时使用（推荐）” 不设置,后面是没办法使用键盘操作的  </p><p>开启虚拟机会提出错误<br><img src="https://i.loli.net/2017/10/23/59edb12934158.png" alt="vv.png">  </p><blockquote><p>解决上面错误方法：找到VM安装的根文件，找到根文件下的 OS X xx.xx.vmx，右键用记事本方式打开，找到<code>smc.present = &quot;TRUE&quot;</code>在其后面加上<code>smc.version = &quot;0&quot;</code>  保存关闭，再开启时就没有错误了。<br><img src="https://i.loli.net/2017/10/23/59edb1957e5ae.png" alt="2X.png"><br><img src="https://i.loli.net/2017/10/23/59edb21e13cb2.png" alt="L7.png"><br><img src="https://i.loli.net/2017/10/23/59edb24577359.png" alt="SC.png"><br><strong> 如果开启出现如下图蓝屏项有两种可能：</strong>  </p></blockquote><ol><li>CD/DVD(IDE)设置问题 看看设备状态的“启动时连接”是否勾选；  </li><li>你下载的镜像文件有问题;  </li></ol><p><strong> 如果开启出现苹果标后重启现象</strong>，基本确定是您的电脑的硬件DEP（数据执行保护）打开了。<br><strong> 关闭操作：</strong> 硬件DEP选项一般都会包含<code>&quot;EXECUTE DISABLE BIT&quot;, &quot;NX&quot;, &quot;DATA EXECUTION PREVENTION&quot; 或 &quot;XD&quot;</code> 四个关键词中的一个。<br>一般都能在主菜单的“Power”或“Advanced”中找到，设置为Disabled后重新启动电脑(最好是冷启动)即可。<br>这下启动虚拟机一切正常了<br>选择系统语言 <code>继续</code><br>选择“磁盘工具”选择虚拟磁盘 点击 <code>抹掉</code><br>选择 <code>硬盘安装</code><br>恭喜你，已经成功了，等待安装完成</p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>看完《我不是药神》后我用python分析了武汉的药店</title>
      <link href="/2018/10/20/%E7%9C%8B%E5%AE%8C%E3%80%8A%E6%88%91%E4%B8%8D%E6%98%AF%E8%8D%AF%E7%A5%9E%E3%80%8B%E5%90%8E%E6%88%91%E7%94%A8python%E5%88%86%E6%9E%90%E4%BA%86%E4%B8%AD%E5%9B%BD%E7%9A%84%E8%8D%AF%E5%BA%97/"/>
      <url>/2018/10/20/%E7%9C%8B%E5%AE%8C%E3%80%8A%E6%88%91%E4%B8%8D%E6%98%AF%E8%8D%AF%E7%A5%9E%E3%80%8B%E5%90%8E%E6%88%91%E7%94%A8python%E5%88%86%E6%9E%90%E4%BA%86%E4%B8%AD%E5%9B%BD%E7%9A%84%E8%8D%AF%E5%BA%97/</url>
      
        <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>其实打算分析药店这个事情，与看完《我不是药神》没啥关系，取这个标题，只是为了蹭一波电影的热度。<br>主要起因是，在世界杯期间看到一条段子：  </p><blockquote><p>美国500米就有一个篮球场，巴西每个小区一个足球场，而中国500米就有个大药房。  </p></blockquote><p>开始只是当成一个段子，觉得有夸张的嫌疑。但某天逛完超市回家，刻意的数了一下药店数量。  </p><p><strong> 震惊! 不到1km的路上居然有6，7个药店！真可怕。 </strong>   </p><p>正好我最近刚开始学习python数据分析，于是，就决心以“超一线城市大武汉”为例，好好看看中国的药店到底多不多。  </p><a id="more"></a><h2 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h2><h3 id="通过地图WebAPI"><a href="#通过地图WebAPI" class="headerlink" title="通过地图WebAPI"></a>通过地图WebAPI</h3><p>我尝试着找了一下，好像网上没有现成的数据。<br>只能自己动手，搞点数据了。  </p><p>首先想到的是通过百度地图来获取数据，找了找，果然有相关的WebAPI。  </p><blockquote><p>地点检索服务（又名Place API）是一类Web API接口服务；<br>服务提供多种场景的地点（POI）检索功能，包括城市检索、圆形区域检索、矩形区域检索。开发者可通过接口获取地点（POI）基础或详细地理信息。    </p></blockquote><p>能直接通过WebAPI获取数据，连解析页面都省了，简直太爽了有木有？</p><p>本以为可以直接通过城市的检索的接口直接获取到我想要的数据。<br>然鹅，我错了，事情没我想的那么简单，这个api居然最多返回400条数据。大武汉的药店明显不止400个。我试着找了一下高德，高德更抠门，就200个结果。只能想想其他办法了。</p><h3 id="切割地图"><a href="#切割地图" class="headerlink" title="切割地图"></a>切割地图</h3><p>继续找其他的解决办法，忽然发现了地点检索api后面还有一个矩形区域检索功能。灵机一动，我可以把大武汉分成很多个小矩形，分块检索啊，这样也不会有数据丢失。        </p><p>想法很好，可当我看到武汉这长得像块‘三鲜豆皮’的地图的时候，问题又来了，我该怎么切割这个地图。  </p><p><img src="https://i.loli.net/2018/07/30/5b5f15caa7de8.jpg" alt="wh_map.jpg">  </p><p>抱着不能错过一个，也不能浪费api资源的态度，我打算先找到武汉东南西北之最，也就是找到一个可以将武汉包裹的最小矩形。</p><p>想到了通过城市边界点筛选的方式获取武汉的最东，最南，最西，最北。结果找了半天没发现百度webapi里有这个，只有一个javascriptAPI有这个功能，比较麻烦。反倒是高德有个“行政区域查询”的api可以直接获取到城市边界。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://restapi.amap.com/v3/config/district?key=您的key&amp;keywords=武汉&amp;subdistrict=0&amp;extensions=all</span><br></pre></td></tr></table></figure></p><p>接下来的事情就简单了，分析获取到的城市边界点列表，找到经纬度的最大最小值，即城市的最东南西北。然后从东到西切20刀，从南到北均匀切20刀。武汉一下就被切成400块了。  </p><p>我们就可以分块的去调用地点检索的API，如果有超过400个的，就调整参数，多切几刀。  </p><p>当然，这样切肯定有误伤周边城市的情况。这种情况就通过POI的“city”属性去筛选掉。</p><p>至此，我们就成功的获取到了我们想要的比较完整的药店的数据了。</p><h3 id="其他数据"><a href="#其他数据" class="headerlink" title="其他数据"></a>其他数据</h3><p>有了药店的数据，我们还需要一些其他的数据，例如：行政区域面积啊，人口数量等。<br>像这类的数据，一般在当地的统计局网站都能下载到。 </p><h2 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h2><h3 id="药店位置分布"><a href="#药店位置分布" class="headerlink" title="药店位置分布"></a>药店位置分布</h3><p>我猜想，药店的数量应该与人口密度和地方经济情况有所关系。        </p><p>首先，我们通过图表看看武汉的人口密度：<br><img src="https://i.loli.net/2018/08/01/5b61bd5f1e4d0.png" alt="武汉人口密度.png"></p><p>从图像可以看出，人口密度最大的是江汉区，硚口区和武昌区，这些都是武汉的老城区。<br>黄陂区，江夏，汉南这些都算是郊区，人口密度低，也情有可原。<br>意外的是：主城区洪山区人口密度居然也不高。（可能统计面积的时候几个大湖也算进去了？）        </p><p>再看看，我们收集的药店的数据，我爬取的百度地图上能找到的武汉所有药店，一共爬到了1936个，估计还有一些没有收录到的遗漏了。在武汉药监局官网查到的药品零售企业有4317个，但这里可能又很多过期可但未注销的企业。所以这次我们以百度地图爬取到的数据为准。</p><p>首先我们看看各个区人数和药店数量的基本情况：<br><img src="https://i.loli.net/2018/08/02/5b631261e4971.png" alt="武汉各区人数和药店数.png">  </p><p>基本大多数的区药店数量都超过了1万人一个药店。     </p><p>再看看武汉每个区的药店数量情况，武汉各个区域药店的数量占比：<br><img src="https://i.loli.net/2018/08/02/5b62d5e88df71.png" alt="武汉药店各区域占比.png">   </p><p>武昌、江岸、洪山、江汉这几个主城区果然还是占了大多的数的药店。</p><p>药店密度和人口密度是否有关呢？<br><img src="https://i.loli.net/2018/08/01/5b61c3933b99d.png" alt="武汉各区多少人一个药店.png"></p><p>药店最密集的是江岸区，3408个人就有一个药店。而药店比较稀缺的新洲区居然平均26317个人才有一个药店，新洲区的朋友会不会有买药难的问题？</p><p>经济状况好的主城区人均药店数明显比郊区高。</p><p>光在表格上我们没办法形象的看到药店的分布，所以做成热力图更形象了。<br><img src="https://i.loli.net/2018/08/01/5b61c590c5ae0.png" alt="武汉药店热力分布图.png"></p><h3 id="药店店名分析"><a href="#药店店名分析" class="headerlink" title="药店店名分析"></a>药店店名分析</h3>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQLAlchemy的属性介绍</title>
      <link href="/2018/09/26/SQLAlchemy%E7%9A%84%E5%B1%9E%E6%80%A7%E4%BB%8B%E7%BB%8D/"/>
      <url>/2018/09/26/SQLAlchemy%E7%9A%84%E5%B1%9E%E6%80%A7%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="SQLAlchemy的应用"><a href="#SQLAlchemy的应用" class="headerlink" title="SQLAlchemy的应用"></a>SQLAlchemy的应用</h2><h3 id="行数据类型"><a href="#行数据类型" class="headerlink" title="行数据类型"></a>行数据类型</h3><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>Integer</td><td>整数</td></tr><tr><td>String (size)</td><td>有最大长度的字符串</td></tr><tr><td>Text</td><td>长 unicode 文本</td></tr><tr><td>Date</td><td>表示为日期</td></tr><tr><td>DateTime</td><td>表示为 datetime 对象 的时间和日期</td></tr><tr><td>Float</td><td>存储浮点值</td></tr><tr><td>Boolean</td><td>存储布尔值</td></tr><tr><td>PickleType</td><td>存储一个持久化 Python 对象</td></tr><tr><td>LargeBinary</td><td>存储任意大的二进制数据</td></tr></tbody></table><a id="more"></a><h3 id="其他行属性"><a href="#其他行属性" class="headerlink" title="其他行属性"></a>其他行属性</h3><p><code>primary_key=True</code> 是否是主键<br><code>db.ForeignKey(&#39;person.id&#39;)</code> 表示设置XX表名.XX字段名外键<br><code>nullable=False</code> 是否能为空<br><code>unique=True</code> 是否能重复<br><code>autoincrement=True</code> 是否自增长<br><code>default=0</code> 默认值<br><code>index=True</code> 索引<br><code>name</code> 名称<br><code>type_</code> 列类型</p><h3 id="关系链接"><a href="#关系链接" class="headerlink" title="关系链接"></a>关系链接</h3><p>一对多的关系：  </p><p>如果要表示一对一的关系，在定义<code>relationship</code> 的时候设置<code>uselist</code> 为<code>False</code> （默认为<code>True</code> ）</p><p><code>db.relationship(&#39;Teams&#39;)</code> 定义一个关系<br><code>backref=db.backref(&#39;users&#39;)</code> 反向引用<br><code>primaryjoin=&#39;Persion.like_id==Book.id&#39;</code> 多个外键的情况</p><p>多对多的关系有中间表：</p><p><code>secondary = 中间表模型,</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">tags = db.Table(&apos;tags&apos;,</span><br><span class="line">    db.Column(&apos;tag_id&apos;, db.Integer, db.ForeignKey(&apos;tag.id&apos;)),</span><br><span class="line">    db.Column(&apos;page_id&apos;, db.Integer, db.ForeignKey(&apos;page.id&apos;))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">class Page(db.Model):</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)</span><br><span class="line">    tags = db.relationship(&apos;Tag&apos;, secondary=tags,</span><br><span class="line">        backref=db.backref(&apos;pages&apos;, lazy=&apos;dynamic&apos;))</span><br><span class="line"></span><br><span class="line">class Tag(db.Model):</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)</span><br></pre></td></tr></table></figure><p><code>secondary=association_table,        back_populates=&quot;children&quot;</code>   </p><p>循环一对多关系<br>还是我自己写的Persion和Book关系，一个人可能写过多本书，一本Book只有一个Persion写，N个人最喜欢1个书，每个人只能有一个最喜欢的这个例子可能不大恰当，<br>但是就是两个单向的一对多关系，是不能用多对多关系的，<br>下面是我给出的例子<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Persion</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'persion'</span></span><br><span class="line">    id = Column(Integer, autoincrement=<span class="literal">True</span>, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">1024</span>))</span><br><span class="line">    like_id = Column(Integer, ForeignKey(<span class="string">'book.id'</span>))</span><br><span class="line">    books = relationship(<span class="string">'Book'</span>, backref=<span class="string">'auther'</span>, lazy=<span class="string">"dynamic"</span>,</span><br><span class="line">                         primaryjoin=<span class="string">'Book.auther_id==Persion.id'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'book'</span></span><br><span class="line">    id = Column(Integer, autoincrement=<span class="literal">True</span>, primary_key=<span class="literal">True</span>)</span><br><span class="line">    likes = relationship(<span class="string">'Persion'</span>, backref=<span class="string">'like'</span>, lazy=<span class="string">"dynamic"</span>,</span><br><span class="line">                         primaryjoin=<span class="string">'Persion.like_id==Book.id'</span>)</span><br><span class="line">    name = Column(String(<span class="number">1024</span>))</span><br><span class="line">    auther_id = Column(Integer, ForeignKey(<span class="string">'persion.id'</span>))</span><br></pre></td></tr></table></figure></p><p>主要是添加<code>primaryjoin</code> 属性，说明关联的字段<br>在使用sqlalchemy的时候有很多属性，类似<code>lazy</code> ，<code>backref</code> ，<code>primaryjoin</code> 这样的属性，备选项很多，需要多多查询官方文档。只有使用过过才会比较熟悉</p><h3 id="表的引擎和编码"><a href="#表的引擎和编码" class="headerlink" title="表的引擎和编码"></a>表的引擎和编码</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Table(<span class="string">'mytable'</span>, metadata,</span><br><span class="line">      Column(<span class="string">'data'</span>, String(<span class="number">32</span>)),</span><br><span class="line">      mysql_engine=<span class="string">'InnoDB'</span>,</span><br><span class="line">      mysql_charset=<span class="string">'utf8'</span>,</span><br><span class="line">      mysql_key_block_size=<span class="string">"1024"</span></span><br><span class="line">     )</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">或</span><br><span class="line">```py</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Base)</span>:</span></span><br><span class="line">    <span class="string">"""Users table"""</span></span><br><span class="line">    <span class="comment"># 表的名字</span></span><br><span class="line">    __tablename__=<span class="string">'users'</span></span><br><span class="line">    __table_args__=&#123;<span class="string">'sqlite_autoincrement'</span>: <span class="literal">True</span>,<span class="string">'mysql_engine'</span>: <span class="string">'InnoDB'</span>,<span class="string">'mysql_charset'</span>: <span class="string">'utf8'</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 表结构</span></span><br><span class="line">    id=Column(Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQLAlchemy的基本操作</title>
      <link href="/2018/09/23/SQLAlchemy%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/09/23/SQLAlchemy%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>通过pip安装SQLAlchemy</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install sqlalchemy</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><h3 id="Flask-config配置方法"><a href="#Flask-config配置方法" class="headerlink" title="Flask config配置方法"></a>Flask config配置方法</h3><p>以MySQL为例<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#config.py</span></span><br><span class="line">DB_URI = <span class="string">"mysql://&#123;&#125;:&#123;&#125;@&#123;&#125;:&#123;&#125;/&#123;&#125;?charset=utf8"</span>.format(USERNAME,PASSWORD,HOST_NAME,PROT,DATABAES)</span><br><span class="line">SQLALCHEMY_DATABASE_URI =DB_URI</span><br><span class="line"></span><br><span class="line"><span class="comment">#models.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line">db = SQLAlchemy()</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config.from_object(config)</span><br><span class="line">db.init_app(app)</span><br></pre></td></tr></table></figure></p><h3 id="直接连接的写法"><a href="#直接连接的写法" class="headerlink" title="直接连接的写法"></a>直接连接的写法</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line"><span class="comment">#sqlite内存：</span></span><br><span class="line">DATABAES_URL = <span class="string">'sqlite:///:memory:'</span></span><br><span class="line"><span class="comment">#sqlite文件: </span></span><br><span class="line">DATABAES_URL = <span class="string">'sqlite:///./test.db'</span></span><br><span class="line"><span class="comment">#mysql+pymysql：</span></span><br><span class="line">DATABAES_URL = <span class="string">'mysql+pymysql://username:password@hostname:port/dbname'</span></span><br><span class="line"><span class="comment">#mssql+pymssql: </span></span><br><span class="line">DATABAES_URL =<span class="string">'mssql+pymssql://username:password@hostname:port/dbname'</span></span><br><span class="line"></span><br><span class="line">engine = create_engine(DATABAES_URL,echo=<span class="literal">True</span>)</span><br><span class="line">DB_Session = sessionmaker(bind=engine)</span><br><span class="line"><span class="comment">#create_engine() 会返回一个数据库引擎，echo 参数为 True 时，会显示每条执行的 SQL 语句，生产环境下可关闭。</span></span><br><span class="line">session = DB_Session()</span><br></pre></td></tr></table></figure><h2 id="创建数据模型"><a href="#创建数据模型" class="headerlink" title="创建数据模型"></a>创建数据模型</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy,Column</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义Person对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(db.Model)</span>:</span></span><br><span class="line"><span class="string">'''Person table'''</span></span><br><span class="line"><span class="comment"># 表的名字</span></span><br><span class="line">    __tablename__  = <span class="string">"person"</span></span><br><span class="line">    __table_args__ = &#123;</span><br><span class="line"><span class="string">"mysql_engine"</span>:<span class="string">"InnoDB"</span>,   <span class="comment"># 表的引擎</span></span><br><span class="line"><span class="string">"mysql_charset"</span>:<span class="string">"utf8"</span>   <span class="comment"># 表的编码格式</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 表结构</span></span><br><span class="line">id=Column(Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span><br><span class="line">name = Column(String(<span class="number">128</span>),primary_key=<span class="literal">True</span>,nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">db.create_all()</span><br></pre></td></tr></table></figure><p><strong>* 表结构更具体的参数设置,如主键、自增、外键等属性，见另一篇文章 [ SQLAlchemy的应用 ]</strong></p><h2 id="数据的CRUD"><a href="#数据的CRUD" class="headerlink" title="数据的CRUD"></a>数据的CRUD</h2><ul><li><p>添加数据  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">person = Person(name = <span class="string">'aaa'</span>)</span><br><span class="line">db.session.add(person)</span><br><span class="line"><span class="comment">#事务提交</span></span><br><span class="line">db.session.commit()</span><br><span class="line">db.session.close()</span><br></pre></td></tr></table></figure></li><li><p>查询数据  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">person = Person.query.filter(Person.name = <span class="string">'aaa'</span>).first()</span><br><span class="line"><span class="keyword">print</span> person.name</span><br></pre></td></tr></table></figure></li><li><p>修改数据  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先把要修改的数据查找出来</span></span><br><span class="line">person = Person.query.filter(Person.name = <span class="string">'aaa'</span>).first()</span><br><span class="line">person.name = <span class="string">'bbb'</span></span><br><span class="line">db.session.commit()</span><br><span class="line">db.session.close()</span><br></pre></td></tr></table></figure></li><li><p>删除数据</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先把要修改的数据查找出来</span></span><br><span class="line">person = Person.query.filter(Person.name = <span class="string">'aaa'</span>).first()</span><br><span class="line">db.session.delete(person)</span><br><span class="line">db.session.commit()</span><br><span class="line">db.session.close()</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>增、删、改操作都需要提交事务<code>db.session.commit()</code> ,查询操作不需要</p></blockquote><h2 id="执行sql语句"><a href="#执行sql语句" class="headerlink" title="执行sql语句"></a>执行sql语句</h2><p>使用<code>execute()</code> 方法<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">s=db.session()</span><br><span class="line"><span class="comment"># 不能用 `?` 的方式来传递参数 要用 `:param` 的形式来指定参数</span></span><br><span class="line"><span class="comment"># s.execute('INSERT INTO person (name, age, password) VALUES (?, ?, ?)',('bigpang',2,'1122121'))  </span></span><br><span class="line"><span class="comment"># 这样执行报错 </span></span><br><span class="line"><span class="comment"># s.execute('INSERT INTO person (name, age, password) VALUES (:aa, :bb, :cc)',(&#123;'aa':'bigpang2','bb':22,'cc':'998'&#125;))</span></span><br><span class="line"><span class="comment"># s.commit()</span></span><br><span class="line"><span class="comment"># 这样执行成功</span></span><br><span class="line">res=s.execute(<span class="string">'select * from person where name=:aaa'</span>,&#123;<span class="string">'aaa'</span>:<span class="string">'aaa'</span>&#125;)</span><br><span class="line"><span class="comment"># print(res['name'])  # 错误</span></span><br><span class="line"><span class="comment"># print(res.name)    # 错误</span></span><br><span class="line"><span class="comment"># print(type(res))   # 错误</span></span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> res:</span><br><span class="line">print(r[<span class="string">'name'</span>])</span><br><span class="line"></span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure></p><h2 id="完整的示例代码"><a href="#完整的示例代码" class="headerlink" title="完整的示例代码"></a>完整的示例代码</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="comment"># ***************************</span></span><br><span class="line"><span class="comment"># 初始化数据库连接</span></span><br><span class="line">DATABAES_URL = <span class="string">'mysql+pymysql://username:password@hostname:port/dbname'</span></span><br><span class="line">engine = create_engine(DATABAES_URL,echo=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 创建对象的基类</span></span><br><span class="line">Base=declarative_base()</span><br><span class="line"><span class="comment"># 创建会话类</span></span><br><span class="line">DBSession=sessionmaker(bind=engine)</span><br><span class="line"><span class="comment"># ******************</span></span><br><span class="line"><span class="comment"># 定义User对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Base)</span>:</span></span><br><span class="line"><span class="string">"""Users table"""</span></span><br><span class="line"><span class="comment"># 表的名字</span></span><br><span class="line">__tablename__=<span class="string">'users'</span></span><br><span class="line">__table_args__=&#123;<span class="string">'sqlite_autoincrement'</span>: <span class="literal">True</span>&#125;</span><br><span class="line"><span class="comment"># 表结构</span></span><br><span class="line">id=Column(Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span><br><span class="line">name=Column(String(<span class="number">32</span>),nullable=<span class="literal">False</span>)</span><br><span class="line">age=Column(Integer,default=<span class="number">0</span>)</span><br><span class="line">password=Column(String(<span class="number">64</span>),unique=<span class="literal">True</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blog</span><span class="params">(Base)</span>:</span></span><br><span class="line"><span class="string">"""docstring for Blog"""</span></span><br><span class="line">__tablename__=<span class="string">'blogs'</span></span><br><span class="line">id=Column(Integer,primary_key=<span class="literal">True</span>)</span><br><span class="line">title=Column(String(<span class="number">100</span>))</span><br><span class="line">desc=Column(String(<span class="number">500</span>))</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tips</span><span class="params">(Base)</span>:</span></span><br><span class="line"><span class="string">"""docstring for Tips"""</span></span><br><span class="line"></span><br><span class="line">__tablename__=<span class="string">'tips'</span></span><br><span class="line"><span class="comment">#表结构</span></span><br><span class="line">id=Column(Integer,primary_key=<span class="literal">True</span>)</span><br><span class="line">name=Column(String(<span class="number">32</span>))</span><br><span class="line"><span class="comment"># ***********************</span></span><br><span class="line"><span class="comment"># 添加一条数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">newUser</span><span class="params">()</span>:</span></span><br><span class="line"><span class="comment"># 创建会话对象</span></span><br><span class="line">session=DBSession()</span><br><span class="line">new_user=User(name=<span class="string">'Jery'</span>,password=<span class="string">'123'</span>)</span><br><span class="line">session.add(new_user)</span><br><span class="line">session.commit()</span><br><span class="line">session.close()</span><br><span class="line"><span class="comment"># 添加一条数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addUserForZhCn</span><span class="params">()</span>:</span></span><br><span class="line">session=DBSession()</span><br><span class="line">new_user=User(name=<span class="string">u'关羽2'</span>,password=<span class="string">'12322233'</span>)</span><br><span class="line">session.add(new_user)</span><br><span class="line">session.commit()</span><br><span class="line">session.close()</span><br><span class="line"><span class="comment"># 新增多条数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addmoreUser</span><span class="params">()</span>:</span></span><br><span class="line">session=DBSession()</span><br><span class="line">session.add_all([</span><br><span class="line">User(name=<span class="string">'guanyu'</span>,age=<span class="number">4</span>,password=<span class="string">'11111'</span>),</span><br><span class="line">User(name=<span class="string">'zhangfei'</span>,password=<span class="string">'2233'</span>),</span><br><span class="line">User(name=<span class="string">'zhenji'</span>,password=<span class="string">'44556'</span>)</span><br><span class="line">])</span><br><span class="line">session.commit()</span><br><span class="line">session.close()</span><br><span class="line"><span class="comment"># 查询</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">queryUser</span><span class="params">()</span>:</span></span><br><span class="line">session=DBSession()</span><br><span class="line">quser=session.query(User).filter(User.id==<span class="number">4</span>).one()</span><br><span class="line">print(<span class="string">'name:'</span>,quser.name)</span><br><span class="line">session.close()</span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deleteUser</span><span class="params">()</span>:</span></span><br><span class="line">session=DBSession()</span><br><span class="line">duser=session.query(User).filter(User.id==<span class="number">2</span>).delete()</span><br><span class="line">session.commit()</span><br><span class="line">session.close()</span><br><span class="line"><span class="comment"># 执行sql语句</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SQlUser</span><span class="params">()</span>:</span></span><br><span class="line">s=DBSession()</span><br><span class="line"><span class="comment"># 不能用 `?` 的方式来传递参数 要用 `:param` 的形式来指定参数</span></span><br><span class="line"><span class="comment"># s.execute('INSERT INTO users (name, age, password) VALUES (?, ?, ?)',('bigpang',2,'1122121'))  </span></span><br><span class="line"><span class="comment"># 这样执行报错 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># s.execute('INSERT INTO users (name, age, password) VALUES (:aa, :bb, :cc)',(&#123;'aa':'bigpang2','bb':22,'cc':'998'&#125;))</span></span><br><span class="line"><span class="comment"># s.commit()</span></span><br><span class="line"><span class="comment"># 这样执行成功</span></span><br><span class="line">res=s.execute(<span class="string">'select * from users where age=:aaa'</span>,&#123;<span class="string">'aaa'</span>:<span class="number">4</span>&#125;)</span><br><span class="line"><span class="comment"># print(res['name'])  # 错误</span></span><br><span class="line"><span class="comment"># print(res.name)    # 错误</span></span><br><span class="line"><span class="comment"># print(type(res))   # 错误</span></span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> res:</span><br><span class="line">print(r[<span class="string">'name'</span>])</span><br><span class="line">s.close()</span><br><span class="line"><span class="comment"># 执行sql语句</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SQlUser2</span><span class="params">()</span>:</span></span><br><span class="line"><span class="comment"># **传统 connection方式**</span></span><br><span class="line"><span class="comment"># 创建一个connection对象，使用方法与调用python自带的sqlite使用方式类似</span></span><br><span class="line"><span class="comment"># 使用with 来创建 conn，不需要显示执行关闭连接</span></span><br><span class="line"><span class="comment"># with engine.connect() as conn:</span></span><br><span class="line"><span class="comment"># res=conn.execute('select * from users')</span></span><br><span class="line"><span class="comment"># data=res.fetchone()</span></span><br><span class="line"><span class="comment"># print('user is %s' %data[1])</span></span><br><span class="line"><span class="comment"># 与python自带的sqlite不同，这里不需要 cursor 光标，执行sql语句不需要commit。如果是增删改，则直接生效，也不需要commit.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># **传统 connection 事务**</span></span><br><span class="line"><span class="keyword">with</span> engine.connect() <span class="keyword">as</span> conn:</span><br><span class="line">trans=conn.begin()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">r1=conn.execute(<span class="string">"select * from users"</span>)</span><br><span class="line">print(r1.fetchone()[<span class="number">1</span>])</span><br><span class="line">r2=conn.execute(<span class="string">"insert into users (name,age,password) values (?,?,?)"</span>,(<span class="string">'tang'</span>,<span class="number">5</span>,<span class="string">'133444'</span>))</span><br><span class="line">trans.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">trans.rollback()</span><br><span class="line"><span class="keyword">raise</span></span><br><span class="line"><span class="comment"># **session**</span></span><br><span class="line">session=DBSession()</span><br><span class="line">session.execute(<span class="string">'select * from users'</span>)</span><br><span class="line">session.execute(<span class="string">'insert into users (name,age,password) values (:name,:age,:password)'</span>,&#123;<span class="string">"name"</span>:<span class="string">'dayuzhishui'</span>,<span class="string">'age'</span>:<span class="number">6</span>,<span class="string">'password'</span>:<span class="string">'887'</span>&#125;)</span><br><span class="line"><span class="comment"># 注意参数使用dict，并在sql语句中使用:key占位</span></span><br><span class="line"><span class="comment"># 如果是增删改，需要 commit</span></span><br><span class="line">session.commit()</span><br><span class="line"><span class="comment"># 用完记得关闭，也可以用 with</span></span><br><span class="line">session.close()</span><br><span class="line"><span class="comment"># 更多操作</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">TestUser</span><span class="params">()</span>:</span></span><br><span class="line">session=DBSession()</span><br><span class="line"><span class="comment"># test1</span></span><br><span class="line"><span class="comment"># 使用merge方法，如果存在则修改，如果不存在则插入（只判断主键，不判断unique列）</span></span><br><span class="line"><span class="comment"># t1=session.query(User).filter(User.name=='zhenji').first()</span></span><br><span class="line"><span class="comment"># t1.age=34</span></span><br><span class="line"><span class="comment"># session.merge(t1)</span></span><br><span class="line"><span class="comment"># session.commit()</span></span><br><span class="line"><span class="comment"># test2</span></span><br><span class="line"><span class="comment"># merge方法，如果数据库中没有则添加</span></span><br><span class="line"><span class="comment"># t2=User()</span></span><br><span class="line"><span class="comment"># t2.name='haha'</span></span><br><span class="line"><span class="comment"># session.merge(t2)</span></span><br><span class="line"><span class="comment"># session.commit()</span></span><br><span class="line"><span class="comment"># test3</span></span><br><span class="line"><span class="comment"># 获取第2-3项</span></span><br><span class="line"><span class="comment"># tUser=session.query(User)[1:3]   </span></span><br><span class="line"><span class="comment"># for u in tUser:</span></span><br><span class="line"><span class="comment"># print(u.id)</span></span><br><span class="line"><span class="comment"># test4</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除全部数据库</span></span><br><span class="line"><span class="comment"># Base.metadata.drop_all(engine)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化数据库</span></span><br><span class="line"><span class="comment"># Base.metadata.create_all(engine)</span></span><br><span class="line"><span class="comment"># 删除全部数据库</span></span><br><span class="line"><span class="comment"># Base.metadata.drop_all(engine)</span></span><br><span class="line"><span class="comment"># 删除指定的数据库</span></span><br><span class="line"><span class="comment"># 如删除 Blogs表</span></span><br><span class="line"><span class="comment"># 详见 ：http://stackoverflow.com/questions/35918605/how-to-delete-a-table-in-sqlalchemy</span></span><br><span class="line"><span class="comment"># Blog.__table__.drop(engine)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增数据</span></span><br><span class="line"><span class="comment"># newUser()</span></span><br><span class="line"><span class="comment"># 新增多条数据</span></span><br><span class="line"><span class="comment"># addmoreUser()</span></span><br><span class="line"><span class="comment"># 新增数据含中文</span></span><br><span class="line"><span class="comment"># addUserForZhCn()</span></span><br><span class="line"><span class="comment"># 查询数据</span></span><br><span class="line"><span class="comment"># queryUser()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line"><span class="comment"># deleteUser()</span></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="comment"># TestUser()</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 执行sql语句</span></span><br><span class="line"><span class="comment"># SQlUser()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行sql语句2</span></span><br><span class="line">SQlUser2()</span><br><span class="line">print(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis非权威指南(基本知识)</title>
      <link href="/2018/08/20/redis%E9%9D%9E%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97(%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86)/"/>
      <url>/2018/08/20/redis%E9%9D%9E%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97(%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86)/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis-简介"><a href="#Redis-简介" class="headerlink" title="Redis 简介"></a>Redis 简介</h2><p><center><img src="https://i.loli.net/2017/09/11/59b6a42bf239f.png" alt="redis_logo.png"></center><br>Redis是完全开源免费的一个高性能的key-value存储系统。<br>它可以用作数据库、缓存和消息中间件。  </p><blockquote></blockquote><ul><li>Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。</li><li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li><li>Redis支持数据的备份，即master-slave模式的数据备份。</li></ul><a id="more"></a><h2 id="Redis的特点"><a href="#Redis的特点" class="headerlink" title="Redis的特点"></a>Redis的特点</h2><p>Redis将其数据库完全保存在内存中，因此性能极高,能读的速度是110000次/s,写的速度是81000次/s 。<br>Redis支持开发人员常用的大多数数据类型，例如列表，集合，排序集和散列等等。这使得Redis很容易被用来解决各种问题，因为我们知道哪些问题可以更好使用地哪些数据类型来处理解决。<br>Redis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行。<br>Redis还支持 publish/subscribe, 通知, key 过期等等特性。</p><h2 id="Redis在项目中的作用"><a href="#Redis在项目中的作用" class="headerlink" title="Redis在项目中的作用"></a>Redis在项目中的作用</h2><p><b>Redis在项目中使用一般作为主要缓存服务。</b></p><h3 id="1、会话缓存（Session-Cache）"><a href="#1、会话缓存（Session-Cache）" class="headerlink" title="1、会话缓存（Session Cache）"></a>1、会话缓存（Session Cache）</h3><p>最常用的一种使用Redis的情景是会话缓存（session cache）。用Redis缓存会话比其他存储（如Memcached）的优势在于：Redis提供持久化。</p><p>随着 Redis 这些年的改进，很容易找到怎么恰当的使用Redis来缓存会话的文档。甚至广为人知的商业平台Magento也提供Redis的插件。</p><h3 id="2、全页缓存（FPC）"><a href="#2、全页缓存（FPC）" class="headerlink" title="2、全页缓存（FPC）"></a>2、全页缓存（FPC）</h3><p>除基本的会话token之外，Redis还提供很简便的FPC平台。回到一致性问题，即使重启了Redis实例，因为有磁盘的持久化，用户也不会看到页面加载速度的下降，这是一个极大改进，类似PHP本地FPC。</p><p>再次以Magento为例，Magento提供一个插件来使用Redis作为全页缓存后端。</p><p>此外，对WordPress的用户来说，Pantheon有一个非常好的插件  wp-redis，这个插件能帮助你以最快速度加载你曾浏览过的页面。</p><h3 id="3、队列"><a href="#3、队列" class="headerlink" title="3、队列"></a>3、队列</h3><p>Reids在内存存储引擎领域的一大优点是提供 list 和 set 操作，这使得Redis能作为一个很好的消息队列平台来使用。Redis作为队列使用的操作，就类似于本地程序语言（如Python）对 list 的 push/pop 操作。</p><p>如果你快速的在Google中搜索“Redis queues”，你马上就能找到大量的开源项目，这些项目的目的就是利用Redis创建非常好的后端工具，以满足各种队列需求。例如，Celery有一个后台就是使用Redis作为broker，你可以从这里去查看。</p><h3 id="4、排行榜-计数器"><a href="#4、排行榜-计数器" class="headerlink" title="4、排行榜/计数器"></a>4、排行榜/计数器</h3><p>Redis在内存中对数字进行递增或递减的操作实现的非常好。集合（Set）和有序集合（Sorted Set）也使得我们在执行这些操作的时候变的非常简单，Redis只是正好提供了这两种数据结构。</p><h3 id="5、发布-订阅"><a href="#5、发布-订阅" class="headerlink" title="5、发布/订阅"></a>5、发布/订阅</h3><p>发布/订阅的使用场景确实非常多。人们在社交网络连接中使用，还可作为基于发布/订阅的脚本触发器，甚至用Redis的发布/订阅功能来建立聊天系统！</p><h2 id="Redis-对比-memcached"><a href="#Redis-对比-memcached" class="headerlink" title="Redis 对比 memcached"></a>Redis 对比 memcached</h2><hr><table><thead><tr><th>对比</th><th>持久化</th><th>数据一致性</th><th>数据类型</th></tr></thead><tbody><tr><td>redis</td><td>支持持久化</td><td>无cas命令/有事务</td><td>多种数据结构</td></tr><tr><td>memcached</td><td>不支持持久化</td><td>有cas保证数据一致性</td><td>单一key-value结构  </td></tr></tbody></table><h2 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h2><h3 id="Window-下安装"><a href="#Window-下安装" class="headerlink" title="Window 下安装"></a>Window 下安装</h3><p>下载地址：<a href="https://github.com/MSOpenTech/redis/releases" target="_blank" rel="noopener">https://github.com/MSOpenTech/redis/releases</a></p><p>Redis 支持 32 位和 64 位。这个需要根据你系统平台的实际情况选择，这里我们下载 Redis-x64-xxx.zip压缩包到 C 盘，解压后，将文件夹重新命名为 redis。<br><img src="https://i.loli.net/2017/09/11/59b6985850bac.png" alt="file.png"></p><p>打开一个 cmd 窗口 使用cd命令切换目录到 C:\redis 运行 :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server.exe redis.windows.conf</span><br></pre></td></tr></table></figure></p><p>如果想方便的话，可以把 redis 的路径加到系统的环境变量里，这样就省得再输路径了，后面的那个 redis.windows.conf 可以省略，如果省略，会启用默认的。输入之后，会显示如下界面：<br><img src="https://i.loli.net/2017/09/11/59b699409e6c5.png" alt="cmd.png"></p><p>这时候另启一个cmd窗口，原来的不要关闭，不然就无法访问服务端了。<br>切换到redis目录下运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli.exe -h 127.0.0.1 -p 6379</span><br></pre></td></tr></table></figure></p><p>设置键值对: <code>set myKey abc</code><br>取出键值对: <code>get myKey</code><br><img src="https://i.loli.net/2017/09/11/59b69a1a58b58.png" alt="cli.png"></p><h3 id="Linux下安装"><a href="#Linux下安装" class="headerlink" title="Linux下安装"></a>Linux下安装</h3><p>下载地址：<a href="http://redis.io/download" target="_blank" rel="noopener">http://redis.io/download</a>，下载最新文档版本。<br>本教程使用的最新文档版本为 2.8.17，下载并安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://download.redis.io/releases/redis-2.8.17.tar.gz</span><br><span class="line">$ tar xzf redis-2.8.17.tar.gz</span><br><span class="line">$ cd redis-2.8.17</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure></p><p>make完后 redis-2.8.17目录下会出现编译后的redis服务程序redis-server, 还有用于测试的客户端程序redis-cli,两个程序位于安装目录 src 目录下：<br>下面启动redis服务.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd src</span><br><span class="line">$ ./redis-server</span><br></pre></td></tr></table></figure><p>注意这种方式启动redis 使用的是默认配置。<br>也可以通过启动参数告诉redis使用指定配置文件使用下面命令启动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd src</span><br><span class="line">$ ./redis-server redis.conf</span><br></pre></td></tr></table></figure><p>redis.conf是一个默认的配置文件。我们可以根据需要使用自己的配置文件。<br>启动redis服务进程后，就可以使用测试客户端程序redis-cli和redis服务交互了。 比如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cd src</span><br><span class="line">$ ./redis-cli</span><br><span class="line">redis&gt; set foo bar</span><br><span class="line">OK</span><br><span class="line">redis&gt; get foo</span><br><span class="line">&quot;bar&quot;</span><br></pre></td></tr></table></figure><h3 id="Ubuntu-下安装"><a href="#Ubuntu-下安装" class="headerlink" title="Ubuntu 下安装"></a>Ubuntu 下安装</h3><p>在 Ubuntu 系统安装 Redi 可以使用以下命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$sudo apt-get update</span><br><span class="line">$sudo apt-get install redis-server</span><br></pre></td></tr></table></figure><p>启动 Redis</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ redis-server</span><br></pre></td></tr></table></figure><p>查看 redis 是否启动？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli</span><br></pre></td></tr></table></figure><p>以上命令将打开以下终端：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p>127.0.0.1 是本机 IP ，6379 是 redis 服务端口。现在我们输入 PING 命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br></pre></td></tr></table></figure><p>以上说明我们已经成功安装了redis。</p><h2 id="Redis-配置"><a href="#Redis-配置" class="headerlink" title="Redis 配置"></a>Redis 配置</h2><p>Redis 的配置文件位于 Redis 安装目录下，文件名为 redis.conf。<br>你可以通过 CONFIG 命令查看或设置配置项。</p><h3 id="1-查看配置-GET命令"><a href="#1-查看配置-GET命令" class="headerlink" title="1.查看配置(GET命令)"></a>1.查看配置(GET命令)</h3><p>Redis CONFIG 命令格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; CONFIG GET CONFIG_SETTING_NAME</span><br></pre></td></tr></table></figure><h4 id="例如"><a href="#例如" class="headerlink" title="例如"></a>例如</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; CONFIG GET loglevel</span><br></pre></td></tr></table></figure><p>1) “loglevel”<br>2) “notice”</p><h3 id="2-配置redis-SET命令"><a href="#2-配置redis-SET命令" class="headerlink" title="2.配置redis(SET命令)"></a>2.配置redis(SET命令)</h3><p>CONFIG SET 命令基本语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; CONFIG SET CONFIG_SETTING_NAME NEW_CONFIG_VALUE</span><br></pre></td></tr></table></figure><h4 id="例如-1"><a href="#例如-1" class="headerlink" title="例如"></a>例如</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; CONFIG SET loglevel &quot;notice&quot;  </span><br><span class="line">OK   </span><br><span class="line">redis 127.0.0.1:6379&gt; CONFIG GET loglevel  </span><br><span class="line"></span><br><span class="line">1) &quot;loglevel&quot;</span><br><span class="line">2) &quot;notice&quot;</span><br></pre></td></tr></table></figure><h3 id="3-redis配置文件详解"><a href="#3-redis配置文件详解" class="headerlink" title="3.redis配置文件详解"></a>3.redis配置文件详解</h3><p>查看链接：<a href="http://blog.51yip.com/nosql/1724.html" target="_blank" rel="noopener">redis 配置 参数 详解</a></p><h2 id="Redis-数据类型"><a href="#Redis-数据类型" class="headerlink" title="Redis 数据类型"></a>Redis 数据类型</h2><p>Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。</p><h3 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h3><p>string是redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value。<br>string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。<br>string类型是Redis最基本的数据类型，一个键最大能存储512MB。</p><blockquote><p>例如</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; SET name &quot;hello&quot;</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; GET name</span><br><span class="line">&quot;hello&quot;</span><br></pre></td></tr></table></figure><p>在以上实例中我们使用了 Redis 的 SET 和 GET 命令。键为 name，对应的值为 hello。</p><p><i>注意：一个键最大能存储512MB。</i></p><h3 id="Hash（哈希）"><a href="#Hash（哈希）" class="headerlink" title="Hash（哈希）"></a>Hash（哈希）</h3><p>Redis hash 是一个键名对集合。<br>Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。</p><blockquote><p>例如</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HMSET user:1 username hello password hello points 200</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; HGETALL user:1</span><br><span class="line">1) &quot;username&quot;</span><br><span class="line">2) &quot;hello&quot;</span><br><span class="line">3) &quot;password&quot;</span><br><span class="line">4) &quot;hello&quot;</span><br><span class="line">5) &quot;points&quot;</span><br><span class="line">6) &quot;200&quot;</span><br></pre></td></tr></table></figure><p>以上实例中 hash 数据类型存储了包含用户脚本信息的用户对象。 实例中我们使用了 <code>Redis HMSET</code>, <code>HGETALL</code>命令，user:1 为键值。<br>每个 hash 可以存储 232 -1 键值对（40多亿）。</p><h3 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h3><p>Redis表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p><blockquote><p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; lpush hello redis</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; lpush hello mongodb</span><br><span class="line">(integer) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; lpush hello rabitmq</span><br><span class="line">(integer) 3</span><br><span class="line">redis 127.0.0.1:6379&gt; lrange hello 0 10</span><br><span class="line">1) &quot;rabitmq&quot;</span><br><span class="line">2) &quot;mongodb&quot;</span><br><span class="line">3) &quot;redis&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure></p></blockquote><p>列表最多可存储 2^32 - 1 元素 (4294967295, 每个列表可存储40多亿)。</p><h3 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h3><p>Redis的Set是string类型的无序集合。<br>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。</p><p><strong> sadd命令 </strong><br>添加一个string元素到,key对应的set集合中，成功返回1,如果元素已经在集合中返回0,key对应的set不存在返回错误。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sadd key member</span><br></pre></td></tr></table></figure><blockquote><p>例如：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; sadd hello redis</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; sadd hello mongodb</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; sadd hello rabitmq</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; sadd hello rabitmq</span><br><span class="line">(integer) 0</span><br><span class="line">redis 127.0.0.1:6379&gt; smembers hello</span><br><span class="line"></span><br><span class="line">1) &quot;rabitmq&quot;</span><br><span class="line">2) &quot;mongodb&quot;</span><br><span class="line">3) &quot;redis&quot;</span><br></pre></td></tr></table></figure><p>注意：以上实例中 rabitmq 添加了两次，但根据集合内元素的唯一性，第二次插入的元素将被忽略。<br>集合中最大的成员数为 232 - 1(4294967295, 每个集合可存储40多亿个成员)。  </p><h3 id="zset-sorted-set：有序集合"><a href="#zset-sorted-set：有序集合" class="headerlink" title="zset(sorted set：有序集合)"></a>zset(sorted set：有序集合)</h3><p>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。<br>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。<br><strong> zset的成员是唯一的,但分数(score)却可以重复。</strong></p><p><strong> zadd 命令</strong><br>添加元素到集合，元素在集合中存在则更新对应score<br><code>zadd key score member</code></p><blockquote><p>例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; zadd hello 0 redis</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; zadd hello 0 mongodb</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; zadd hello 0 rabitmq</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; zadd hello 0 rabitmq</span><br><span class="line">(integer) 0</span><br><span class="line">redis 127.0.0.1:6379&gt; ZRANGEBYSCORE hello 0 1000</span><br><span class="line"></span><br><span class="line">1) &quot;redis&quot;</span><br><span class="line">2) &quot;mongodb&quot;</span><br><span class="line">3) &quot;rabitmq&quot;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基本的shell操作HBase</title>
      <link href="/2018/05/20/%E5%9F%BA%E6%9C%AC%E7%9A%84shell%E6%93%8D%E4%BD%9CHBase/"/>
      <url>/2018/05/20/%E5%9F%BA%E6%9C%AC%E7%9A%84shell%E6%93%8D%E4%BD%9CHBase/</url>
      
        <content type="html"><![CDATA[<h2 id="1-进入hbase-shell-console"><a href="#1-进入hbase-shell-console" class="headerlink" title="1.进入hbase shell console"></a><strong>1.进入hbase shell console</strong></h2><blockquote><figure class="highlight plain"><figcaption><span>shell```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 如果有kerberos认证，需要事先使用相应的keytab进行一下认证（使用kinit命令），</span><br><span class="line">&gt; 认证成功之后再使用hbase shell进入可以使用``whoami``命令可查看当前用户</span><br></pre></td></tr></table></figure></blockquote><p>hbase(main) &gt; whoami<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line">## **2表的管理**</span><br><span class="line">&gt; 1）查看有哪些表hbase(main)&gt; list</span><br><span class="line"></span><br><span class="line">&gt; 2）创建表</span><br><span class="line">*语法*：</span><br><span class="line">```create &lt;table&gt;, &#123;NAME =&gt; &lt;family&gt;, VERSIONS =&gt; &lt;VERSIONS&gt;&#125;</span><br></pre></td></tr></table></figure></p><p>例如：创建表t1，有两个family name：f1，f2，且版本数均为2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hbase(main)&gt; create &apos;t1&apos;,</span><br><span class="line">&#123;NAME =&gt;&apos;f1&apos;, VERSIONS =&gt; 2&#125;,</span><br><span class="line">&#123;NAME =&gt;&apos;f2&apos; , VERSIONS =&gt; 2&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>3）删除表<br>分两步：首先disable，然后drop<br>例如：删除表t1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hbase(main)&gt; disable &apos;t1&apos;</span><br><span class="line">hbase(main)&gt; drop &apos;t1&apos;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>4）查看表的结构<br><em>语法</em>：<code>describe &lt;table&gt;</code><br>例如：查看表t1的结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase(main)&gt; describe &apos;t1&apos;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>5）修改表结构修改表结构必须先disable<br><em>语法</em>：<code>alter &#39;t1&#39;, {NAME =&gt; &#39;f1&#39;}, {NAME =&gt; &#39;f2&#39;, METHOD =&gt; &#39;delete&#39;}</code><br>例如：修改表test1的cf的TTL为180天<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hbase(main)&gt; disable &apos;test1&apos;</span><br><span class="line">hbase(main)&gt; alter &apos;test1&apos;</span><br><span class="line">,&#123;NAME=&gt;&apos;body&apos; ,TTL=&gt;&apos;15552000&apos;&#125;</span><br><span class="line">,&#123;NAME=&gt;&apos;meta&apos;, TTL=&gt;&apos;15552000&apos;&#125;</span><br><span class="line">hbase(main)&gt;enable &apos;test1&apos;</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="3-权限管理"><a href="#3-权限管理" class="headerlink" title="3.权限管理"></a><strong>3.权限管理</strong></h2><blockquote><p>1）分配权限# 语法 : grant <user> <permissions> <table> <column family> <column qualifier> 参数后面用逗号分隔<br><strong>权限</strong>用五个字母表示： “RWXCA”.<br><figure class="highlight plain"><figcaption><span>WRITE('W'), EXEC('X'), CREATE('C'), ADMIN('A')```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例如，给用户‘test&apos;分配对表t1有读写的权限，</span><br><span class="line">```hbase(main)&gt; grant &apos;test&apos; , &apos;RW&apos; , &apos;t1&apos;</span><br></pre></td></tr></table></figure></column></column></table></permissions></user></p></blockquote><blockquote><p>2）查看权限<br><em>语法</em>：<code>user_permission &lt;table&gt;</code><br>例如，查看表t1的权限列表<br><figure class="highlight plain"><figcaption><span>user_permission 't1'```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 3）收回权限</span><br><span class="line">与分配权限类似,</span><br><span class="line">*语法*：```revoke &lt;user&gt; &lt;table&gt; &lt;column family&gt; &lt;column qualifier&gt;</span><br></pre></td></tr></table></figure></p></blockquote><p>例如，收回test用户在表t1上的权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase(main)&gt; revoke &apos;test&apos; , &apos;t1&apos;</span><br></pre></td></tr></table></figure></p><h2 id="4-表数据的增删改查"><a href="#4-表数据的增删改查" class="headerlink" title="4.表数据的增删改查"></a><strong>4.表数据的增删改查</strong></h2><blockquote><p>1）添加数据<br>语法：<code>put &lt;table&gt;,&lt;rowkey&gt;,&lt;family:column&gt;,&lt;value&gt;,&lt;timestamp&gt;</code><br>例如：给表t1的添加一行记录：rowkey是rowkey001，family name：f1，column name：col1，value：value01，timestamp：系统默认<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hbase(main)&gt; put &apos;t1&apos; ,</span><br><span class="line"> &apos;rowkey001&apos; ,</span><br><span class="line"> &apos;f1:col1&apos;, &apos;value01&apos;</span><br></pre></td></tr></table></figure></p></blockquote><p>用法比较单一。</p><blockquote><p>2）查询数据<br>a）查询某行记录<br><em>语法</em>：<code>get &lt;table&gt;,&lt;rowkey&gt;,[&lt;family:column&gt;,....]</code><br>例如：查询表t1，rowkey001中的f1下的col1的值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hbase(main)&gt; get &apos;t1&apos;,</span><br><span class="line">&apos;rowkey001&apos; , &apos;f1:col1&apos;</span><br></pre></td></tr></table></figure></p></blockquote><p> 或者：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hbase(main)&gt; get &apos;t1&apos; , &apos;rowkey001&apos; ,</span><br><span class="line">&#123;COLUMN=&gt;&apos;f1:col1&apos;&#125;</span><br></pre></td></tr></table></figure></p><p>查询表t1，rowke002中的f1下的所有列值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase(main)&gt; get &apos;t1&apos;,&apos;rowkey001&apos;</span><br></pre></td></tr></table></figure></p><p>b）扫描表<br><em>语法</em>：<code>scan &lt;table&gt;, {COLUMNS =&gt; [ &lt;family:column&gt;,.... ], LIMIT =&gt; num}</code><br>另外，还可以添加STARTROW、TIMERANGE和FITLER等高级功能<br>例如：扫描表t1的前5条数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase(main)&gt; scan &apos;t1&apos; , &#123;LIMIT=&gt;5&#125;</span><br></pre></td></tr></table></figure></p><p>c）查询表中的数据行数<br><em>语法</em>：<figure class="highlight plain"><figcaption><span><table>, &#123;INTERVAL </table></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INTERVAL设置多少行显示一次及对应的rowkey，默认1000；CACHE每次去取的缓存区大小，默认是10，调整该参数可提高查询速度.</span><br><span class="line">例如，查询表t1中的行数，每100条显示一次，缓存区为500</span><br></pre></td></tr></table></figure></p><p>hbase(main)&gt; count ‘t1’,<br>{INTERVAL =&gt; 100, CACHE =&gt; 500}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; 3）删除数据</span><br><span class="line">a )删除行中的某个列值</span><br><span class="line">*语法*：``delete &lt;table&gt;, &lt;rowkey&gt;,  &lt;family:column&gt; , &lt;timestamp&gt;``,必须指定列名</span><br><span class="line">例如：删除表t1，rowkey001中的f1:col1的数据</span><br></pre></td></tr></table></figure></p><p>hbase(main)&gt; delete ‘t1’ ,<br>‘rowkey001’ ,’f1:col1’<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">注：将删除改行f1:col1列所有版本的数据</span><br><span class="line">b )删除行</span><br><span class="line">*语法*：```deleteall &lt;table&gt;, &lt;rowkey&gt;,  &lt;family:column&gt; , &lt;timestamp&gt;```，可以不指定列名，删除整行数据</span><br><span class="line">例如：删除表t1，rowk001的数据</span><br></pre></td></tr></table></figure></p><p>hbase(main)&gt; deleteall ‘t1’,’rowkey001’<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c）删除表中的所有数据</span><br><span class="line">*语法*： ``truncate &lt;table&gt;``</span><br><span class="line">其具体过程是：``disable table -&gt; drop table -&gt; create table``</span><br><span class="line">例如：删除表t1的所有数据</span><br></pre></td></tr></table></figure></p><p>hbase(main)&gt; truncate ‘t1’<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## **5.Region管理**</span><br><span class="line">&gt; 1）移动region</span><br><span class="line">*语法*:``move &apos;encodeRegionName&apos;, &apos;ServerName&apos;``</span><br><span class="line">``encodeRegionName``指的``regioName``后面的编码，``ServerName``指的是``master-status``的``Region Servers``列表</span><br><span class="line">示例</span><br></pre></td></tr></table></figure></p><p>hbase(main)&gt;move<br>‘4343995a58be8e5bbc739af1e91cd72d’ ,<br>‘db-41.xxx.xxx.org,60020,1390274516739’<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 2）开启/关闭region</span><br><span class="line">*语法*：``balance_switch true|false``</span><br></pre></td></tr></table></figure></p><p>hbase(main)&gt; balance_switch<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; 3）手动split</span><br><span class="line">*语法*：``split &apos;regionName&apos;, &apos;splitKey&apos;``</span><br><span class="line"></span><br><span class="line">&gt; 4）手动触发major compaction</span><br><span class="line">*语法*：``Compact all regions in a table:``</span><br></pre></td></tr></table></figure></p><p>hbase&gt; major_compact ‘t1’<br>Compact an entire region:<br>hbase&gt; major_compact ‘r1’<br>Compact a single column family within a region:<br>hbase&gt; major_compact ‘r1’, ‘c1’<br>Compact a single column family within a table:<br>hbase&gt; major_compact ‘t1’, ‘c1’<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## **6.配置管理及节点重启**</span><br><span class="line">&gt; 1）修改hdfs配置hdfs配置位置：</span><br></pre></td></tr></table></figure></p><p>/etc/hadoop/conf<br><code>` 同步hdfs配置</code><br>cat /home/hadoop/slaves | xargs -i -t scp /etc/hadoop/conf/hdfs-site.xml hadoop@{}: /etc/hadoop/conf/hdfs-site.xml<code>关闭：</code><br>cat /home/hadoop/slaves | xargs -i -t ssh hadoop@{} “sudo /home/hadoop/cdh4/hadoop-2.0.0-cdh4.2.1/sbin/hadoop-daemon.sh –config /etc/hadoop/conf stop datanode”<br><code>启动：</code>cat /home/hadoop/slaves | xargs -i -t ssh hadoop@{} “sudo /home/hadoop/cdh4/hadoop-2.0.0-cdh4.2.1/sbin/hadoop-daemon.sh –config /etc/hadoop/conf start datanode”<br><code></code></p><blockquote><p>2）修改hbase配置hbase配置位置：<br>同步hbase配置<br><code>cat /home/hadoop/hbase/conf/regionservers | xargs -i -t scp /home/hadoop/hbase/conf/hbase-site.xml hadoop@{}:/home/hadoop/hbase/conf/hbase-site.xml</code><br>graceful重启<br><code>cd ~/hbasebin/graceful_stop.sh --restart --reload --debug inspurXXX.xxx.xxx.org</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018_应该静下来</title>
      <link href="/2018/02/27/2018-%E5%BA%94%E8%AF%A5%E9%9D%99%E4%B8%8B%E6%9D%A5/"/>
      <url>/2018/02/27/2018-%E5%BA%94%E8%AF%A5%E9%9D%99%E4%B8%8B%E6%9D%A5/</url>
      
        <content type="html"><![CDATA[<p>写下这个日志标题的时候还是三月份。开始写内容的时候已经是6月了。  </p><p>现在还清楚的记得那个时候的心情：早期的项目由于当时能力问题和当时认知的限制，留下了很多bug，客户提出来需要升级。我在其中感受到了一些不满意。晚上下班后的我心情有些低落。思来想去，决定痛改这个项目，并暗自告诉自己。以后再也不写烂代码了。同时也告诉自己，这一年应该静下心来，好好的审视自己，好好的充实自己。</p><a id="more"></a><p>不知不觉过了三个月，当时的感受还在，但心情又有所不同。这三个月里，我扔掉了之前的“烂代码”，重构了该项目。这三个月，每次写代码都会想起自己当时心里立下的那个flag：以后再也不写烂代码了。当然，我很清楚，我肯定又写了很多以后的我眼中的“烂代码”。但这个时候，却是有所不同。</p><p>我知道，未来的我会否定我现在的这些“烂代码”，但一定不会否定我现在认真的态度。这段时间，我抱着一个敬畏的心态去写下我每行代码。也抱着敬畏的心情去过好生活。突然发现，自己好像静下来了。</p><p>再说说，2018。过了今年，会完成大家口中的人生几件大事。父母渐渐变老。家里的事情也要慢慢抗在我身上了。</p><p>想起2008的“年少才轻狂”，好像年少轻狂的年纪已经过去了。奔向而立之年的我，应该静下来，看清自己的位置，看清自己的方向，静下来，抛弃轻浮，静下来稳步往前。</p><p>三个月前的立下的flag我会一留着，时刻告诉自己：别写烂代码，好好生活。</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="298" height="52" src="https://music.163.com/outchain/player?type=2&id=517567264&auto=1&height=32"></iframe>]]></content>
      
      
      <categories>
          
          <category> live </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《楚门的世界》，关于选择和自由</title>
      <link href="/2018/01/22/%E3%80%8A%E6%A5%9A%E9%97%A8%E7%9A%84%E4%B8%96%E7%95%8C%E3%80%8B%EF%BC%8C%E5%85%B3%E4%BA%8E%E9%80%89%E6%8B%A9%E5%92%8C%E8%87%AA%E7%94%B1/"/>
      <url>/2018/01/22/%E3%80%8A%E6%A5%9A%E9%97%A8%E7%9A%84%E4%B8%96%E7%95%8C%E3%80%8B%EF%BC%8C%E5%85%B3%E4%BA%8E%E9%80%89%E6%8B%A9%E5%92%8C%E8%87%AA%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<h2 id="电影相关"><a href="#电影相关" class="headerlink" title="电影相关"></a>电影相关</h2><h3 id="楚门的世界（The-Truman-Show）"><a href="#楚门的世界（The-Truman-Show）" class="headerlink" title="楚门的世界（The Truman Show）"></a>楚门的世界（The Truman Show）</h3><p><center><img src="https://i.loli.net/2018/04/08/5aca1c7d5b30d.jpg" alt="tumen.jpg"></center></p><h3 id="内容简介"><a href="#内容简介" class="headerlink" title="内容简介"></a>内容简介</h3><p>楚门是一个平凡得不能再平凡的人，除了一些有些稀奇的经历之外——初恋女友突然失踪、溺水身亡的父亲忽然似乎又出现在眼前，他和绝大多数30多岁的美国男人绝无异样。这令他倍感失落。他也曾试过离开自己生活了多年的地方，但总因种种理由而不能成行。<br>　　直到有一天，他忽然发觉自己似乎一直在被人跟踪，无论他走到哪里，干什么事情。这种感觉愈来愈强烈。楚门决定不惜一切代价逃离这个他生活了30多年的地方，去寻找他的初恋女友。</p><h3 id="关于金·凯瑞-Jim-Carrey"><a href="#关于金·凯瑞-Jim-Carrey" class="headerlink" title="关于金·凯瑞(Jim Carrey)"></a>关于金·凯瑞(Jim Carrey)</h3><p>在看这部电影之前，我看到的金凯瑞的作品都还是《变相怪杰》、神探飞机头之类的无厘头喜剧电影。<br>通过这部电影，重新认识了他。电影中塑造的“楚门”形象让人映像深刻。</p><a id="more"></a><h2 id="观影后感"><a href="#观影后感" class="headerlink" title="观影后感"></a>观影后感</h2><h3 id="关于电影"><a href="#关于电影" class="headerlink" title="关于电影"></a>关于电影</h3><p>站在电影拍摄年代看，这部电影的想法大胆，某种程度还“预言”了现在的直播行业。楚门算是直播界的鼻祖吧？<br>电影中很多重复的镜头和场景，但电影情节设计合理，所以在观看的时候注意力也一直比较集中，不会有疲劳。<br>关于电影中的人物：楚门。他积极乐观，从小到大的几十年的生活直播，鼓舞了电影中很多“电视机前的观众”。最后选择离开“楚门的世界”的勇敢，也鼓舞了很多我这个看电影的观众。  </p><h3 id="我的感受"><a href="#我的感受" class="headerlink" title="我的感受"></a>我的感受</h3><h4 id="我们世界，楚门的世界"><a href="#我们世界，楚门的世界" class="headerlink" title="我们世界，楚门的世界"></a>我们世界，楚门的世界</h4><p>看完电影的时候，我会有一个疑惑：我是不是也处在一“XX的世界”？转瞬又会笑自己想多了。<br>但再认真的思考一下又会发现事情并不简单（细思极恐）：我真的处在一个真实的世界里么？我们看楚门，会不会也有人正在看着我们？（想得有点多啊，哈哈）<br>电影中，我们看得到的是：楚门走出了他的世界。<br>生活中，我们看不到的是：我们走不出自己的世界。<br>虽然我们不会真的在一场直播中，但我们的确被困在了自己的世界中。很多时候，我们都会计较生活中的点滴得失。我们会恐惧去改变。身体虽然没有被禁锢，但灵魂却甘心在“楚门的世界”中安逸。  </p><h4 id="关于自由和选择"><a href="#关于自由和选择" class="headerlink" title="关于自由和选择"></a>关于自由和选择</h4><p>电影中，楚门走出了“直播世界”，获得了自由，看起来是如此。可是我认为楚门在出门之前就已经获得了自由。<br>我认为，自由的概念不是“无拘无束”，而是“有得选”，也就是有选择的权利。楚门在出门前的那一刻，他是有选择走出去还是留下的权利，所以在这一刻，他是自由的。他知道了真相后，无论是留在电影世界，还是走出去，这件事情上，他都已经获得了“自由”。<br>我对自由最直观感受到的是在第一次搭上梯子翻出去的那一刻，一瞬间，我好像获得了某种自由。因为我终于可以选择是选用百度还是google，我是选择优酷还是youtube。有点不可思议，但就是这么简单。<br>自由好像就是这样，在你有选择的那一刻，你就有自由。你可以选择去旅行还是宅家里，监狱里的囚徒不行。<br>这么想，好像是有点道理。</p><p>最后：</p><blockquote><ul><li>如果我再也见不到你，我会祝你早安、午安还有晚安。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> live </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 电影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>看电影《十二怒汉》</title>
      <link href="/2017/12/28/%E7%9C%8B%E7%94%B5%E5%BD%B1%E3%80%8A%E5%8D%81%E4%BA%8C%E6%80%92%E6%B1%89%E3%80%8B/"/>
      <url>/2017/12/28/%E7%9C%8B%E7%94%B5%E5%BD%B1%E3%80%8A%E5%8D%81%E4%BA%8C%E6%80%92%E6%B1%89%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="相关介绍"><a href="#相关介绍" class="headerlink" title="相关介绍"></a>相关介绍</h2><h3 id="十二怒汉-12-Angry-Men-1957"><a href="#十二怒汉-12-Angry-Men-1957" class="headerlink" title="十二怒汉 12 Angry Men (1957)"></a>十二怒汉 12 Angry Men (1957)</h3><p><img src="https://i.loli.net/2017/12/28/5a44c091705d6.png" alt="12nuhan.png"></p><h3 id="剧情简介"><a href="#剧情简介" class="headerlink" title="剧情简介"></a>剧情简介</h3><p>一个在贫民窟长大的18岁少年因为涉嫌杀害自己的父亲被告上法庭，证人言之凿凿，各方面的证据都对他极为不利。十二个不同职业的人组成了这个案件的陪审团，他们要在休息室达成一致的意见，裁定少年是否有罪，如果罪名成立，少年将会被判处死刑。  </p><p>十二个陪审团成员各有不同，除了8号陪审员（H enry Fonda 饰）之外，其他人对这个犯罪事实如此清晰的案子不屑一顾，还没有开始讨论就认定了少年有罪。8号陪审员提出了自己的“合理疑点”，耐心地说服其他的陪审员，在这个过程中，他们每个人不同的人生观也在冲突和较量……  </p><a id="more"></a> <h2 id="观影有感"><a href="#观影有感" class="headerlink" title="观影有感"></a>观影有感</h2><h3 id="关于电影"><a href="#关于电影" class="headerlink" title="关于电影"></a>关于电影</h3><p>在看本片之前，我在网上看到过有人总结：“那些因为名字而被错过的电影”，我记得其中就有印度电影《三傻大闹宝莱坞》。我不记得其中是否有这部《十二怒汉》，但我知道我在很长一段时间内错过这部电影就是因为他的名字。“十二怒汉” 这个名字给我的第一感觉好像是类似“三百斯巴达勇士”一样，而我并不太喜欢这类型的电影。 </p><p>至于，后面拿起这部电影看的原因是是在逛b站的时候，看到介绍这部电影的一个视频。通过那段视频我简单的了解了这部电影。然后找了一个周末的晚上，仔细观赏了这部电影。  </p><p>由于拍摄年代比较久远，所以是黑白的。但这丝毫不影响导演和演员在黑白光影之间，讲述形象、深刻的故事。  </p><p>不谈剧情，整个电影的一个半小时剧情，除了开场和结束的几个镜头，整个故事其余镜头都是在一个带洗手间的会议室中完成的。故事讲述得丝丝入扣，导演的才华和演员的演技，在这单调到离谱的场景中展现的淋漓尽致。  </p><p>关于整部电影，有人说这是一部伟大的电影，我个人觉得，这部电影绝对对得住“伟大”两个字。非常推荐一看。  </p><h3 id="我的感受"><a href="#我的感受" class="headerlink" title="我的感受"></a>我的感受</h3><h4 id="关于决策"><a href="#关于决策" class="headerlink" title="关于决策"></a>关于决策</h4><p>整部电影，最让我印象深刻的地方是当所有人都在选择“赞同”的时候，8号陪审员站出来选择“不赞同”。心理学上，有我们很熟悉的一个现象，叫“从众效应”，在很多时候，我们更喜欢，更愿意，站在大多数的一方。买东西时，我们会选择销量好的，在舆论方面，我们跟愿意去关注大家都关注的事物。</p><p>8号评审员在“证据确凿”，除了自己外11个成员都投“赞成票”的情况下，勇敢的投出“反对票”，并阐述自己的观点。</p><p>我不禁想到自己在做决策时候，我是否有勇气去做出这样的“投票”。在遇到大多数人反对自己观点的时候，我是否能坚持自己的想法，能坚持的与他辩论。我知道，很多时候这个答案都是否定的，这值得我去反思。</p><h4 id="关于态度"><a href="#关于态度" class="headerlink" title="关于态度"></a>关于态度</h4><p>关于对待事情的态度，这个要从人物的关系说起。陪审团的成员都与他们所讨论的男孩在生活上是没有任何关系的。所以他们大多数人开始也并不太在乎他的生死。也不会在心里为男孩做辩解。这也是开始他对小男孩这件事情的一个态度。</p><p>轻视的态度决定了，11位评审员不会深入的去思考整件事情，更加不会站在为小男孩辩解的角度去思考，因为这跟‘我’无关。</p><p>当然，也正是因为他们对小男孩的态度是一种事不关己的态度，一种没有态度的态度，所以他们后面才能做到轻易的转换思路，为小男孩找到合理的解释。</p><p>对待事情的态度决定，我们对事情的思考方式，从何决定了我们的行为。所以表明态度，要谨慎。</p><h4 id="关于生命"><a href="#关于生命" class="headerlink" title="关于生命"></a>关于生命</h4><p>影片中，小男孩失去了父亲，也没有出现过他的母亲。除了8号评审员，片中出现的人物几乎没有人在意小男孩的生命。假如评审团中没有出现8号评审员，小男孩被判死刑，估计世界上也不会有人为他心痛，一个月后，一年以后，也不会有人记得世界上有小男孩这样一个人出现过。</p><p>包括，片中指认小男孩的老人，一生没有什么作为，到死去之前也不会有人注意到他。</p><p>这让我想到了电影《嫌疑人X的献身》中被数学家杀死的流浪汉，他的死去没有给世界带来丝毫的影响。</p><p>我还想到了很多死去的伟人，他们的逝去得到了整个世界的关注。他们的生命在这个星球上留下了不可磨灭的印记。</p><p>生命就是这样的神奇，可以灿烂如星空，也可以平淡如水滴。</p><h3 id="还有很多"><a href="#还有很多" class="headerlink" title="还有很多"></a>还有很多</h3><p>影片看完了，这篇简短的观后感也差不多结束了。由于文字水平有限，也可能是很多东西没有体悟透彻，所以漏掉了很多。影片和文字结束了，但生活还在继续，我相信，这部电影收获的更多的东西，是我现在在没有感受到的，没有讲述出来的，他会无形的影响着我今后的生活，生活会越来越好。</p><p>其他电影也是，其他书籍也是。</p>]]></content>
      
      
      <categories>
          
          <category> live </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 电影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>处理php脚本超时的各种尝试</title>
      <link href="/2017/12/15/%E5%A4%84%E7%90%86php%E8%84%9A%E6%9C%AC%E8%B6%85%E6%97%B6%E7%9A%84%E5%90%84%E7%A7%8D%E5%B0%9D%E8%AF%95/"/>
      <url>/2017/12/15/%E5%A4%84%E7%90%86php%E8%84%9A%E6%9C%AC%E8%B6%85%E6%97%B6%E7%9A%84%E5%90%84%E7%A7%8D%E5%B0%9D%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="php配置方面的调整"><a href="#php配置方面的调整" class="headerlink" title="php配置方面的调整"></a>php配置方面的调整</h2><ol><li>php代码中的调整  </li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ignore_user_abort();</span><br><span class="line">set_time_limit(<span class="number">0</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><ol start="2"><li><p>php配置文件的修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#/usr/local/php/etc/php.ini</span><br><span class="line">max_execution_time = 0</span><br></pre></td></tr></table></figure></li><li><p>php-fpm.conf 参数  </p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request_terminate_timeout = 0</span><br></pre></td></tr></table></figure><ul><li>设置单个请求的超时中止时间. </li><li>该选项可能会对<code>php.ini</code>设置中的’<code>max_execution_time</code>‘因为某些特殊原因没有中止运行的脚本有用. </li><li>设置为 ‘<code>0</code>‘ 表示 ‘<code>Off</code>‘.</li><li>当经常出现502错误时可以尝试更改此选项。<br><code>request_slowlog_timeout = 10s</code></li><li>当一个请求该设置的超时时间后，就会将对应的PHP调用堆栈信息完整写入到慢日志中. 设置为 ‘<code>0</code>‘ 表示 ‘<code>Off</code>‘</li></ul><h2 id="Nginx方面的调整"><a href="#Nginx方面的调整" class="headerlink" title="Nginx方面的调整"></a>Nginx方面的调整</h2><p>nginx如果要解析php脚本语言，就必须通过配置<code>fastcgi</code>模块来提供对php支持  </p><h3 id="1-fast-cgi的配置"><a href="#1-fast-cgi的配置" class="headerlink" title="1. fast_cgi的配置"></a>1. fast_cgi的配置</h3><pre><code>fastcgi_connect_timeout  配置语法：  fastcgi_connect_timeout 时间(单位为s)   默认值： fastcgi_connect_timeout 60s  配置区域： http server location  配置项说明： 指定nginx与后端fastcgi server连接超时时间  ---fastcgi_send_timeout   配置语法：  fastcgi_send_timeout 时间(单位为s)   默认值： fastcgi_send_timeout 60s;  配置区域： http server location   配置项说明：指定nginx向后端传送请求超时时间（指已完成两次握手后向fastcgi传送请求超时时间）   </code></pre>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端分页逻辑的思考</title>
      <link href="/2017/06/01/%E5%89%8D%E7%AB%AF%E5%88%86%E9%A1%B5%E9%80%BB%E8%BE%91%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>/2017/06/01/%E5%89%8D%E7%AB%AF%E5%88%86%E9%A1%B5%E9%80%BB%E8%BE%91%E7%9A%84%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<p>/* </p><ul><li>今天偶有空闲，于是便想把之前随意放上的一段代码做个解释。</li><li>其实以现在的角度（过去了两三个月）来看这个标题，明显感觉有点装逼了。</li><li>主要原因是这个简单的问题还算不上思考</li><li>不过既然都写了，就继续装下去吧。</li></ul><p>*/<br><a id="more"></a><br>先上代码,项目里抽取的一段,基于tp的.主要看思路.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pages"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">condition</span>=<span class="string">"$totalPage eq 1"</span>&gt;</span> <span class="comment">&lt;!-- 只用一页的情况 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/page/1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">elseif</span> <span class="attr">condition</span>=<span class="string">"($totalPage gt 1) AND ($totalPage elt 8)"</span>/&gt;</span><span class="comment">&lt;!-- 总页数是2到8也的情况 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">condition</span>=<span class="string">"$page eq 1"</span>&gt;</span>    <span class="comment">&lt;!-- 当前页是1的情况   --&gt;</span>      </span><br><span class="line">                          <span class="tag">&lt;<span class="name">for</span> <span class="attr">start</span>=<span class="string">"1"</span> <span class="attr">end</span>=<span class="string">"$totalPage+1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/page/&#123;$i&#125;"</span>&gt;</span>&#123;$i&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">for</span>&gt;</span>                         </span><br><span class="line">                          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/page/&#123;$page+1&#125;"</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">elseif</span> <span class="attr">condition</span>=<span class="string">"$page eq $totalPage "</span>/&gt;</span><span class="comment">&lt;!-- 当前页是最后一页的情况   --&gt;</span> </span><br><span class="line">                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/page/&#123;$page-1&#125;"</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">for</span> <span class="attr">start</span>=<span class="string">"1"</span> <span class="attr">end</span>=<span class="string">"$totalPage+1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/page/&#123;$i&#125;"</span>&gt;</span>&#123;$i&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">for</span>&gt;</span>                           </span><br><span class="line"><span class="tag">&lt;<span class="name">else</span> /&gt;</span><span class="comment">&lt;!-- 其他(不等于第一和最后一页的)情况   --&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/page/&#123;$page-1&#125;"</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">for</span> <span class="attr">start</span>=<span class="string">"1"</span> <span class="attr">end</span>=<span class="string">"$totalPage+1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/page/&#123;$i&#125;"</span>&gt;</span>&#123;$i&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">for</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/page/&#123;$page+1&#125;"</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">elseif</span> <span class="attr">condition</span>=<span class="string">"$totalPage egt 8"</span>/&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">if</span> <span class="attr">condition</span>=<span class="string">"$page eq 1"</span>&gt;</span>    <span class="comment">&lt;!-- 当前页是1的情况   --&gt;</span>      </span><br><span class="line">                          <span class="tag">&lt;<span class="name">for</span> <span class="attr">start</span>=<span class="string">"1"</span> <span class="attr">end</span>=<span class="string">"9"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/page/&#123;$i&#125;"</span>&gt;</span>&#123;$i&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">for</span>&gt;</span>                         </span><br><span class="line">                          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/page/&#123;$page+1&#125;"</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">elseif</span> <span class="attr">condition</span>=<span class="string">"($page gt 1) AND ($page lt 5)"</span>/&gt;</span> <span class="comment">&lt;!-- 当前页是2-4的情况   --&gt;</span>   </span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/page/&#123;$page-1&#125;"</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">for</span> <span class="attr">start</span>=<span class="string">"1"</span> <span class="attr">end</span>=<span class="string">"9"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/page/&#123;$i&#125;"</span>&gt;</span>&#123;$i&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">for</span>&gt;</span>                           </span><br><span class="line">                          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/page/&#123;$page+1&#125;"</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">elseif</span> <span class="attr">condition</span>=<span class="string">"($page egt 5) AND ($page elt ($totalPage-3))"</span>/&gt;</span><span class="comment">&lt;!-- 当前页是5-倒数第4的情况   --&gt;</span>  </span><br><span class="line">                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/page/&#123;$page-1&#125;"</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">for</span> <span class="attr">start</span>=<span class="string">"(-4)"</span> <span class="attr">end</span>=<span class="string">"4"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/page/&#123;$page+$i&#125;"</span>&gt;</span>&#123;$page+$i&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">for</span>&gt;</span>                           </span><br><span class="line">                          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/page/&#123;$page+1&#125;"</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">elseif</span> <span class="attr">condition</span>=<span class="string">"$page eq $totalPage"</span>/&gt;</span> <span class="comment">&lt;!-- 当前页是最后一页情况   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/page/&#123;$page-1&#125;"</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">for</span> <span class="attr">start</span>=<span class="string">"-7"</span> <span class="attr">end</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/page/&#123;$page+$i&#125;"</span>&gt;</span>&#123;$page+$i&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">for</span>&gt;</span>   </span><br><span class="line">                  <span class="tag">&lt;<span class="name">elseif</span> <span class="attr">condition</span>=<span class="string">"$page gt ($totalPage-3)"</span>/&gt;</span><span class="comment">&lt;!--当前页大于最大页数-3且不等于最大页数的情况。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span>  <span class="attr">href</span>=<span class="string">"/page/&#123;$page-1&#125;"</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">for</span> <span class="attr">start</span>=<span class="string">"($totalPage-$page)-7"</span> <span class="attr">end</span>=<span class="string">"($totalPage-$page)+1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/page/&#123;$page+$i&#125;"</span>&gt;</span>&#123;$page+$i&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">for</span>&gt;</span>                           </span><br><span class="line">                          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/page/&#123;$page+1&#125;"</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">if</span>&gt;</span>        </span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其实在备注中已经很明显了。<br>分为以下几种情况，总页面数：  </p><h2 id="1-总页数只有一页的情况"><a href="#1-总页数只有一页的情况" class="headerlink" title="1.总页数只有一页的情况"></a>1.总页数只有一页的情况</h2><blockquote><p>假设总页数只有1页的话，当前页肯定是1，且没有上一页或下一页 </p></blockquote><h2 id="2-总页数2页到8页的情况（假设共显示八页）"><a href="#2-总页数2页到8页的情况（假设共显示八页）" class="headerlink" title="2.总页数2页到8页的情况（假设共显示八页）"></a>2.总页数2页到8页的情况（假设共显示八页）</h2><blockquote><p>首先，总页数小于8的话，所有的页面都应该显示。直接用for循环到最大页数。</p></blockquote><p>这种情况下，假设当前页是1的话，就没有上一页，有下一页。<br>假设当前页是最后一页的话，有上一页，但是没有下一页。<br>其他情况下就是上一页和下一页都有。   </p><h2 id="3-总页数大于8页的情况"><a href="#3-总页数大于8页的情况" class="headerlink" title="3.总页数大于8页的情况"></a>3.总页数大于8页的情况</h2><blockquote><p>这种情况稍微复杂，因为需要控制页面的输出</p></blockquote><p>假设当前页是1到5页的情况，显示的是1-8页。并且，当前页是1的情况没有上一页。 </p><p>分离出来就是：<br>当前页为1的情况：没有上一页，有下一页，显示1-8页，    </p><p>当前页为2-5的情况，有上一页和下一页，显示1-8页，  </p><p>那么当页码大于5页的时候呢？？这个时候就需要考虑到三种种情况，  </p><ol><li>当前页小于最大页数-3的情况，这个情况下，就显示当前页-4页到当前页+3页。 </li><li>当前页大于最大页数-3且不等于最大页数的情况。  </li><li>当前页是最大页数的情况。  </li></ol><p>这三种情况总结一下就是：  </p><ol><li>显示上一页和下一页，页码是当前页-4页到当前页+3页  </li><li>显示上一页和下一页，显示当前（页总页数-当前页）-7 到（总页数-当前页）+1 ps：这种情况稍微要奇怪  </li><li>显示上一页，不显示下一页，（显示当前页-8）到 当前页。  </li></ol>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql数据库导入/导出(总结备忘)</title>
      <link href="/2017/05/20/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%BC%E5%85%A5%E3%80%81%E5%AF%BC%E5%87%BA(%E6%80%BB%E7%BB%93%E5%A4%87%E5%BF%98)/"/>
      <url>/2017/05/20/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%BC%E5%85%A5%E3%80%81%E5%AF%BC%E5%87%BA(%E6%80%BB%E7%BB%93%E5%A4%87%E5%BF%98)/</url>
      
        <content type="html"><![CDATA[<p>在linux下直接用命令行操作就可以 在windows下 一般情况下有两种方法一个也是用命令行 另一个是用phpmyadmin</p><h2 id="1-phpmyadmin"><a href="#1-phpmyadmin" class="headerlink" title="1.phpmyadmin"></a>1.phpmyadmin</h2><p>先来说说phpmyadmin 这个工具导出和导入很简单 而且导入时无需建库 直接还原成原来的数据库   用<strong> source </strong><br> 也可以还原 但他导入文件时有大小限制不能超过20M</p><a id="more"></a><p>再来说说 <strong> mysqldump </strong>和 <strong> source </strong>  用命令操作很快 但是想把导出的文件再导入时必须先建立一个数据库(这个库可以随便起名) 然后进入数据库后才能导入用phpmyadmin导入<br><strong> mysqldump </strong>导出的文件也得需要这步</p><h2 id="2-其他命令方式"><a href="#2-其他命令方式" class="headerlink" title="2.其他命令方式"></a>2.其他命令方式</h2><p>下面是从前辈那copy来的命令具体使用方法<br>1.导出整个数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u 用户名 -p 数据库名 &gt; 导出的文件名</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -proot dingding &gt; 1.sql</span><br></pre></td></tr></table></figure><p>2.导出一个表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u 用户名 -p 数据库名 表名&gt; 导出的文件名</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -proot dingding &gt;F:/dingding/wcnc.sql</span><br></pre></td></tr></table></figure><p>3.导出一个数据库结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u wcnc -p -d --add-drop-table smgp_apps_wcnc &gt;d:wcnc_db.sql</span><br></pre></td></tr></table></figure></p><p>-d 没有数据 –add-drop-table 在每个create语句之前增加一个drop table<br>　　<br>备忘:</p><blockquote><p>mysqldump在linux下可直接使用 在windows下有时需要进入mysql/bin中使用 因为有时用的是类似appserv的套装软件 这样的话命令就不能直接使用 因为这些命令没在环境变量的目录里 而且用mysqldump导出的备份 必须先建立数据库才能导入</p></blockquote><p> 4.导入数据库<br>　　常用<code>source</code>命令<br>　　进入mysql数据库控制台，<br>　　如<code>mysql -u root -p</code><br>　　mysql&gt;use 数据库<br>　　然后使用source命令，后面参数为脚本文件(如这里用到的.sql)<br>　　<code>mysql&gt;source d:wcnc_db.sql</code></p><p>存疑: phpmyadmin导入有大小限制 不知道source导入时有没限制 而且导出时是不可以限制文件大小 并且分数个文件导出</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php装ssh扩展</title>
      <link href="/2017/05/20/php%E8%A3%85ssh%E6%89%A9%E5%B1%95/"/>
      <url>/2017/05/20/php%E8%A3%85ssh%E6%89%A9%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<h2 id="1-编译安装libssh2"><a href="#1-编译安装libssh2" class="headerlink" title="1.编译安装libssh2"></a>1.编译安装libssh2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.libssh2.org/download/libssh2-1.2.9.tar.gz</span><br><span class="line"></span><br><span class="line">tar zxvf libssh2-1.2.9.tar.gz</span><br><span class="line"></span><br><span class="line">cd libssh2-1.2.9</span><br><span class="line"></span><br><span class="line">./configure &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="2-编译安装ssh2-官网http-www-php-net-ssh2"><a href="#2-编译安装ssh2-官网http-www-php-net-ssh2" class="headerlink" title="2.编译安装ssh2(官网http://www.php.net/ssh2)"></a>2.编译安装ssh2(官网<a href="http://www.php.net/ssh2" target="_blank" rel="noopener">http://www.php.net/ssh2</a>)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">wget   http://pecl.php.net/get/ssh2-0.11.3.tgz</span><br><span class="line"></span><br><span class="line">tar zxvf ssh2-0.11.3.tgz</span><br><span class="line"></span><br><span class="line">cd ssh2-0.11.3</span><br><span class="line"></span><br><span class="line">phpize（如果没有找到该命令，请确定是否安装的是php-dev）</span><br><span class="line"></span><br><span class="line">./configure --with-ssh2 --with-php-config=/usr/local/php/bin/php-config</span><br><span class="line"></span><br><span class="line">make</span><br></pre></td></tr></table></figure><h2 id="make后有两种方案"><a href="#make后有两种方案" class="headerlink" title="make后有两种方案"></a>make后有两种方案</h2><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1:"></a>方法1:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp modules/ssh2.so /usr/local/php/lib/php/extensions/no-debug-non-zts-20060613/</span><br></pre></td></tr></table></figure><p>然后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;extension=ssh2.so&quot; &gt;&gt; /usr/local/php/etc/php.ini </span><br><span class="line"># (视php.ini的具体位置确定，也可能是/etc/php.ini)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python，Re模块的学习</title>
      <link href="/2017/05/20/Python%EF%BC%8CRe%E6%A8%A1%E5%9D%97%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
      <url>/2017/05/20/Python%EF%BC%8CRe%E6%A8%A1%E5%9D%97%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概念："><a href="#1-概念：" class="headerlink" title="1.概念："></a>1.概念：</h2><p>正则表达式（或 RE）是一种小型的、高度专业化的编程语言，在Python中）它内嵌在Python中，并通过 re 模块实现。<br>使用这个小型语言，你可以为想要匹配的相应字符串集指定规则；<br>该字符串集可能包含英文语句、email、地址、TeX命令或任何你想搞定的东西。<br>然后你可以问诸如“这个字符串匹配该模式吗？”或“在这个字符串中是否有部分匹配该模式呢？”。<br>你也可以使用 RE以各种方式来修改或分割字符串。正则表达式语言相对小型和受限（功能有限），<br>因此并非所有字符串处理都能用正则表达式完成。<br>当然也有些任务可以用正则表达式完成，不过最终表达式会变得异常复杂。<br>碰到这些情形时，编写 Python 代码进行处理可能反而更好；<br>尽管Python 代码比一个精巧的正则表达式要慢些，但它更易理解。  </p><a id="more"></a><h2 id="2-在正则表达式中，-如下的字符是具有特殊含义的"><a href="#2-在正则表达式中，-如下的字符是具有特殊含义的" class="headerlink" title="2.在正则表达式中， 如下的字符是具有特殊含义的"></a>2.在正则表达式中， 如下的字符是具有特殊含义的</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">. (所有字符)  ^  $  *(0-N次)  +(1-N次)  ? (0-1次) &#123; &#125; [  ]  \  |  ( )</span><br></pre></td></tr></table></figure><p>1).”[“ 和 “]”。它们常用来指定一个字符类别，所谓字符类别就是你想匹配的一个字符集</p><p>2).其它地方的”^”只会简单匹配 “^”字符本身。例[^5] 将匹配除 “5” 之外的任意字符。</p><p>3).反斜杠后面可以加不同的字符以表示不同特殊意义。它也可以用于取消所有的元字符</p><h2 id="3-RE-函数用法"><a href="#3-RE-函数用法" class="headerlink" title="3.RE 函数用法:"></a>3.RE 函数用法:</h2><p>   findall(rule , target [,flag] ) 在目标字符串中查找符合规则的字符串。<br>   match() 决定 RE 是否在字符串刚开始的位置匹配<br>   search() 扫描字符串，找到这个 RE 匹配的位置<br>   findall() 找到 RE 匹配的所有子串，并把它们作为一个列表返回<br>   finditer() 找到 RE 匹配的所有子串，并把它们作为一个迭代器返回<br>   group() 返回被 RE 匹配的字符串<br>   start() 返回匹配开始的位置<br>   end() 返回匹配结束的位置<br>   span() 返回一个元组包含匹配 (开始,结束) 的位置<br>   compile( rule [,flag] )将正则规则编译成一个Pattern对象，以供接下来使用第一个参数是规则式，第二个参数是规则选项。(使用compile加速)</p><h2 id="4-含义"><a href="#4-含义" class="headerlink" title="4 : 含义:"></a>4 : 含义:</h2><pre><code>预定义转义字符集： “\d”  “\w” “\s” 等等，它们是以字符’\’开头，后面接一个特定字符的形式,用来指示一个预定义好的含义‘^’  和’$’ 匹配字符串开头和结尾‘.’    匹配所有字符 除\n以外‘\d’  匹配数字‘\D’  匹配非数字‘\w’  匹配字母和数字‘\W’  匹配非英文字母和数字‘\s’   匹配间隔符‘\S’   匹配非间隔符‘\A’  匹配字符串开头‘\Z’  匹配字符串结尾‘\b’  只用以匹配单词的词首和词尾。单词被定义为一个字母数字序列，因此词尾就是用空白符或非字母数字符来标示的。(退格)‘\B’，它正好同 \b 相反，只在当前位置不在单词边界时匹配。</code></pre><h2 id="5-前向界定与后向界定"><a href="#5-前向界定与后向界定" class="headerlink" title="5.前向界定与后向界定:"></a>5.前向界定与后向界定:</h2><pre><code>‘(?&lt;=…)’ 前向界定:括号中’…’代表你希望匹配的字符串的前面应该出现的字符串。‘(?=…)’后向界定    :括号中的’…’代表你希望匹配的字符串后面应该出现的字符串‘(?&lt;!..)’前向非界定 :只有当你希望的字符串前面不是’…’的内容时才匹配‘(?!...)’后向非界定  :只有当你希望的字符串后面不跟着’…’内容时才匹配。</code></pre><h2 id="6-组的基本知识"><a href="#6-组的基本知识" class="headerlink" title="6.组的基本知识:"></a>6.组的基本知识:</h2><pre><code>‘(‘’)’          无命名组                    [a-z]+(\d+)[a-z]+‘(?P&lt;name&gt;…)’    命名组                    (?P&lt;g1&gt;[a-z]+)\d+(?P=g1)‘(?P=name)’    调用已匹配的命名组‘\number’     通过序号调用已匹配的组正则式中的每个组都有一个序号，序号是按组从左到右，从1开始的数字，你可以通过下面的形式来调用已匹配的组 ( r&quot;(\d+)([a-z]+)(\d+)(\2)(\1)&quot; )  </code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:UTF8 -*- </span><br><span class="line">import sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(&apos;utf-8&apos;)</span><br><span class="line"></span><br><span class="line">import rhinoscriptsyntax as rs</span><br><span class="line"># 正则表达式</span><br><span class="line">import re</span><br><span class="line">str1 = &quot;abc \\ 123 456&quot;</span><br><span class="line">print re.findall(&quot;\\\\&quot;,str1)  # 不用r和用r的区</span><br><span class="line">print re.findall(r&quot;\d\Z&quot;,str1) # 用&quot;r&quot;来定义规则字符串</span><br><span class="line"></span><br><span class="line">p = re.compile(&apos;(a)b&apos;)</span><br><span class="line">m = p.match(&apos;ab&apos;)</span><br><span class="line">print m.group()</span><br><span class="line"></span><br><span class="line">s = &quot;aaa1 22 gg 333 ccc 4444 pppp 55555 666&quot;</span><br><span class="line">print re.findall(r&quot;\b\d&#123;3&#125;\b&quot;,s)</span><br><span class="line">print re.findall(r&quot;\b\d&#123;2,4&#125;\b&quot;,s)</span><br><span class="line"></span><br><span class="line">s2 = &quot;aaa111aaa , bbb222 , 333ccc&quot;</span><br><span class="line">print re.findall( r&quot;(?&lt;=[a-z]+)\d+(?=[a-z]+)&quot;,s2 )</span><br><span class="line">print re.findall( r&quot;\d+(?=[a-z]+)&quot;,s2 )</span><br><span class="line">## 目标 前面是a-z 1-多次、中间数字1-9 1-多次</span><br><span class="line">print re.findall(r&quot;\d+(?!\w+)&quot;,s2)</span><br><span class="line">#无命名组</span><br><span class="line">print re.findall(r&quot;[a-z]+(\d+)[a-z]+&quot;,s2) # 只返回()里面的</span><br><span class="line">s3 = &apos;aaa111aaa,bbb222,333ccc,444ddd444,555eee666,fff777ggg,hhh888hhh&apos;</span><br><span class="line">print re.findall(r&quot;([a-z]+)\d+([a-z]+)&quot;,s3) #返回括号里面的</span><br><span class="line">#‘(?P&lt;name&gt;…)’ 命名组</span><br><span class="line">print re.findall( r&quot;(?P&lt;g1&gt;[a-z]+)\d+(?P=g1)&quot;,s3 ) #找出被中间夹有数字的前后同样的字母</span><br><span class="line">print re.findall(r&quot;([a-z]+)\d+\1&quot;,s3)</span><br><span class="line">s4 = &quot;111aaa222aaa111,333bbb444bb33&quot;</span><br><span class="line">print re.findall( r&quot;(\d+)([a-z]+)(\d+)(\2)(\1)&quot;, s4 ) #数字、字母、数字、字母、数字相对称</span><br><span class="line">print re.compile(r&quot;(\d+)([a-z]+)(\d+)(\2)(\1)&quot;).findall(s4)</span><br><span class="line"></span><br><span class="line">#compile( rule [,flag] ) 使用compile加速</span><br><span class="line">s5 = &quot;111,222,aaa,bbb,ccc333,444ddd&quot;</span><br><span class="line">print re.compile(r&quot;\d+\b&quot;).findall(s5) # \退格 匹配一个位于开头的数字，没有使用M选项</span><br><span class="line"></span><br><span class="line">s6 = &quot;123 456\n789 012\n345 678&quot;</span><br><span class="line">print re.compile(r&quot;^\d+&quot;,re.M).findall(s6) # 匹配位于(M/多行)开头的数字</span><br><span class="line"></span><br><span class="line">rcm=re.compile(r&quot;\d+$&quot;)# 对于’$’来说，没有使用M选项，它将匹配最后一个行尾的数字，即’678’，加上以后，就能匹配三个行尾的数字456 012和678了.</span><br><span class="line">print re.compile(r&quot;\d+$&quot;,re.M).findall(s6) #</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch简介</title>
      <link href="/2017/05/20/elasticsearch%E7%AE%80%E4%BB%8B/"/>
      <url>/2017/05/20/elasticsearch%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="一、elasticsearch是什么"><a href="#一、elasticsearch是什么" class="headerlink" title="一、elasticsearch是什么"></a>一、elasticsearch是什么</h2><blockquote><p>ElasticSearch是一个基于<a href="http://baike.baidu.com/item/Lucene?sefr=enterbtn" target="_blank" rel="noopener">Lucene</a>的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于<a href="http://baike.baidu.com/view/1316082.htm" target="_blank" rel="noopener">云计算</a>中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。<br>(百度百科)</p></blockquote><a id="more"></a><p>理解这段话简单理解就是：ES是一个搜索引擎，是基于Lucene的。它是一个提供了基于<a href="http://baike.baidu.com/item/RESTful?sefr=enterbtn" target="_blank" rel="noopener">RESTful</a> 的web接口，能够达到实时，稳定，可靠，快速的搜索引擎。</p><p>Elasticsearch也使用Java开发并使用Lucene作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的RESTful API来隐藏Lucene的复杂性，从而让全文搜索变得简单。</p><p>ES是开源的，它的官网是：<a href="www.elastic.co">www.elastic.co</a>，</p><p>github项目地址是：<a href="https://github.com/elastic/elasticsearch" target="_blank" rel="noopener">www.github.com/elastic/elasticsearch</a></p><p>中文论坛：<a href="elasticsearch.cn">elasticsearc.cn</a></p><h2 id="二、elasticsearch能做什么"><a href="#二、elasticsearch能做什么" class="headerlink" title="二、elasticsearch能做什么"></a>二、elasticsearch能做什么</h2><p>Elasticsearch不仅仅是Lucene和全文搜索，其他特点还包括：</p><ul><li>分布式的实时文件存储，每个字段都被索引并可被搜索</li><li>分布式的实时分析搜索引擎</li><li>可以扩展到上百台服务器，处理PB级结构化或非结构化数据</li></ul><p>而且，所有的这些功能被集成到一个服务里面，你的应用可以通过简单的RESTful API、各种语言的客户端甚至命令行与之交互。<br>总结一句话：<strong>ES是一个功能强大，使用简单的分布式的全文搜索引擎。</strong></p><h2 id="三、elasticsearch文档的概念"><a href="#三、elasticsearch文档的概念" class="headerlink" title="三、elasticsearch文档的概念"></a>三、elasticsearch文档的概念</h2><p>在Elasticsearch中，数据是以文档(document)形式存在的，归属于一种类型(type),而这些类型存在于索引(index)。和关系型数据库中的概念对比：</p><table><thead><tr><th style="text-align:left">SQL</th><th style="text-align:left">database</th><th style="text-align:left">table</th><th style="text-align:left">row</th><th style="text-align:left">column</th></tr></thead><tbody><tr><td style="text-align:left"><strong> elasticsearch</strong></td><td style="text-align:left">index</td><td style="text-align:left">type</td><td style="text-align:left">document</td><td style="text-align:left">field</td></tr></tbody></table><p>其实这样的对比并不是完全的准确的，但是有助于我们理解elasticsearch的数据存储格式。</p><h2 id="四、个人对ES的一些理解"><a href="#四、个人对ES的一些理解" class="headerlink" title="四、个人对ES的一些理解"></a>四、个人对ES的一些理解</h2><p>elasticsearch主要优势是：<strong>速度快</strong>，使用方便，分布式的，功能强大。<br>ES官方的想做的是ELK结合起来做日志分析等工作。估计这也是它最多的应用场景。<br>ES使用非常方便，官方文档也比较全，社区也很活跃。估计以后的发展会越来越好，应用场景会越来越多。</p><p>关于更详细的ES简介可以查看网上有朋友翻译的<a href="https://es.xiaoleilu.com/" target="_blank" rel="noopener">《Elasticsearch权威指南》</a><br>也可以看看这个朋友写的ES基本概念：<a href="http://blog.csdn.net/laoyang360/article/details/52244917" target="_blank" rel="noopener">Elasticsearch学习，请先看这一篇！</a></p><p><em><a href="http://www.jianshu.com/p/ede55b4110b1" target="_blank" rel="noopener">《elasticsearch非权威指南》目录</a></em><br><em>本笔记欢迎转载，欢迎分享，转载分享不用通知作者。不过，如果可以的话希望能注明出处，看完文章还能点个赞。</em></p>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch非权威指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch非权威指南，写在开始的话</title>
      <link href="/2017/05/20/%E5%86%99%E5%9C%A8%E5%BC%80%E5%A7%8B%E7%9A%84%E8%AF%9D/"/>
      <url>/2017/05/20/%E5%86%99%E5%9C%A8%E5%BC%80%E5%A7%8B%E7%9A%84%E8%AF%9D/</url>
      
        <content type="html"><![CDATA[<p>打算了好久，《elasticsearch非权威指南》今天终于开始写了。</p><p>距离开始接触elasticsearch到今天开始写这个笔记有半年多了。从开始的完全蒙圈到现在的懵懵懂懂。踩过N多的坑。开始写这个《指南》主要有下面几个原因：<br><a id="more"></a></p><p>##一、能帮到一些开始学习ES的人</p><p>首先，我自己是一个人独自的百度、google学习过来的。es是一个比较新的东西，网上的中文资料很有限。而且本人是做php开发的，es是基于lucene的，是用java开发的，所以php的资料就更少了。</p><p>在学习的过程中我真的是爬过超多的坑，所以希望记录下这些“坑”，能帮助一些开始学习ES的人，后面的人少跳一些坑，我自己也希望有个人能在我跳坑之前提醒我，虽然都已经过去了。</p><p>##二、希望帮助自己理清学到的东西</p><p>我开始写这个《指南》并不是说我现在玩ES玩得多好，相反，我的对ES的了解才刚刚开始。<strong>我希望通过写下笔记的形式理清自己的知识节点。</strong>将之前学到的东西串起来，看自己哪有漏洞，再去边补边写。所以，这个《指南》肯定有很多的错误的和不足，希望发现的朋友能帮忙指出，不胜感激。</p><p>也是因为本人目前技术有限的原因，本笔记的内容也写不了很深入，我自己yy的认为，这可能会让这个《指南》更加”亲民易懂“，更适合新人。</p><p>##三、感谢在我学习过程中帮助过我的朋友。</p><p>学习过程中我遇到许多的问题，很多问题度娘和gg都找不到，所以只能求助万能的群有和论坛的朋友。过程中，很多朋友帮我解答过很多的问题。</p><p>每次我的问题得到解答的时候，我都暗暗的告诉自己，<strong>这是一种”接力“，当我得到答案的时候，就是我拿到“接力棒”的时候，我有义务将“它”，传下去。</strong>所以遇到我能解决的问题，我一定乐意去帮别人解决。我将这当做感谢那些帮助过我的人的方式。</p><hr><blockquote><p><strong>关于笔记的几点说明：</strong></p></blockquote><ul><li><p>由于本人对php比较熟悉，但在学习es的过程中顺便学了点java，所以关于涉及到代码的地方，我会用curl、php和java三种方式实现（特殊情况特殊说明）。</p></li><li><p>对于ES本人也是新手，所以笔记会不断的完善。</p></li><li><p>整个《指南》肯定会涉及到一些其他地方找到的资料，我会尽量的表明出处，如果有遗漏，有侵权的，请提醒，一定及时删改。</p></li></ul><p><em><a href="http://www.jianshu.com/p/ede55b4110b1" target="_blank" rel="noopener">《elasticsearch非权威指南》目录</a></em><br><em>本笔记欢迎转载，欢迎分享，转载分享不用通知作者。不过，如果可以的话希望能注明出处，看完文章还能点个赞。</em></p>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch非权威指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WinSCP连接linux遇到的一个小问题</title>
      <link href="/2017/05/20/WinSCP%E8%BF%9E%E6%8E%A5linux%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
      <url>/2017/05/20/WinSCP%E8%BF%9E%E6%8E%A5linux%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>第一次在win上使用WinSCP来链接linux，遇到的一个小问题：<br>提示我：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">服务器拒绝了sftp连接，但它监听ftp连接.想要用ftp协议来代替sftp</span><br></pre></td></tr></table></figure><p>然后我将链接方式改成了ftp。又爆出另一个蛋疼的提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">由于目标机器积极拒绝，无法连接</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>两个提示都百度了一下，果然有很多答案，说是要关防火墙啊，改连接方式啊等等。满世界的答案都成功的避开了我遇到的问题。</p><p>纠结了很久，我考虑到WinSCP连接linux的原理是什么呢？再仔细想想自己哪一步可能漏掉？？</p><p>突然想起，这是自己新装的一个虚拟机，还没配SSH，难道是这个原因？？</p><p>果断的配上了SSH，发现果然OK了。果断的记录一下，如果也有新手跟我遇到同样的问题，就能有所帮助。</p><p>关于SSH可以参考另一篇文章：<a href="http://www.jianshu.com/writer#/notebooks/4873723/notes/4574585" target="_blank" rel="noopener">SSH原理和运用</a></p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch非权威指南目录</title>
      <link href="/2017/05/20/elasticsearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%9B%AE%E5%BD%95/"/>
      <url>/2017/05/20/elasticsearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>#<a href="http://www.jianshu.com/p/844892bd0dff" target="_blank" rel="noopener">写在开始的话</a></p><p>#<a href="http://www.jianshu.com/p/e8ee319a238d" target="_blank" rel="noopener">一、elasticsearch简介</a></p><p>##<a href="http://www.jianshu.com/p/4c56a271c5b8" target="_blank" rel="noopener">1、ES一些名词的解释</a></p><a id="more"></a><p>#二、elasticsearch及各种组件的安装</p><p>#三、es索引存储</p><p>#四、搜索查询</p><p>#五、集群管理</p><p>#六、其他</p>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch非权威指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH的原理和运用</title>
      <link href="/2017/05/20/SSH%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E8%BF%90%E7%94%A8/"/>
      <url>/2017/05/20/SSH%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E8%BF%90%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><strong> SSH(安全外壳协议) </strong>为 Secure Shell 的缩写，由 IETF 的网络小组（Network Working Group）所制定；SSH 为建立在应用层和传输层基础上的安全协议。SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。<br>利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。SSH最初是UNIX系统上的一个程序，后来又迅速扩展到其他操作平台。SSH在正确使用时可弥补网络中的漏洞。<br>SSH客户端适用于多种平台。几乎所有UNIX平台—包括HP-UX、Linux、AIX、Solaris、Digital   UNIX、Irix，以及其他平台，都可运行SSH。<a href="https://0x9.me/xuSFD" target="_blank" rel="noopener">百度百科:SSH</a><br><a id="more"></a></p><p>SSH是每一台Linux电脑的标准配置。<br>随着Linux设备从电脑逐渐扩展到手机、外设和家用电器，SSH的使用范围也越来越广。不仅程序员离不开它，很多普通用户也每天使用。<br>SSH具备多种功能，可以用于很多场合。有些事情，没有它就是办不成。本文是我的学习笔记，总结和解释了SSH的常见用法，希望对大家有用。</p><h2 id="1-SSH是什么"><a href="#1-SSH是什么" class="headerlink" title=" 1.SSH是什么 "></a><strong> 1.SSH是什么 </strong></h2><p>简单说，SSH是一种网络协议，用于计算机之间的加密登录。<br>如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露。  </p><h2 id="二、最基本的用法"><a href="#二、最基本的用法" class="headerlink" title="二、最基本的用法"></a><strong>二、最基本的用法</strong></h2><p>SSH主要用于远程登录。假定你要以用户名user，登录远程主机host，只要一条简单命令就可以了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh user@host</span><br></pre></td></tr></table></figure></p><p>如果本地用户名与远程用户名一致，登录时可以省略用户名。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh host</span><br></pre></td></tr></table></figure></p><p>SSH的默认端口是22，也就是说，你的登录请求会送进远程主机的22端口。使用p参数，可以修改这个端口。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -p 2222 user@host</span><br></pre></td></tr></table></figure></p><p>上面这条命令表示，ssh直接连接远程主机的2222端口。</p><h2 id="三、中间人攻击"><a href="#三、中间人攻击" class="headerlink" title="三、中间人攻击"></a><strong>三、中间人攻击</strong></h2><p>SSH之所以能够保证安全，原因在于它采用了公钥加密。<br>整个过程是这样的：</p><p>（1）远程主机收到用户的登录请求，把自己的公钥发给用户。</p><p>（2）用户使用这个公钥，将登录密码加密后，发送回来。</p><p>（3）远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。</p><p>这个过程本身是安全的，但是实施的时候存在一个风险：如果有人截获了登录请求，然后冒充远程主机，将伪造的公钥发给用户，那么用户很难辨别真伪。因为不像https协议，SSH协议的公钥是没有证书中心（CA）公证的，也就是说，都是自己签发的。<br>可以设想，如果攻击者插在用户与远程主机之间（比如在公共的wifi区域），用伪造的公钥，获取用户的登录密码。再用这个密码登录远程主机，那么SSH的安全机制就荡然无存了。这种风险就是著名的”中间人攻击”（Man-in-the-middle attack）。</p><p>SSH协议是如何应对的呢？</p><h2 id="四、口令登录"><a href="#四、口令登录" class="headerlink" title="四、口令登录"></a><strong>四、口令登录</strong></h2><p>如果你是第一次登录对方主机，系统会出现下面的提示：<br><code>$ ssh user@host　　The authenticity of host &#39;host (12.18.429.21)&#39; can&#39;t be established.　　RSA key fingerprint is 98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d.　　Are you sure you want to continue connecting (yes/no)?</code><br>  这段话的意思是，无法确认host主机的真实性，只知道它的公钥指纹，问你还想继续连接吗？<br>所谓”公钥指纹”，是指公钥长度较长（这里采用RSA算法，长达1024位），很难比对，所以对其进行MD5计算，将它变成一个128位的指纹。上例中是<code>98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d</code>，再进行比较，就容易多了。</p><p>  很自然的一个问题就是，用户怎么知道远程主机的公钥指纹应该是多少？回答是没有好办法，远程主机必须在自己的网站上贴出公钥指纹，以便用户自行核对。</p><p>假定经过风险衡量以后，用户决定接受这个远程主机的公钥。<br><code>Are you sure you want to continue connecting (yes/no)? yes</code></p><p>系统会出现一句提示，表示host主机已经得到认可。<br><code>Warning: Permanently added &#39;host,12.18.429.21&#39; (RSA) to the list of known hosts.</code></p><p>然后，会要求输入密码。<br><code>Password: (enter password)</code></p><p>如果密码正确，就可以登录了。<br>当远程主机的公钥被接受以后，它就会被保存在文件<code>$HOME/.ssh/known_hosts</code>之中。下次再连接这台主机，系统就会认出它的公钥已经保存在本地了，从而跳过警告部分，直接提示输入密码。</p><p>每个SSH用户都有自己的known_hosts文件，此外系统也有一个这样的文件，通常是<code>/etc/ssh/ssh_known_hosts</code>，保存一些对所有用户都可信赖的远程主机的公钥。</p><h2 id="五、公钥登录"><a href="#五、公钥登录" class="headerlink" title="五、公钥登录"></a><strong>五、公钥登录</strong></h2><p>使用密码登录，每次都必须输入密码，非常麻烦。好在SSH还提供了公钥登录，可以省去输入密码的步骤。</p><p>所谓”公钥登录”，原理很简单，就是用户将自己的公钥储存在远程主机上。登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录shell，不再要求密码。</p><p>这种方法要求用户必须提供自己的公钥。如果没有现成的，可以直接用ssh-keygen生成一个：<br><figure class="highlight plain"><figcaption><span>ssh-keygen```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  运行上面的命令以后，系统会出现一系列提示，可以一路回车。其中有一个问题是，要不要对私钥设置口令（passphrase），如果担心私钥的安全，这里可以设置一个。</span><br><span class="line"></span><br><span class="line">运行结束以后，在`$HOME/.ssh/`目录下，会新生成两个文件：`id_rsa.pub`和`id_rsa`。</span><br><span class="line">前者是你的公钥，后者是你的私钥。</span><br><span class="line"></span><br><span class="line">这时再输入下面的命令，将公钥传送到远程主机host上面：</span><br><span class="line"></span><br><span class="line">```$ ssh-copy-id user@host</span><br></pre></td></tr></table></figure></p><p>好了，从此你再登录，就不需要输入密码了。<br>如果还是不行，就打开远程主机的<code>/etc/ssh/sshd_config</code>这个文件，检查下面几行前面”#”注释是否取掉。<br><code></code>RSAAuthentication yes</p><p>PubkeyAuthentication yes </p><p>AuthorizedKeysFile .ssh/authorized_keys<br><code></code><br>然后，重启远程主机的ssh服务。</p><p>// ubuntu系统　　<code>service ssh restart</code></p><p>// debian系统　　<code>/etc/init.d/ssh restart</code></p><h2 id="六、authorized-keys文件"><a href="#六、authorized-keys文件" class="headerlink" title="六、authorized_keys文件"></a><strong>六、authorized_keys文件</strong></h2><p>远程主机将用户的公钥，保存在登录后的用户主目录的<code>$HOME/.ssh/authorized_keys</code>文件中。<br>公钥就是一段字符串，只要把它追加在<code>authorized_keys</code>文件的末尾就行了。</p><p>这里不使用上面的<code>ssh-copy-id</code>命令，改用下面的命令，解释公钥的保存过程：</p><p><code>$ ssh user@host &#39;mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys&#39; &lt; ~/.ssh/id_rsa.pub</code></p><p>这条命令由多个语句组成，依次分解开来看：</p><p>（1）”<code>$ ssh user@host</code>“，表示登录远程主机；</p><p>（2）单引号中的<code>mkdir .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys</code>，表示登录后在远程shell上执行的命令：</p><p>（3）”<code>$ mkdir -p .ssh</code>“的作用是，如果用户主目录中的.ssh目录不存在，就创建一个；</p><p>（4）<code>&#39;cat &gt;&gt; .ssh/authorized_keys&#39; &lt; ~/.ssh/id_rsa.pub</code>的作用是，将本地的公钥文件<code>~/.ssh/id_rsa.pub</code>，重定向追加到远程文件authorized_keys的末尾。</p><p>写入<code>authorized_keys</code>文件后，公钥登录的设置就完成了。</p><h2 id="拓展阅读："><a href="#拓展阅读：" class="headerlink" title="拓展阅读："></a>拓展阅读：</h2><p><a href="http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html" target="_blank" rel="noopener">数字签名是什么？</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何更改MySQL的datadir目录</title>
      <link href="/2017/05/20/%E5%A6%82%E4%BD%95%E6%9B%B4%E6%94%B9MySQL%E7%9A%84datadir%E7%9B%AE%E5%BD%95/"/>
      <url>/2017/05/20/%E5%A6%82%E4%BD%95%E6%9B%B4%E6%94%B9MySQL%E7%9A%84datadir%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>本人小白，遇到的问题也是小白的问题。写下心得是希望对其他的小白有所帮助。<br>这两天在倒腾一个比较大的数据库，（Ubuntu环境）发现虚拟机硬盘不够了，所以添加了一块。但是加了硬盘又涉及到了修改mysql数据库的datadir。<br>本以为只是简单的修改一下配置文件中的</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">datadir=“目录”</span><br></pre></td></tr></table></figure><p>就可以了。没想到修改后Mysql居然打不开了。<br><!--more--><br>于是又开始求助万能的百度:<code>如何修改Mysql的datadir目录</code>。结果还是有很多，但基本上是转载的同一篇文章。<br>说是要修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socket=/var/lib/mysql/mysql.sock //mysql配置文件my.cnf中的这个值</span><br></pre></td></tr></table></figure></p><p>还有修改mysql文件的所有者、权限等等。。ps：这一步还是有必要的。<br>还要修改一堆文件。比如<code>/etc/init.d/mysqld</code> 文件等等。秉着宁错过不放过的原则，我改改改。。然而还是没有什么用。。<br>反而把配置文件弄得乱七八糟。。<br>这时候，大神同事给了个建议，直接卸载了重装吧。<br>然后就百度了一下：<code>Ubuntu如何干净的卸载mysql?</code>，得到方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1、删除 mysql</span><br><span class="line">sudo apt-get autoremove --purge mysql-server-5.5</span><br><span class="line">sudo apt-get remove mysql-server</span><br><span class="line">sudo apt-get autoremove mysql-server</span><br><span class="line">sudo apt-get remove mysql-common (非常重要)</span><br><span class="line"></span><br><span class="line">2、清理残留数据</span><br><span class="line">dpkg -l |grep ^rc|awk &apos;&#123;print $2&#125;&apos; |sudo xargs dpkg -P</span><br><span class="line">在最后清理数据的时候会弹出一个对话框，问你是否要清除数据，清除就可以完全卸载了。</span><br></pre></td></tr></table></figure></p><p>然后又百度了一下：<code>Ubuntu安装mysql时如何修改datadir？</code><br>稍稍的改了一下找寻目标，结果就发现了一个和之前不一样的答案。</p><blockquote><p>#####关于如何更改datadir目录的问题：<br>ubuntu默认安装mysql的时候，会将datadir设置为<code>/var/lib/mysql</code>下面，但是我们大多数时候都需要指定一个我们准备好的方便查找的目录为数据存储目录，我们可以在<code>my.cnf</code>下面更改<code>datadir</code>这一行，将’<code>=</code>‘后边的目录更改成我们自己的目录即可。<br>    例如：我将datadir改成<code>/data</code>下，则在my.cnf中做如下更改，在<code>[mysqld]</code>段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">port            = 3306</span><br><span class="line">basedir         = /usr</span><br><span class="line">datadir         = /data/mysql</span><br></pre></td></tr></table></figure></p></blockquote><p>更改完成保存退出，可以重启mysql服务了，不知道您的服务器会不会报错，我的反正mysql是起不来了。只要将datadir换回来就能启动。出现这个问题的原因是在ubuntu中存在一个apparmor的服务。</p><p><b><i>这个服务主要作用是主要的作用是设置某个可执行程序的访问控制权限，可以限制程序 读/写某个目录/文件，打开/读/写网络端口等等。</i>(原来，我们虽然讲新的目录所有者改为了mysql,但我们没有告诉mysql要给新的目录什么权限，于是就悲剧了)</b></p><p>他的配置文件在<code>/etc/apparmor.d/</code>中，在这里我们可以看到一个<code>usr.sbin.mysqld</code>的配置文件，打开看一下就明白了。</p><p>我们的日志路径、pid路径等等都存放在这里，所以我们要改datadir路径，这里也需要做更改，要更改log路径同样也要在这里更改。更改后配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/logs/mysql/mysql.log rw,</span><br><span class="line">/logs/mysql/mysql.err.log rw,</span><br><span class="line">/data/mysql/ r,</span><br><span class="line">/data/mysql/** rwk,</span><br><span class="line">/logs/mysql/ r,</span><br><span class="line">/logs/mysql/* rw,</span><br></pre></td></tr></table></figure></p><p> 这是我更改过的路径。更改完成以后，因为这是一个服务，所以我们需要重启一下这个服务。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/apparmor restart</span><br></pre></td></tr></table></figure></p><p>这里基本上不会存在问题了，(我就是在这里重启了一下服务器，就OK了)，如果还是无法启动你的mysql，那么请使用如下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_install_db --datadir=/data/mysql</span><br></pre></td></tr></table></figure></p><p>查看一下是不是有报错信息，根据错误排查一下。</p><p>最终按照这个方法解决了问题。真是多谢前辈。<br>最后本人做个总结，只作为一种尝试解决方案：</p><blockquote><p>######将mysql默认的datadir目录”/var/lib/mysql”改为 “/home/mysql_data”</p></blockquote><p>1、关掉数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/mysql stop</span><br></pre></td></tr></table></figure></p><p>2、因为我们指定的数据库文件目录为/home/mysql_data<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /home                     //打开home</span><br><span class="line">mkdir mysql_data             //创建目录</span><br><span class="line">chown mysql:mysql mysql_data       //并修改其拥有者及所属群组为mysql:mysql.命令</span><br><span class="line">//修改mysql配置文件my.cnf：</span><br><span class="line">将 datadir=/var/lib/mysql 改为 datadir=/home/mysql_data</span><br></pre></td></tr></table></figure></p><p>3、修改ubuntu中的安全设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/apparmor.d/usr.sbin.mysqld </span><br><span class="line">在这个文件里面加入权限设定，将原来的</span><br><span class="line">/var/lib/mysql/ r,</span><br><span class="line">/var/lib/mysql/** rwk,</span><br><span class="line">更换成(或直接添加)</span><br><span class="line">/home/mysql_data/mysql/ r,</span><br><span class="line">/home/mysql_data/mysql/** rwk,</span><br></pre></td></tr></table></figure></p><p>4、重新初始化数据文件：执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql_install_data</span><br></pre></td></tr></table></figure></p><p>5、启动mysql数据库服务(或重启服务器)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/mysql start</span><br></pre></td></tr></table></figure></p><p>这个方法中最值得一提是修改<code>/etc/apparmor.d/usr.sbin.mysqld</code>这个文件，改变应用程序的权限。这种配置权限方式让我这个小白对linux权限的理解又深刻了不少。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> 数据库 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch名词解释</title>
      <link href="/2017/05/20/ES%E4%B8%80%E4%BA%9B%E5%90%8D%E8%AF%8D%E7%9A%84%E8%A7%A3%E9%87%8A/"/>
      <url>/2017/05/20/ES%E4%B8%80%E4%BA%9B%E5%90%8D%E8%AF%8D%E7%9A%84%E8%A7%A3%E9%87%8A/</url>
      
        <content type="html"><![CDATA[<p>本来这个打算后面再来写的，看到简书上一个朋友归纳好了，我就直接借过来了。</p><h2 id="数据层面："><a href="#数据层面：" class="headerlink" title="数据层面："></a>数据层面：</h2><blockquote><p><strong>Index</strong>：Elasticsearch用来存储数据的逻辑区域，它类似于关系型数据库中的db概念。一个index可以在一个或者多个shard上面，同时一个shard也可能会有多个replicas。</p></blockquote><a id="more"></a><blockquote><p><strong> Document type</strong>：为了查询需要，一个index可能会有多种类型document，也就是会有多个         document type，但需要注意，不同的document type里面同名的field一定要是相同类型的。</p></blockquote><blockquote><p><strong>Document</strong>：Elasticsearch里面存储的实体数据，类似于关系数据中一个table里面的一行数据。</p></blockquote><blockquote><p><strong>field：</strong>document由多个field组成，不同类型的document里面同名的field一定具有相同的类型。</p></blockquote><blockquote><p><strong>multivalued</strong>： document里面field可以重复出现，也就是一个field会有多个值，即multivalued。</p></blockquote><blockquote><p><strong>Mapping</strong>：存储field的相关映射信息，不同document type会有不同的mapping。</p></blockquote><ul><li><em>对于熟悉MySQL的童鞋，我们只需要大概认为Index就是一个database，document就是一行数据，field就是table的column，mapping就是table的定义，而document type就是一个table就可以了。</em></li></ul><hr><p><em><a href="http://www.jianshu.com/p/ede55b4110b1" target="_blank" rel="noopener">《elasticsearch学习笔记》目录</a></em><br><em>本笔记欢迎转载，欢迎分享，转载分享不用通知作者。不过，如果可以的话希望能注明出处，看完文章还能点个赞。</em></p>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch非权威指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用php验证一个字符串是否符合4则运算</title>
      <link href="/2017/05/20/%E7%94%A8php%E9%AA%8C%E8%AF%81%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%90%A6%E7%AC%A6%E5%90%884%E5%88%99%E8%BF%90%E7%AE%97/"/>
      <url>/2017/05/20/%E7%94%A8php%E9%AA%8C%E8%AF%81%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%90%A6%E7%AC%A6%E5%90%884%E5%88%99%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<p>实际项目中遇到的一个问题。<br>如何实现Google高级查询的字段解析功能。  </p><p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$expression = &quot;(张三-(赵六|田七))+朱八&quot;;</span><br></pre></td></tr></table></figure></p><p>需要解析成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and(张三，朱八) not( or(赵六，田七))</span><br></pre></td></tr></table></figure></p><blockquote><p>解决思路是：<br>先判断是否符合+|-三种运算语法。<br>如果符合，再将内容解析转换为<code>逆波兰式</code>。<br>最后拼接查询语句。</p></blockquote><p>检测代码如下：</p><a id="more"></a><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 验证关键字是不是符合四则运算</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">check_bool</span><span class="params">($keyword)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       $k = $keyword != <span class="string">""</span> ? $keyword : <span class="keyword">die</span>(<span class="string">'关键字不能为空'</span>);</span><br><span class="line">       <span class="comment">//剔除空白字符</span></span><br><span class="line">       str_replace(<span class="string">" "</span>, <span class="string">""</span>, $k);</span><br><span class="line">       <span class="comment">//符号连续的情况</span></span><br><span class="line">       <span class="keyword">if</span> (preg_match(<span class="string">"/[\+\-\|]&#123;2,&#125;/"</span>, $k)) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       &#125;;</span><br><span class="line">       <span class="comment">//空括号的情况</span></span><br><span class="line">       <span class="keyword">if</span> (preg_match(<span class="string">"/\(\)/"</span>, $k)) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//括号不配对</span></span><br><span class="line">       $stack = [];</span><br><span class="line">       <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; strlen($k); $i++) &#123;</span><br><span class="line">           $item = substr($k, $i, <span class="number">1</span>);</span><br><span class="line">           <span class="keyword">if</span> (<span class="string">'('</span> === $item) &#123;</span><br><span class="line">               array_push($stack, <span class="string">'('</span>);</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">')'</span> === $item) &#123;</span><br><span class="line">               <span class="keyword">if</span> (count($stack) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                   array_pop($stack);</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (<span class="number">0</span> !== count($stack)) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 错误情况，(后面是运算符</span></span><br><span class="line">       <span class="keyword">if</span> (preg_match(<span class="string">"/\([\+\-\|]/"</span>, $k)) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 错误情况，)前面是运算符</span></span><br><span class="line">       <span class="keyword">if</span> (preg_match(<span class="string">"/[\+\-\|]\)/"</span>, $k)) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 错误情况，(前面不是运算符</span></span><br><span class="line">       <span class="keyword">if</span> (preg_match(<span class="string">"/[^\+\-\|]\(/"</span>, $k)) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 错误情况，)后面不是运算符</span></span><br><span class="line">       <span class="keyword">if</span> (preg_match(<span class="string">"/\)[^\+\-\|]/"</span>, $k)) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//没有除了符号外的关键字</span></span><br><span class="line">       <span class="comment">//切割</span></span><br><span class="line">       $tmp_str = preg_replace(<span class="string">'/[\(\)\+\-\|]&#123;1,&#125;/'</span>, <span class="string">'`'</span>, $k);</span><br><span class="line">       $arr = explode(<span class="string">'`'</span>, $tmp_str);</span><br><span class="line">       <span class="comment">//清除空的数量</span></span><br><span class="line">       $keys = array_keys($arr, <span class="string">''</span>);</span><br><span class="line">       <span class="keyword">if</span> (!<span class="keyword">empty</span>($keys)) &#123;</span><br><span class="line">           <span class="keyword">foreach</span> ($keys <span class="keyword">as</span> $key) &#123;</span><br><span class="line">               <span class="keyword">unset</span>($arr[$key]);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//如果删除后只剩一个，</span></span><br><span class="line">       <span class="keyword">if</span> (count($arr) &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; count($arr); $i++) &#123;</span><br><span class="line">           <span class="keyword">if</span> ((<span class="number">1</span> &lt; $i) &amp;&amp; ($i &lt; count($arr) - <span class="number">1</span>)) &#123;</span><br><span class="line">               <span class="keyword">if</span> (preg_match(<span class="string">"/^[\x&#123;4e00&#125;-\x&#123;9fa5&#125;a-zA-Z0-9]+$/"</span>, $arr[$i]) || $arr[$i] == <span class="string">''</span>) &#123;</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">//var_dump($arr[$i]);</span></span><br><span class="line">               <span class="keyword">if</span> (preg_match(<span class="string">"/^[\x&#123;4e00&#125;-\x&#123;9fa5&#125;a-zA-Z0-9]+$/"</span>, $arr[$i]) &amp;&amp; $arr[$i] != <span class="string">''</span>) &#123;</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试实例</span></span><br><span class="line">$expression = <span class="string">"(A+(BXXX|CXXX)-EXXX+F)-111-211111"</span>;</span><br><span class="line"><span class="comment">//$expression = "(张三-(李四-王五)-(赵六|田七))-朱八";</span></span><br><span class="line">var_dump(check_bool($expression));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES2.3.3单机点集群的安装</title>
      <link href="/2017/05/20/ES2.3.3%E5%8D%95%E6%9C%BA%E7%82%B9%E9%9B%86%E7%BE%A4%E7%9A%84%E5%AE%89%E8%A3%85/"/>
      <url>/2017/05/20/ES2.3.3%E5%8D%95%E6%9C%BA%E7%82%B9%E9%9B%86%E7%BE%A4%E7%9A%84%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>本文介绍在一个机器上，安装三个节点Elasticsearch，并自动组成集群的方式。</p><a id="more"></a><h2 id="第一步：准备工作"><a href="#第一步：准备工作" class="headerlink" title="第一步：准备工作"></a>第一步：准备工作</h2><p>我们先准备三个目录，分别如下</p><p><code>/usr/es</code>， <code>/usr/es2</code>， <code>/usr/es3</code></p><p>每个目录下，都方式一份默认的 Elasticsearch 2.3.3 解压后的文件。</p><h2 id="第二步：修改Elasticsearch-2-3-3的配置文件"><a href="#第二步：修改Elasticsearch-2-3-3的配置文件" class="headerlink" title="第二步：修改Elasticsearch 2.3.3的配置文件"></a>第二步：修改Elasticsearch 2.3.3的配置文件</h2><p>网上很多的文章都说不用修改文件即可，有个前提是版本是ES 1.x</p><p>修改config下的<code>elasticserach.yml</code>文件。这个配置文件非常的重要，也是我们后面在不断深入学习中会一直伴随的一个文件。</p><p>主要修改以下内容：</p><p>节点名称：<code>node.name</code>：</p><p>对外服务的http端口，默认为9200：<code>http.port</code>  </p><p>节点间交互的tcp端口,默认为9300：<code>transport.tcp.port</code></p><p>集群中master节点的初始列表，这个必须要设置，因为ES 2.X默认是节点单播发现模式，而不是广播发现模式：<code>discovery.zen.ping.unicast.hosts</code></p><p>那么修改完的结果如下：</p><blockquote><p>节点一：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">node.name: node1  </span><br><span class="line">http.port: 9200   </span><br><span class="line">transport.tcp.port: 9300  </span><br><span class="line">discovery.zen.ping.unicast.hosts :[&apos;127.0.0.1&apos;,&apos;127.0.0.1&apos;]</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>节点二：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">node.name: node2</span><br><span class="line">http.port: 9202 </span><br><span class="line">transport.tcp.port: 9302</span><br><span class="line">discovery.zen.ping.unicast.hosts :[&apos;127.0.0.1&apos;,&apos;127.0.0.1:9203&apos;]</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>节点三：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">node.name: node3</span><br><span class="line">http.port: 9203 </span><br><span class="line">transport.tcp.port: 9303</span><br><span class="line">discovery.zen.ping.unicast.hosts :[&apos;127.0.0.1&apos;,&apos;127.0.0.1:9202&apos;]</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="第三步：启动"><a href="#第三步：启动" class="headerlink" title="第三步：启动"></a>第三步：启动</h2><p>按顺序依次启动ES2,ES3,ES。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/elasticsearch -d</span><br></pre></td></tr></table></figure><h2 id="第四步：验证："><a href="#第四步：验证：" class="headerlink" title="第四步：验证："></a>第四步：验证：</h2><p>新打开一个窗口,输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET &apos;http://localhost:9200/_cluster/health?pretty=true&apos;</span><br></pre></td></tr></table></figure></p><p>这个时候，我们就看到了上面的内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&quot;cluster_name&quot; : &quot;elasticsearch&quot;, //集群名称，默认是elasticserarch</span><br><span class="line">&quot;status&quot; : &quot;green&quot;,  // 集群的状态，有三个值，green表示正常</span><br><span class="line">&quot;timed_out&quot; : false,  //是否超时，</span><br><span class="line">&quot;number_of_nodes&quot; : 3,//节点个数</span><br><span class="line">&quot;number_of_data_nodes&quot; : 3,//数据节点个数</span><br><span class="line">&quot;active_primary_shards&quot; : 0,//主分片，因为我们尚未创建索引，所以个数是零，默认是5</span><br><span class="line">&quot;active_shards&quot; : 0,//从分片，即复制的分片，默认是一个从复制，所以默认的复制分片也是5.</span><br><span class="line">&quot;relocating_shards&quot; : 0,</span><br><span class="line">&quot;initializing_shards&quot; : 0,</span><br><span class="line">&quot;unassigned_shards&quot; : 0,</span><br><span class="line">&quot;delayed_unassigned_shards&quot; : 0,</span><br><span class="line">&quot;number_of_pending_tasks&quot; : 0,</span><br><span class="line">&quot;number_of_in_flight_fetch&quot; : 0,</span><br><span class="line">&quot;task_max_waiting_in_queue_millis&quot; : 0,</span><br><span class="line">&quot;active_shards_percent_as_number&quot; : 100.0</span><br></pre></td></tr></table></figure></p><p>看到了这些内容，就表示单机器多节点集群搭建成功，并运行成功！</p>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch非权威指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elasticsearch各种组件的安装_head_kopf_bigdesk</title>
      <link href="/2017/05/20/elasticsearch%E5%8F%8A%E5%90%84%E7%A7%8D%E7%BB%84%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85/"/>
      <url>/2017/05/20/elasticsearch%E5%8F%8A%E5%90%84%E7%A7%8D%E7%BB%84%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="一、安装Elasticsearch-Head"><a href="#一、安装Elasticsearch-Head" class="headerlink" title="一、安装Elasticsearch-Head"></a>一、安装Elasticsearch-Head</h2><h3 id="1-插件安装方式（推荐）"><a href="#1-插件安装方式（推荐）" class="headerlink" title="1.插件安装方式（推荐）"></a>1.插件安装方式（推荐）</h3><p>在Elasticsearch目录下<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">/bin/plugin install mobz/elasticsearch-head</span></span><br></pre></td></tr></table></figure></p><p>如果提示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR: unknown command [-install]. Use [-h] option to list available commands</span><br></pre></td></tr></table></figure></p><p>是因为好像2.0以上的版本-install 变成了 install了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elasticsearch/bin/plugin install mobz/elasticsearch-head</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2-下载安装方式"><a href="#2-下载安装方式" class="headerlink" title="2.下载安装方式"></a>2.下载安装方式</h3><p>从<a href="https://github.com/mobz/elasticsearch-head" target="_blank" rel="noopener">https://github.com/mobz/elasticsearch-head</a>下载ZIP包。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./plugin install file:///Users/Richard/Downloads/elasticsearch-head-master.zip</span><br></pre></td></tr></table></figure></p><p>二、重启Elasticsearch。访问。<br>访问地址是： <code>http://{你的ip地址}:9200/_plugin/head/</code></p><p><code>http</code>  端口默认是: <code>9200</code> 。 </p><h2 id="二、安装Elasticsearch-kopf"><a href="#二、安装Elasticsearch-kopf" class="headerlink" title="二、安装Elasticsearch-kopf"></a>二、安装Elasticsearch-kopf</h2><h3 id="1-插件安装方式（推荐）-1"><a href="#1-插件安装方式（推荐）-1" class="headerlink" title="1.插件安装方式（推荐）"></a>1.插件安装方式（推荐）</h3><p>在Elasticsearch目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/plugin install lmenezes/elasticsearch-kopf/&#123;branch|version&#125;</span><br></pre></td></tr></table></figure><p>支持版本表<br>| elasticsearch   | version branch    |   latest version<br>| — | — |  — |<br>0.90.X          |   0.90            |   v0.90<br>1.X             |   1.0             |   v1.6.1<br>2.X             |   2.0             |   v2.1.1  </p><h3 id="2-下载安装方式-1"><a href="#2-下载安装方式-1" class="headerlink" title="2.下载安装方式"></a>2.下载安装方式</h3><p>从<a href="https://github.com/lmenezes/elasticsearch-kopf" target="_blank" rel="noopener">https://github.com/lmenezes/elasticsearch-kopf</a>下载ZIP包。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo ./plugin install file:///dir/elasticsearch-kopf.zip</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 三、安装Elasticsearch-Bigdesk</span><br><span class="line"></span><br><span class="line">###  1.插件安装方式（推荐）</span><br><span class="line">在Elasticsearch目录下</span><br></pre></td></tr></table></figure></p><p>./bin/plugin install hlstudio/bigdesk<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2.下载安装方式</span><br><span class="line">从[https://github.com/hlstudio/bigdesk](https://github.com/hlstudio/bigdesk)下载ZIP包。</span><br></pre></td></tr></table></figure></p><p>sudo ./plugin install file:///dir/elasticsearch-kopf.zip<br><code>`</code></p>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch非权威指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简述应用程序接口(API)</title>
      <link href="/2017/05/20/%E7%AE%80%E8%BF%B0%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%8F%A3(API)/"/>
      <url>/2017/05/20/%E7%AE%80%E8%BF%B0%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%8F%A3(API)/</url>
      
        <content type="html"><![CDATA[<p>写下这个文章的原因是,我发现身边一些的朋友可能是因为之前没有接触过API,以至于对API有些不解和抵触.<br>因为微信开发/地图定位/各种大数据的信息查询,让接口(api)成为了一个非常常用的工具.这篇文章是我自己的一些理解,由于本人也是个小白,肯定有很多地方不到位,希望能指出.首先,我们从API是什么开始说.</p><h2 id="1-API是什么"><a href="#1-API是什么" class="headerlink" title="1.API是什么?"></a>1.API是什么?</h2><blockquote><p><strong>维基百科的解释是:</strong><br>应用程序接口 (<strong>A</strong>pplication <strong>P</strong>rogramming <strong>I</strong>nterface 简称:API)为：“‘电脑<a href="https://zh.wikipedia.org/wiki/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener">操作系统</a>（Operating system）’或‘<a href="https://zh.wikipedia.org/wiki/%E5%87%BD%E5%BC%8F%E5%BA%AB" target="_blank" rel="noopener">程序库</a>’提供给应用程序调用使用的代码”。其主要目的是让应用程序开发人员得以调用一组<a href="https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6" target="_blank" rel="noopener">例程</a>)功能，而无须考虑其底层的源代码为何、或理解其内部工作机制的细节。<br> API本身是<a href="https://zh.wikipedia.org/w/index.php?title=%E6%8A%BD%E8%B1%A1_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8" target="_blank" rel="noopener">抽象</a>&amp;action=edit&amp;redlink=1)的，它仅定义了一个<a href="https://zh.wikipedia.org/wiki/%E4%BB%8B%E9%9D%A2_(%E9%9B%BB%E8%85%A6%E7%A7%91%E5%AD%B8" target="_blank" rel="noopener">接口</a>)，而不涉及应用程序在实际实现过程中的具体操作。</p></blockquote><a id="more"></a><h2 id="2-简单举例"><a href="#2-简单举例" class="headerlink" title="2.简单举例"></a>2.简单举例</h2><p>简而言之接口就是一个抽象的,不需要考虑内部细节的东西.你拿来用就可以了.这么讲可能抽象了一些,我们举个例子:</p><p>以百度地图IP定位的API为例:  </p><p><strong>服务地址:</strong><br><code>http://api.map.baidu.com/location/ip</code></p><p><strong>接口参数:</strong><br><img src="http://upload-images.jianshu.io/upload_images/2229907-54cc1480dbcdce86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="百度地图接口参数"></p><p><strong>返回结果:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   address: &quot;CN|北京|北京|None|CHINANET|1|None&quot;, #地址 </span><br><span class="line">   content: #详细内容 </span><br><span class="line">       &#123; address: &quot;北京市&quot;, #简要地址 </span><br><span class="line">         address_detail: #详细地址信息 </span><br><span class="line">            &#123; city: &quot;北京市&quot;, #城市 </span><br><span class="line">            city_code: 131, #百度城市代码 </span><br><span class="line">            district: &quot;&quot;, #区县 </span><br><span class="line">            province: &quot;北京市&quot;, #省份 </span><br><span class="line">            street: &quot;&quot;, #街道 </span><br><span class="line">            street_number: &quot;&quot; #门址 </span><br><span class="line">            &#125;, point: #百度经纬度坐标值 </span><br><span class="line">            &#123; x: &quot;116.39564504&quot;, y: &quot;39.92998578&quot; </span><br><span class="line">            &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">     status: 0 #返回状态码 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><u>那么,服务地址/接口参数/返回结果分别是什么意思呢?</u>   </p><p>我们一一来理解:<br><strong>服务地址:</strong> 即我们需要数据请求的页面地址.  </p><p><strong>请求参数：</strong> 有的时候我们不只从接口上取值,我们还需要用一种特殊的方式告诉服务器,我们需要什么数据,你给我们需要的就可以了,别瞎给.这种方式通常是URL传参的形式.比如百度的这个api就可以这样传. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://api.map.baidu.com/location/ip?ak=E4805d16520de693a3fe707cdc962045&amp;ip=202.198.16.3&amp;coor=bd09ll</span><br></pre></td></tr></table></figure><p>通过url,我们告诉百度,<br>我们的<code>ak(access key</code>)是:<code>E48....62045</code>,<br>我们要定位的<code>ip</code>是:<code>202.198.16.3</code>,<code>coor</code>是:<code>bd09ll</code>(告诉百度我们需要经纬坐标).</p><p>这就是一中最最常用的使用API的方式.</p><p><strong>返回结果</strong> 上面我们通过URL传参的方式告诉了百度服务器,我们需要的是IP为<code>202.198.16.3</code>的位置信息,而且需要经纬坐标值(<code>coor=bd09ll</code>),并且我们的Ak值是对的,</p><p>这时候,百度就会输出一个结果在页面里,通常是JSON字符串的形式.如:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  address: "CN|吉林|长春|None|CERNET|1|None", </span><br><span class="line">  content: &#123; </span><br><span class="line">    address: "吉林省长春市", </span><br><span class="line">    address_detail: &#123; </span><br><span class="line">      city: "长春市", </span><br><span class="line">      city_code: 53, </span><br><span class="line">      district: "", </span><br><span class="line">      province: "吉林省", </span><br><span class="line">      street: "", </span><br><span class="line">      street_number: "" </span><br><span class="line">    &#125;, </span><br><span class="line">    point: &#123; </span><br><span class="line">      x: "125.31364243", y: "43.89833761" </span><br><span class="line">    &#125; </span><br><span class="line">  &#125;, status: 0 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以通过读取url页面的形式来获取返回的json字符串.再应用到我们的项目中.  </p><p><strong><em>上述就是一个最简单的API使用,也是最本质/常用的一种.(传值和取值)</em></strong></p><hr><p>从上面的例子中,我们就可以知道,为什么API不需要考虑程序的内部细节了吧?其实它就好像一个封装好的电池,我们放到卡槽里用就行了,不需要去了解内部结构.</p><h2 id="3-写一个简单的API"><a href="#3-写一个简单的API" class="headerlink" title="3.写一个简单的API"></a>3.写一个简单的API</h2><p>对于大型的API内部封装的算法是非常复杂的.</p><p>但它的原理并不难,我们自己就可以尝试着写上一个小小的API.这里我给个例子:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#假设存为index.php到根目录</span></span><br><span class="line">header (<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">$con = mysql_connect(<span class="string">"localhost"</span>,<span class="string">"root"</span>,<span class="string">"root"</span>);</span><br><span class="line"><span class="keyword">if</span> (!$con)</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">'Could not connect: '</span> . mysql_error());</span><br><span class="line">  &#125;</span><br><span class="line">mysql_select_db(<span class="string">'chaxun'</span>,$con);</span><br><span class="line">$token=<span class="keyword">isset</span>($_GET[<span class="string">'token'</span>])?$_GET[<span class="string">'token'</span>]:<span class="string">"1"</span>;</span><br><span class="line"><span class="keyword">if</span> ($token==<span class="number">123</span>) &#123;</span><br><span class="line">$sql=<span class="string">"SELECT * FROM data;"</span>;</span><br><span class="line">$result = mysql_query($sql);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>($row = mysql_fetch_array($result, MYSQL_ASSOC))&#123;</span><br><span class="line">    $rst[]=$row;</span><br><span class="line">&#125;</span><br><span class="line">$rst_json = json_encode($rst);</span><br><span class="line"><span class="keyword">echo</span> $rst_json;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"token错误!"</span>;</span><br><span class="line">&#125;</span><br><span class="line">mysql_close();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>上面的例子,  </p><p>我们API服务地址就是:<code>http://localhost/index.php</code>  </p><p>接口参数我们需要传一个<code>token=123</code>  </p><p>返回结果就是一个查询数据库的结果,转换的json字符串.  </p><p>完整的url拼起来就是:<code>http://localhost/index.php?token=123</code>  </p><p>看吧,其实写个接口就这么简单.  </p><p>好困,睡了,明天再来补完整.  </p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop+Hbase+ZooKeeper集群搭建方法</title>
      <link href="/2017/05/20/Hadoop+Hbase+ZooKeeper%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E6%96%B9%E6%B3%95/"/>
      <url>/2017/05/20/Hadoop+Hbase+ZooKeeper%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><a href="http://archive.apache.org/dist/hadoop/common/" target="_blank" rel="noopener">hadoop的下载地址</a><br><a href="http://archive.apache.org/dist/hbase/" target="_blank" rel="noopener">hbase的下载地址</a><br><a href="http://archive.apache.org/dist/hadoop/zookeeper/" target="_blank" rel="noopener">zookeeper的下载地址</a></p><hr><h2 id="1、-主机配置如下："><a href="#1、-主机配置如下：" class="headerlink" title="1、 主机配置如下："></a>1、 主机配置如下：</h2><p>（添加到/etc/hosts文件里面）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">192.168.0.211 master  </span><br><span class="line">#（用于集群主机提供hmaster namenode jobtasker服务 ）  </span><br><span class="line">192.168.0.212 s1      </span><br><span class="line">#(用于集群丛机提供regionsrever datanode tasktacuter服务)  </span><br><span class="line">192.168.0.213 s2</span><br></pre></td></tr></table></figure></p><a id="more"></a><h2 id="2、安装jdk1-6-2-X"><a href="#2、安装jdk1-6-2-X" class="headerlink" title="2、安装jdk1.6.2.X"></a>2、安装jdk1.6.2.X</h2><h2 id="3、添加java环境变量"><a href="#3、添加java环境变量" class="headerlink" title="3、添加java环境变量"></a>3、添加java环境变量</h2><p>（<code>/etc/profile</code>），后执行source /etc/profile ,使环境变量立即生效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/java/jdk1.6.0_26/  #java 的目录</span><br><span class="line">export CLASSPATH=$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/lib  </span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH:$CATALINA_HOME/bin  </span><br><span class="line">export HADOOP_HOME=/home/hadoop/hadoop  </span><br><span class="line">export HBASE_HOME=/home/hadoop/hbase  </span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HBASE_HOME/bin</span><br></pre></td></tr></table></figure></p><h2 id="4、在三台电脑上添加hadoop用户"><a href="#4、在三台电脑上添加hadoop用户" class="headerlink" title="4、在三台电脑上添加hadoop用户"></a>4、在三台电脑上添加hadoop用户</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd hadoop</span><br></pre></td></tr></table></figure><h2 id="5、在-home-hadoop-bashrc添加变量"><a href="#5、在-home-hadoop-bashrc添加变量" class="headerlink" title="5、在/home/hadoop/.bashrc添加变量"></a>5、在<code>/home/hadoop/.bashrc</code>添加变量</h2><ul><li><u>(将hadoop hbase的配置文件放到hadoop安装包根目录文件下，目的在于以后升级hadoop和hbase的时候不用重新导入配置文件)</u><br>*<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export HADOOP_CONF_DIR=/home/hadoop/hadoop-config  </span><br><span class="line">export HBASE_CONF_DIR=/home/hadoop/hbase-config</span><br></pre></td></tr></table></figure></li></ul><h2 id="6、将hadoop-hbase-zookepper的安装包解压"><a href="#6、将hadoop-hbase-zookepper的安装包解压" class="headerlink" title="6、将hadoop hbase zookepper的安装包解压"></a>6、将hadoop hbase zookepper的安装包解压</h2><p>到<code>/home/hadoop/</code>下，<u>并重命名</u>为<code>hadoop hbase zookepper</code>，在<code>home/hadoop/</code>下建立<code>hadoop-config</code>和<code>hbase-config</code>文件夹，并且将<code>home/hadoop/hadoop/conf</code>下的<code>masters、slaves、core-site、mapred-sit、hdfs-site、hadoop-env</code>拷贝到此文件夹，将<code>home/hadoop/hbase/conf</code>下的<code>hbase-site</code>和<code>hbase-env.sh</code>拷贝到次文件夹。</p><h2 id="7、修改masters、slaves文件："><a href="#7、修改masters、slaves文件：" class="headerlink" title="7、修改masters、slaves文件："></a>7、修改masters、slaves文件：</h2><p> 分别为 <code>master</code> 和<code>s1</code>与<code>s2</code></p><h2 id="8、修改hadoop-env-sh的变量："><a href="#8、修改hadoop-env-sh的变量：" class="headerlink" title="8、修改hadoop-env.sh的变量："></a>8、修改<code>hadoop-env.sh</code>的变量：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/java/jdk1.6.0_26/  </span><br><span class="line">export HADOOP_PID_DIR=/home/hadoop/hadoop/tmp</span><br></pre></td></tr></table></figure><p>##9、修改<code>core-site.xml</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt; </span><br><span class="line">&lt;property&gt; </span><br><span class="line">&lt;name&gt;fs.default.name&lt;/name&gt; </span><br><span class="line">&lt;value&gt;hdfs://master:9000&lt;/value&gt; </span><br><span class="line">&lt;/property&gt; </span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p><p>修改<code>mapred-site.xml</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt; </span><br><span class="line">&lt;property&gt; </span><br><span class="line">   &lt;name&gt;mapred.job.tracker&lt;/name&gt; </span><br><span class="line">   &lt;value&gt;hdfs://master:9001/&lt;/value&gt; </span><br><span class="line">&lt;/property&gt;  </span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p><p>修改<code>hdfs-site.xml</code>（<u>name和data文件夹不要手动建立</u>）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt; </span><br><span class="line">&lt;property&gt; </span><br><span class="line">&lt;name&gt;dfs.name.dir&lt;/name&gt; </span><br><span class="line">&lt;value&gt;/home/hadoop/hadoop/name&lt;/value&gt; </span><br><span class="line">&lt;/property&gt; </span><br><span class="line">&lt;property&gt; </span><br><span class="line">&lt;name&gt;dfs.data.dir&lt;/name&gt; </span><br><span class="line">&lt;value&gt;/home/hadoop/hadoop/data/&lt;/value&gt; </span><br><span class="line">&lt;/property&gt; </span><br><span class="line">&lt;property&gt; </span><br><span class="line">   &lt;name&gt;dfs.replication&lt;/name&gt; </span><br><span class="line">   &lt;value&gt;3&lt;/value&gt; </span><br><span class="line">&lt;/property&gt; </span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p><h2 id="10、设置master-s1-s2机几台器之间无密码访问："><a href="#10、设置master-s1-s2机几台器之间无密码访问：" class="headerlink" title="10、设置master, s1, s2机几台器之间无密码访问："></a>10、设置master, s1, s2机几台器之间无密码访问：</h2><h2 id="11、复制目录至集群丛机"><a href="#11、复制目录至集群丛机" class="headerlink" title="11、复制目录至集群丛机"></a>11、复制目录至集群丛机</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r /home/hadoop/hadoop s1:/home/hadoop</span><br><span class="line">scp -r /home/hadoop/hadoop s2:/home/hadoop</span><br></pre></td></tr></table></figure><h2 id="12、切换到-home-hadoop-hadoop目录下"><a href="#12、切换到-home-hadoop-hadoop目录下" class="headerlink" title="12、切换到/home/hadoop/hadoop目录下"></a>12、切换到<code>/home/hadoop/hadoop</code>目录下</h2><p>执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hadoop namenode -format</span><br></pre></td></tr></table></figure><p>(格式化master主机生成name data tmp等文件夹)</p><h2 id="13、启动namenode"><a href="#13、启动namenode" class="headerlink" title="13、启动namenode"></a>13、启动namenode</h2><p>执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/start-dfs.sh</span><br></pre></td></tr></table></figure></p><p>使用jps命令查看<code>namenode、secondnamenode</code>是否正常启动：<br>ie里面输入<a href="http://master:50070" target="_blank" rel="noopener">http://master:50070</a> 查看<code>namenode</code>的相关配置信息、运行状态和日志文件</p><h2 id="14、启动mapred"><a href="#14、启动mapred" class="headerlink" title="14、启动mapred"></a>14、启动<code>mapred</code></h2><p>执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/start-mapred.sh</span><br></pre></td></tr></table></figure></p><p>使用<code>jps</code>命令查看<code>nomenode、secondnamenode</code>是否正常启动：<br>ie里面输入<a href="http://master:50030" target="_blank" rel="noopener">http://master:50030</a>  查看jobtasker的相关配置信息、运行状态和日志文件</p><hr><h1 id="hbase-zookeeper集群搭建："><a href="#hbase-zookeeper集群搭建：" class="headerlink" title="hbase+zookeeper集群搭建："></a>hbase+zookeeper集群搭建：</h1><h2 id="1、复制目录修改文件"><a href="#1、复制目录修改文件" class="headerlink" title="1、复制目录修改文件"></a>1、复制目录修改文件</h2><p>将<code>/home/hadoop/hadoop/conf/</code>目录下的<code>hbase-site.xml、regionserver和hbase-env.sh</code>拷贝到<code>/home/hadoop/hbase-config/</code>目录下；<br>编辑<code>hbase-site.xml</code>配置文件，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt; </span><br><span class="line">&lt;name&gt;hbase.rootdir&lt;/name&gt; </span><br><span class="line">&lt;value&gt;hdfs://master:9000/hbase&lt;/value&gt; </span><br><span class="line">&lt;/property&gt; </span><br><span class="line">&lt;property&gt; </span><br><span class="line">&lt;name&gt;hbase.cluster.distributed&lt;/name&gt; </span><br><span class="line">&lt;value&gt;true&lt;/value&gt; </span><br><span class="line">&lt;/property&gt; </span><br><span class="line">&lt;property&gt; </span><br><span class="line">&lt;name&gt;hbase.master&lt;/name&gt; </span><br><span class="line">&lt;value&gt;master&lt;/value&gt; </span><br><span class="line">&lt;/property&gt; </span><br><span class="line">&lt;property&gt; </span><br><span class="line">&lt;name&gt;hbase.zookeeper.quorum&lt;/name&gt; </span><br><span class="line">&lt;value&gt;s1,s2&lt;/value&gt; </span><br><span class="line">&lt;/property&gt; </span><br><span class="line">&lt;property&gt; </span><br><span class="line">&lt;name&gt;zookeeper.session.timeout&lt;/name&gt; </span><br><span class="line">&lt;value&gt;60000000&lt;/value&gt; </span><br><span class="line">&lt;/property&gt; </span><br><span class="line">&lt;property&gt; </span><br><span class="line">&lt;name&gt;hbase.zookeeper.property.clientport&lt;/name&gt; </span><br><span class="line">&lt;value&gt;2222&lt;/value&gt; </span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><h2 id="2、编辑regionserver文件"><a href="#2、编辑regionserver文件" class="headerlink" title="2、编辑regionserver文件"></a>2、编辑regionserver文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">S1 </span><br><span class="line">S2</span><br></pre></td></tr></table></figure><h2 id="3、编辑hbase-env-xml文件"><a href="#3、编辑hbase-env-xml文件" class="headerlink" title="3、编辑hbase-env.xml文件"></a>3、编辑hbase-env.xml文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/java/jdk1.6.0_26/  </span><br><span class="line">export CLASSPATH=$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/lib  </span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH:$CATALINA_HOME/bin  </span><br><span class="line">export HADOOP_HOME=/home/hadoop/hadoop  </span><br><span class="line">export HBASE_HOME=/home/hadoop/hbase  </span><br><span class="line">export HBASE_MANAGES_ZK=true </span><br><span class="line">export PATH=$PATH:/home/hadoop/hbase/bin</span><br></pre></td></tr></table></figure><h2 id="4、复制文件到集群丛机"><a href="#4、复制文件到集群丛机" class="headerlink" title="4、复制文件到集群丛机"></a>4、复制文件到集群丛机</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r /home/hadoop/hbase s1:/home/hadoop </span><br><span class="line">scp -r /home/hadoop/hbase s2:/home/hadoop</span><br></pre></td></tr></table></figure><h2 id="5、进入-home-hadoop-zookeeper-conf-中"><a href="#5、进入-home-hadoop-zookeeper-conf-中" class="headerlink" title="5、进入/home/hadoop/zookeeper/conf/中"></a>5、进入<code>/home/hadoop/zookeeper/conf/</code>中</h2><blockquote><p>(1)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>(2)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim zoo.cfg</span><br></pre></td></tr></table></figure></p></blockquote><p>如下： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># The number of milliseconds of each tick  </span><br><span class="line">tickTime=2000 </span><br><span class="line"># The number of ticks that the initial  </span><br><span class="line"># synchronization phase can take  </span><br><span class="line">initLimit=10 </span><br><span class="line"># The number of ticks that can pass between  </span><br><span class="line"># sending a request and getting an acknowledgement  </span><br><span class="line">syncLimit=5 </span><br><span class="line"># the directory where the snapshot is stored.  </span><br><span class="line">dataDir=/home/hadoop/zookeeper/data  </span><br><span class="line"># the port at which the clients will connect  </span><br><span class="line">clientPort=2181 </span><br><span class="line">server.1=s1:2888:3888  </span><br><span class="line">server.2=s2:2888:3888</span><br></pre></td></tr></table></figure><blockquote><p>(3)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch myid</span><br></pre></td></tr></table></figure></p></blockquote><p>*编辑：1（<u>此序号设置和zoo.cfg里面的server设置要对应</u>)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r /home/hadoop/zookeeper s1:/home/hadoop </span><br><span class="line">scp -r /home/hadoop/zookeeper s2:/home/hadoop</span><br></pre></td></tr></table></figure></p><blockquote><p>4）在所有的节点执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R hadoop.hadoop /home/hadoop</span><br></pre></td></tr></table></figure></p></blockquote><p>启动hbase集群：<br>（1）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（2）执行```jps```显示Hmaster是否启动</span><br><span class="line">（3）执行```bin/hbase shell</span><br></pre></td></tr></table></figure></p><p> (4)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;create &apos;t1&apos; t2&apos;&apos; &apos;t3&apos;#(测试利用hmaster插入数据) </span><br><span class="line">    &gt;list #（显示已经插入的数据） </span><br><span class="line">    &gt;t1+t2+t3</span><br></pre></td></tr></table></figure></p><p>输入：<a href="http://master:60010" target="_blank" rel="noopener">http://master:60010</a> </p><p><em>延伸：Hadoop 页面监控信息网址列表</em></p><p>将Hadoop中可能用到的网页地址list到下面，方便查阅：</p><ol><li><a href="http://master:50030" target="_blank" rel="noopener">http://master:50030</a></li></ol><p>查看MapReduce上的jobtracker（在启动了hdfs和MapReduce之后查阅）</p><ol start="2"><li><a href="http://master:50060" target="_blank" rel="noopener">http://master:50060</a> </li></ol><p>查看MapReduce上的tasktracker（在启动了hdfs和MapReduce之后查阅）</p><ol start="3"><li><a href="http://master:50070" target="_blank" rel="noopener">http://master:50070</a>  </li></ol><p>查看HDFS上的节点信息（在启动了HDFS之后查阅）</p><ol start="4"><li><a href="http://master:60010/master.jsp" target="_blank" rel="noopener">http://master:60010/master.jsp</a></li></ol><p>查看master连点信息 （在启动了HDFS、MapReduce、ZooKeeper和HBase之后查阅）</p><ol start="5"><li><a href="http://master:60030/regionserver.jsp" target="_blank" rel="noopener">http://master:60030/regionserver.jsp</a></li></ol><p>查看regionserver信息（在启动了HDFS、MapReduce、ZooKeeper和HBase之后查阅）</p><ol start="6"><li><a href="http://master:60010/zk.jsp" target="_blank" rel="noopener">http://master:60010/zk.jsp</a></li></ol><p>查看zookeeper信息（在启动了HDFS、MapReduce、ZooKeeper和HBase之后查阅）</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库优化-总结</title>
      <link href="/2016/07/20/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96-%E6%80%BB%E7%BB%93/"/>
      <url>/2016/07/20/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96-%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>面试时遇到的问题：千万级的mysql数据库如何优化？<br>作为一个刚入门的phper,遇到这个问题时,我还是压力山大的.还好有一个周末的时间来学习.本文就是这周末三天的整理总结.</p><a id="more"></a><h2 id="方案一-缓存"><a href="#方案一-缓存" class="headerlink" title="方案一:缓存"></a>方案一:缓存</h2><p>通过redis或memcache,添加缓存服务器.<br>原理:将经常查询的内容自动添加到缓存,访问量低的通过正常查询获得,可以让绝大多数的内容从内存中自动访问.</p><blockquote><p>ridis和memcache的区别:</p></blockquote><p>1 Redis不仅仅支持简单的k/v类型的数据，同时还提供list，set，hash等数据结构的存储。</p><p>2 Redis支持数据的备份，即master-slave模式的数据备份。</p><p>3 Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。</p><h2 id="方案二-添加索引"><a href="#方案二-添加索引" class="headerlink" title="方案二:添加索引"></a>方案二:添加索引</h2><p>通过对常用字段添加索引的办法可以极大的提高查询的效率.<br>注意事项:</p><ol><li><p>首先应考虑在 where 及 order by 涉及的列上建立索引。///禁用排名,<code>oder by null</code></p></li><li><p>可以在 num 上设置默认值 0,确保表中 num 列没有 null 值。</p></li><li><p>不要写一些没有意义的查询.</p></li><li><p>用 exists 代替 in 是一个好的选择.如:</p><blockquote></blockquote><p>select num from a where num in(select num from b);<br>可以用<br>select num from a where exists(select 1 from b where num=a.num);<br>来代替.</p></li><li><p>索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过 6 个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。</p></li><li><p>尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能,并增加存储开销。这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言 只需要比较一次就够了。</p></li></ol><ol start="7"><li>尽可能的使用 <code>varchar/nvarchar</code>代替 <code>char/nchar</code>, 因为首先变长字段存储空间小， 可以节省存储空间， 其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</li></ol><ol start="8"><li>不要使用 <code>select * from t</code>,用具体的字段列表代替“*”,不要返回用不到的任何字段。</li></ol><h4 id="避免全表扫描"><a href="#避免全表扫描" class="headerlink" title="避免全表扫描:"></a>避免全表扫描:</h4><ul><li><p>避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描。</p></li><li><p><code>select id from t where name like &#39;%c%&#39;;</code>也将导致全表扫描。</p></li><li><p>如果在 where 子句中使用参数，也会导致全表扫描.如:<code>select id from t where num=@num ;</code>可以改为强制查询使用索引:<code>select id from t with(index(索引名)) where num=@num ;</code></p></li><li><p>在 where 子句中对字段进行表达式操作， 这将导致引擎放弃使用索引而进行全表扫描。如:<code>select id from t where num/2=100;</code></p></li><li><p>在 where 子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：<code>select id from t where substring(name,1,3)=&#39;abc&#39;;#name 以 abc 开头的 id</code></p></li></ul><h2 id="方案三-水平分库-分表"><a href="#方案三-水平分库-分表" class="headerlink" title="方案三:水平分库/分表"></a>方案三:水平分库/分表</h2><p>原理:<br>一个1000多万条记录的用户表user,查询起来非常之慢，分表的做法是将其散列到100个表中，分别从user_0到user_99，然后根据userId分发记录到这些表中.</p><h2 id="方案四-Sphinx等索引工具"><a href="#方案四-Sphinx等索引工具" class="headerlink" title="方案四:Sphinx等索引工具"></a>方案四:Sphinx等索引工具</h2><p>原理:<br>Sphinx工具是一个基于SQL的索引检索引擎.原理是将SQL中的数据建立索引,php通过API的方式从Sphinx中获得检索的值.php不直接通过mysql取值.</p><p><img src="http://upload-images.jianshu.io/upload_images/2229907-552a7cc0a9351d0d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Sphinx的原理图"></p><h3 id="Sphinx的特性（优、缺点）"><a href="#Sphinx的特性（优、缺点）" class="headerlink" title="Sphinx的特性（优、缺点）"></a>Sphinx的特性（优、缺点）</h3><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><ul><li>高速索引 (在新款CPU上,近10 MB/秒);  </li><li>高速搜索 (2-4G的文本量中平均查询速度不到0.1秒);  </li><li>高可用性 (单CPU上最大可支持100 GB的文本,100M文档);</li><li>提供良好的相关性排名</li><li>支持分布式搜索;</li><li>提供文档摘要生成;</li><li>提供从MySQL内部的插件式存储引擎上搜索</li><li>支持布尔,短语, 和近义词查询;</li><li>支持每个文档多个全文检索域(默认最大32个);</li><li>支持每个文档多属性;</li><li>支持断词;</li><li>支持单字节编码与UTF-8编码;</li><li>支持多字段的检索域</li><li>支持MySQL（MYISAM和INNODB）和Postgres数据库</li><li>支持windows, linux, unix, mac等平台</li></ul><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><ul><li>必须要有主键</li><li>主键必须为整型</li><li>不负责数据存储</li><li>配置不灵活</li></ul><h2 id="方案五-读写分离"><a href="#方案五-读写分离" class="headerlink" title="方案五:读写分离"></a>方案五:读写分离</h2><p>原理：<br>通过物理的方式来提升mysql的性能.<br>…未完待续</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11个提问频率最高的PHP面试题</title>
      <link href="/2016/05/20/11%E4%B8%AA%E6%8F%90%E9%97%AE%E9%A2%91%E7%8E%87%E6%9C%80%E9%AB%98%E7%9A%84PHP%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2016/05/20/11%E4%B8%AA%E6%8F%90%E9%97%AE%E9%A2%91%E7%8E%87%E6%9C%80%E9%AB%98%E7%9A%84PHP%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="问题：请用最简单的语言告诉我PHP是什么？"><a href="#问题：请用最简单的语言告诉我PHP是什么？" class="headerlink" title="问题：请用最简单的语言告诉我PHP是什么？"></a>问题：请用最简单的语言告诉我PHP是什么？</h3><p>回答：PHP全称：Hypertext Preprocessor，是一种用来开发动态网站的服务器脚本语言。<br><a id="more"></a></p><h3 id="问题：什么是MVC？"><a href="#问题：什么是MVC？" class="headerlink" title="问题：什么是MVC？"></a>问题：什么是MVC？</h3><p>回答：MVC由Model（模型）, View（视图）和Controller（控制器）组成，PHP MVC可以更高效地管理好3个不同层的PHP代码。<br><strong>Model</strong>：数据信息存取层。<br><strong>View</strong>：view层负责将应用的数据以特定的方式展现在界面上。<br><strong>Controller</strong>：通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据。</p><h3 id="问题：在页面中引用CSS有几种方式？"><a href="#问题：在页面中引用CSS有几种方式？" class="headerlink" title="问题：在页面中引用CSS有几种方式？"></a>问题：在页面中引用CSS有几种方式？</h3><p>回答：在页面中使用CSS有3中方式：<br>引用外部CSS文件<br>内部定义Style样式<br>内联样式</p><h3 id="问题：PHP支持多继承吗？"><a href="#问题：PHP支持多继承吗？" class="headerlink" title="问题：PHP支持多继承吗？"></a>问题：PHP支持多继承吗？</h3><p>回答：不可以。PHP类只能继承一个父类，并用关键字“extends”标识。</p><h3 id="问题：请问PHP中echo和print有什么区别？"><a href="#问题：请问PHP中echo和print有什么区别？" class="headerlink" title="问题：请问PHP中echo和print有什么区别？"></a>问题：请问PHP中echo和print有什么区别？</h3><p>这两个看起来很相似，因为它们都是将一些值打印在屏幕上。但是echo和print的本质区别在于：echo用来输出字符串，显示多个值的时候可以用逗号隔开。只支持基本类型，print不仅可以打印字符串值，而且可以打印函数的返回值。</p><h3 id="问题：请问GET和POST方法有什么区别？"><a href="#问题：请问GET和POST方法有什么区别？" class="headerlink" title="问题：请问GET和POST方法有什么区别？"></a>问题：请问GET和POST方法有什么区别？</h3><p>回答：我们再网页上填写的表单信息都可以通过这两个方法将数据传递到服务器上，当我们使用GET方法是，所有的信息都会出现在URL地址中，并且使用GET方法最多只能传递1024个字符，所以如果在传输量小或者安全性不那么重要的情况下可以使用GET方法。说到POST方法，最多可以传输2MB字节的数据，而且可以根据需要调节。</p><h3 id="问题：PHP中获取图像尺寸大小的方法是什么？"><a href="#问题：PHP中获取图像尺寸大小的方法是什么？" class="headerlink" title="问题：PHP中获取图像尺寸大小的方法是什么？"></a>问题：PHP中获取图像尺寸大小的方法是什么？</h3><p>回答：getimagesize () 获取图片的尺寸<br>Imagesx () 获取图片的宽度<br>Imagesy () 获取图片的高度</p><h3 id="问题：PHP中的PEAR是什么？"><a href="#问题：PHP中的PEAR是什么？" class="headerlink" title="问题：PHP中的PEAR是什么？"></a>问题：PHP中的PEAR是什么？</h3><p>回答：PEAR也就是为PHP扩展与应用库（PHP Extension and Application Repository），它是一个PHP扩展及应用的一个代码仓库。</p><h3 id="问题：如何用PHP和MySQL上传视频？"><a href="#问题：如何用PHP和MySQL上传视频？" class="headerlink" title="问题：如何用PHP和MySQL上传视频？"></a>问题：如何用PHP和MySQL上传视频？</h3><p>回答：我们可以在数据库中存放视频的地址，而不需要将真正的视频数据存在数据库中。可以将视频数据存放在服务器的指定文件夹下，上传的默认大小是2MB，但是我们也可以在php.ini文件中修改max_file size选项来改变。</p><h3 id="问题：PHP中的错误类型有哪些？"><a href="#问题：PHP中的错误类型有哪些？" class="headerlink" title="问题：PHP中的错误类型有哪些？"></a>问题：PHP中的错误类型有哪些？</h3><p>回答：PHP中遇到的错误类型大致有3类。<br><strong>提示</strong>：这都是一些非常正常的信息，而非重大的错误，有些甚至不会展示给用户。比如访问不存在的变量。<br><strong>警告</strong>：这是有点严重的错误，将会把警告信息展示给用户，但不会影响代码的输出，比如包含一些不存在的文件。<br><strong>错误</strong>：这是真正的严重错误，比如访问不存在的PHP类。</p><p>###问题：如何在PHP中定义常量？<br>回答：PHP中使用Define () 来定义常量。<br>define (“Newconstant”, 30);</p><p>###问题：如何不使用submit按钮来提交表单？<br>如果我们不想用submit按钮来提交表单，我们也可以用超链接来提交，我们可以这样写代码：</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="好好生活，天天向上！"><a href="#好好生活，天天向上！" class="headerlink" title="好好生活，天天向上！"></a>好好生活，天天向上！</h1><p>布局先做好，内容慢慢填。<br><a id="more"></a></p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
