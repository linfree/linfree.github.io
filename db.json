{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/bubuzou/source/README.md","path":"README.md","modified":1,"renderable":1},{"_id":"themes/bubuzou/source/CNAME","path":"CNAME","modified":1,"renderable":1},{"_id":"themes/bubuzou/source/css/bubuzou.css","path":"css/bubuzou.css","modified":1,"renderable":1},{"_id":"themes/bubuzou/source/font/sourcesanspro.woff","path":"font/sourcesanspro.woff","modified":1,"renderable":1},{"_id":"themes/bubuzou/source/font/sourcesanspro.woff2","path":"font/sourcesanspro.woff2","modified":1,"renderable":1},{"_id":"themes/bubuzou/source/images/abstract.png","path":"images/abstract.png","modified":1,"renderable":1},{"_id":"themes/bubuzou/source/images/alert.png","path":"images/alert.png","modified":1,"renderable":1},{"_id":"themes/bubuzou/source/images/cate.png","path":"images/cate.png","modified":1,"renderable":1},{"_id":"themes/bubuzou/source/images/icon_dot.jpg","path":"images/icon_dot.jpg","modified":1,"renderable":1},{"_id":"themes/bubuzou/source/images/icon_doton.jpg","path":"images/icon_doton.jpg","modified":1,"renderable":1},{"_id":"themes/bubuzou/source/images/logo.png","path":"images/logo.png","modified":1,"renderable":1},{"_id":"themes/bubuzou/source/images/readme.png","path":"images/readme.png","modified":1,"renderable":1},{"_id":"themes/bubuzou/source/images/right-menu.png","path":"images/right-menu.png","modified":1,"renderable":1},{"_id":"themes/bubuzou/source/images/search.png","path":"images/search.png","modified":1,"renderable":1},{"_id":"themes/bubuzou/source/images/search_white.png","path":"images/search_white.png","modified":1,"renderable":1},{"_id":"themes/bubuzou/source/images/totop.png","path":"images/totop.png","modified":1,"renderable":1},{"_id":"themes/bubuzou/source/images/totop2.png","path":"images/totop2.png","modified":1,"renderable":1},{"_id":"themes/bubuzou/source/scripts/arAnchor.js","path":"scripts/arAnchor.js","modified":1,"renderable":1},{"_id":"themes/bubuzou/source/scripts/main.js","path":"scripts/main.js","modified":1,"renderable":1},{"_id":"themes/bubuzou/source/scss/bubuzou.scss","path":"scss/bubuzou.scss","modified":1,"renderable":1},{"_id":"themes/bubuzou/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/bubuzou/source/scripts/jquery-1.8.2.min.js","path":"scripts/jquery-1.8.2.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/bubuzou/_config.yml","hash":"2074eb4a41e26c08f0c9a7e4c6e762e7292d5e5a","modified":1540311436561},{"_id":"themes/bubuzou/gulpfile.js","hash":"3bf61bca569665944cc61ac0483c9d568a4f58d7","modified":1495875887253},{"_id":"themes/bubuzou/package.json","hash":"b2917ccda72e0c245407506f9f5b6fe52a2f8f91","modified":1495875887273},{"_id":"source/_posts/11个提问频率最高的PHP面试题.md","hash":"bc1e93d54846ccb943a56816d6fc9e9ed8b29b5c","modified":1514558096833},{"_id":"source/_posts/2018-应该静下来.md","hash":"4380c2aa749aae9622a3a665f70d015013445237","modified":1540313135175},{"_id":"source/_posts/ES一些名词的解释.md","hash":"e6282a9800bf88ad620cec3bff3e4a6d53640954","modified":1498386247690},{"_id":"source/_posts/Hadoop+Hbase+ZooKeeper集群搭建方法.md","hash":"67a413f938ea7fdd8807a8ad03fabd1690e9c1b9","modified":1498381728539},{"_id":"source/_posts/MySQL数据库优化-总结.md","hash":"c5ba349f4c911b7a8ddeb53d4ae7c7820a6b2d1a","modified":1505397292706},{"_id":"source/_posts/Python，Re模块的学习.md","hash":"6e39163cd7ca5508e3dcc62029b9330c17333a2d","modified":1498384227310},{"_id":"source/_posts/SSH的原理和运用.md","hash":"ea9b80de2db928fadd39c1391d6da007c6568409","modified":1509544286035},{"_id":"source/_posts/WinSCP连接linux遇到的一个小问题.md","hash":"777f972ebce6f116e38b49f00306f57706b31c5a","modified":1498386478129},{"_id":"source/_posts/elasticsearch学习笔记目录.md","hash":"871264807675f367e7f5b02309dda2629d294cd9","modified":1498386055570},{"_id":"source/_posts/elasticsearch简介.md","hash":"577033b81c51bbf28754d892f36e744b6abcfdd7","modified":1498386043889},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1496238623649},{"_id":"source/_posts/mysql 数据库导入、导出(总结备忘).md","hash":"be95e18669bb8db14819327824f43e8515dbd34d","modified":1505397296305},{"_id":"source/_posts/redis非权威指南(基本知识).md","hash":"c304f6651955d95587245120960e3ed489a8c3bb","modified":1505219131675},{"_id":"source/_posts/《如何阅读一本书》读书笔记.md","hash":"b207f9144622f090c0053f2b46ff11e2bff5309a","modified":1528378528373},{"_id":"source/_posts/写在开始的话.md","hash":"7b4e0b7092df40ebdbe8cf18e663e12bce5e4267","modified":1498386059462},{"_id":"source/_posts/前端分页逻辑的思考.md","hash":"23927ee84814e45e7a107c0bc3c4dfb5ffd3306f","modified":1540313030454},{"_id":"source/_posts/基本的shell操作HBase.md","hash":"ccc827dbaaedc745245a3650bc3c459aa5da7614","modified":1498386498566},{"_id":"source/_posts/《楚门的世界》，关于选择和自由.md","hash":"d739adeef3247cbc7189f372b6d198172e3f3f02","modified":1523195496575},{"_id":"source/_posts/看完《我不是药神》后我用python分析了中国的药店.md","hash":"63253f9fba5235f8f9729ea406b1eb8acd598b91","modified":1540309951175},{"_id":"source/_posts/看电影《十二怒汉》.md","hash":"80eb436de0c7d005098d35aa6b492506570813fc","modified":1514455219649},{"_id":"source/_posts/简述应用程序接口(API).md","hash":"08c28f65363e627c43f2aa1fba7715070227b8a6","modified":1514558113606},{"_id":"source/_posts/如何更改MySQL的datadir目录.md","hash":"28c83582f14c7b53d5d5234f4434ab3c3bce5529","modified":1498383123080},{"_id":"source/about/index.md","hash":"909c930ee7cf18dde3887726a97ecb2d4d0c083a","modified":1496326653256},{"_id":"source/categories/index.md","hash":"b0b83dae2bc3a1b41c215e2c25da2803b68fb5e5","modified":1496327385243},{"_id":"themes/bubuzou/.git/COMMIT_EDITMSG","hash":"04c1afea927137f874b01c6f0628e2c9b50b4e1e","modified":1496323274463},{"_id":"themes/bubuzou/.git/FETCH_HEAD","hash":"e52da9126536d9c83742d60a9dcd35b1c400dc58","modified":1495876017877},{"_id":"themes/bubuzou/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1495875887218},{"_id":"themes/bubuzou/.git/ORIG_HEAD","hash":"95798456cbfb2d841994aea347757894e997693a","modified":1495876018646},{"_id":"themes/bubuzou/.git/config","hash":"63ae4687425fbb3f0fe4c52a87ef63e36b75b39b","modified":1495875887243},{"_id":"themes/bubuzou/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1495875806462},{"_id":"themes/bubuzou/.git/index","hash":"44569b6075fd4140a0b32480e0063840efad4dd8","modified":1496505377958},{"_id":"themes/bubuzou/.git/packed-refs","hash":"71625e051e2d2ad173b6b93b9025deb225c46876","modified":1495875887205},{"_id":"themes/bubuzou/languages/zh-cn.yml","hash":"05ef430fa5586e919839bad35aba4a9690e8e672","modified":1495875887256},{"_id":"themes/bubuzou/languages/en.yml","hash":"29b8e211d422cb846af005bd1c21435b45ed6457","modified":1495875887255},{"_id":"themes/bubuzou/doc/doc-zh.md","hash":"0976c308761ff85079e4babea0a04def836dcc04","modified":1495875887253},{"_id":"themes/bubuzou/layout/about.jade","hash":"8c1a4a6dddfd1044a985e99a9e62a16b6755b0ac","modified":1495875887257},{"_id":"themes/bubuzou/layout/archive.jade","hash":"a993dddad0213cfc4adbf5d25597b7effac758b0","modified":1495875887258},{"_id":"themes/bubuzou/layout/categories.jade","hash":"c9a303cebe7e09d834be7bbe3b474402046dece0","modified":1495875887259},{"_id":"themes/bubuzou/layout/index.jade","hash":"fd11746c566d9fb6de1224a2992e3e443a83c139","modified":1495875887260},{"_id":"themes/bubuzou/layout/post.jade","hash":"6a0c80541214a91c0a61f4f544456eeb51bc4c50","modified":1495875887269},{"_id":"themes/bubuzou/source/README.md","hash":"44924be49825f9cc2ffd00fd236753b64b96e3c6","modified":1540473549968},{"_id":"themes/bubuzou/source/CNAME","hash":"ccd6123bea45e897139a473830592ff203cf1d74","modified":1496233139486},{"_id":"themes/bubuzou/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1495875806486},{"_id":"themes/bubuzou/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1495875806494},{"_id":"themes/bubuzou/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1495875806496},{"_id":"themes/bubuzou/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1495875806497},{"_id":"themes/bubuzou/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1495875806520},{"_id":"themes/bubuzou/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1495875806532},{"_id":"themes/bubuzou/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1495875806540},{"_id":"themes/bubuzou/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1495875806550},{"_id":"themes/bubuzou/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1495875806564},{"_id":"themes/bubuzou/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1495875806570},{"_id":"themes/bubuzou/.git/logs/HEAD","hash":"34a81eb441509b83ba83748fb8f413ee309810b1","modified":1496323274510},{"_id":"themes/bubuzou/layout/mixins/paginator.jade","hash":"47712f8bb3d84ff6a2742f923626d568779fc45a","modified":1495875887261},{"_id":"themes/bubuzou/layout/mixins/post.jade","hash":"ff3c6bf446756b3404e18225cbdf00f14f0c70c3","modified":1495875887262},{"_id":"themes/bubuzou/layout/partial/copyright.jade","hash":"3e17be0614a8c6b16618f66b58f9f3374ade8254","modified":1496324406427},{"_id":"themes/bubuzou/layout/partial/comment.jade","hash":"ee635800e0ffbbbe398196b0a2edbb4a5144d9da","modified":1540311755710},{"_id":"themes/bubuzou/layout/partial/head.jade","hash":"b6796e9e41868715ae9ab40561bc8ad5d9e0d5fb","modified":1495875887265},{"_id":"themes/bubuzou/layout/partial/nav.jade","hash":"62579d57c5d469d716e65f2f3a1bc469b0852284","modified":1496324652283},{"_id":"themes/bubuzou/layout/partial/layout.jade","hash":"a5ed37256ee133239d124c305776cb855b5b5fbf","modified":1500138198477},{"_id":"themes/bubuzou/layout/partial/scripts.jade","hash":"a876b1fec40bf34c1b05a4aaff9311d8cac91a56","modified":1495875887268},{"_id":"themes/bubuzou/layout/widget/category.jade","hash":"7a1efd4189b8fe306fc6ef812fbe8ea31f3feee0","modified":1495875887271},{"_id":"themes/bubuzou/layout/widget/catalog.jade","hash":"673285815949224528ca7ffbb94685975d09586e","modified":1495875887270},{"_id":"themes/bubuzou/layout/widget/recent.jade","hash":"8c87dc0b6fad4dbb29769aef172cdae55d7d3998","modified":1495875887272},{"_id":"themes/bubuzou/layout/widget/tagcloud.jade","hash":"b426a1e9cbc3a7af4103b9bdf77f7e6939bf3960","modified":1495875887273},{"_id":"themes/bubuzou/source/css/bubuzou.css","hash":"bdb58441168cd80e05759273e52bda0b36bf8254","modified":1495877342793},{"_id":"themes/bubuzou/source/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1495875887277},{"_id":"themes/bubuzou/source/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1495875887278},{"_id":"themes/bubuzou/source/images/abstract.png","hash":"f981405269dbd0e8004364ebcb8220c58934ef31","modified":1495875887279},{"_id":"themes/bubuzou/source/images/alert.png","hash":"1faab50a7d611cec2094e495659037d83ffa9fcb","modified":1495875887280},{"_id":"themes/bubuzou/source/images/cate.png","hash":"8da3b9953df6e425e45a757d60ac04bf3314f683","modified":1495875887281},{"_id":"themes/bubuzou/source/images/icon_dot.jpg","hash":"c3184b95085e80aaf819dd01b104908580294813","modified":1495875887283},{"_id":"themes/bubuzou/source/images/icon_doton.jpg","hash":"8159ced4568b18cd9a9f5fc2624e6cf7cf24788e","modified":1540388658876},{"_id":"themes/bubuzou/source/images/logo.png","hash":"b6437d9e28c5efc90e24bc1ccc898194e79cd80f","modified":1540387366939},{"_id":"themes/bubuzou/source/images/readme.png","hash":"af2e7b2dbd8dc00ded644be760f7de284a2ba8c8","modified":1495875887286},{"_id":"themes/bubuzou/source/images/right-menu.png","hash":"047a16873cb4abf017a5a03bf775c030feb00549","modified":1540387623050},{"_id":"themes/bubuzou/source/images/search.png","hash":"3c6a8d6f0a2e33e1e9ef3abba34d840cd0e5c21a","modified":1540387643322},{"_id":"themes/bubuzou/source/images/search_white.png","hash":"2cd2ae869c53fe9649d6d7da81ba9ae135f81b7d","modified":1495875887288},{"_id":"themes/bubuzou/source/images/totop.png","hash":"4a2ebb1159729805d1b213f19871edbeb90de2e8","modified":1540387858535},{"_id":"themes/bubuzou/source/images/totop2.png","hash":"906ecfc90979db2425ed1c3e372e9c1b7784112d","modified":1540388256717},{"_id":"themes/bubuzou/source/scripts/arAnchor.js","hash":"42f9a3e096fdbf915b5a20950f000b32bedba525","modified":1495875887291},{"_id":"themes/bubuzou/source/scripts/main.js","hash":"a2b717666acf1a6a950e71b82723948cc06850fd","modified":1540310519140},{"_id":"themes/bubuzou/source/scss/bubuzou.scss","hash":"844926ed4be619cd6b02682eca0447e4d0f6ed70","modified":1495879897824},{"_id":"themes/bubuzou/source/images/favicon.ico","hash":"9f68734133818a70fa8b13b7ac1cb43c0a482745","modified":1495878625071},{"_id":"themes/bubuzou/source/scripts/jquery-1.8.2.min.js","hash":"149b5180cb9de3f646fc26802440a6ac6e758d40","modified":1495875887293},{"_id":"themes/bubuzou/.git/objects/32/7cf1d9dd374132e87a2b8b837e78b781da98fa","hash":"c809010859a903424ceae0b016cdfc86d9f1c6f5","modified":1496323130527},{"_id":"themes/bubuzou/.git/objects/2b/3e538678d2802fdd4b73a7ca408b3501f3e257","hash":"3c4e3506fda9573533be29acabc631b787b100f3","modified":1496323069983},{"_id":"themes/bubuzou/.git/objects/31/4547f339712efd720cbe4791c10cc5d426ac80","hash":"99fa4babf6a35a511fea7572083d3b4f863cf906","modified":1495878729407},{"_id":"themes/bubuzou/.git/objects/41/abffda12ad3570557ae4ffa7463d708d884dc1","hash":"b7ec5ade795cbf97af90034c2bc1163ac8613391","modified":1495877618978},{"_id":"themes/bubuzou/.git/objects/4f/22a64366a3c00713d2f7df35bfe3223284e008","hash":"2531d13142beb44969fe206554e2a2b156910bde","modified":1495877482443},{"_id":"themes/bubuzou/.git/objects/52/8650cd93e49eac363734f134d7b32fdc8ec76d","hash":"953dbfcbddf65aa2b77a77535e6dcf17149c3bc6","modified":1495878751790},{"_id":"themes/bubuzou/.git/objects/58/ca4ce2971e00e6453e3a265bbac1eaa60ea7b9","hash":"ab33504fba89a9e61582f4e84892033ce1862178","modified":1496323130529},{"_id":"themes/bubuzou/.git/objects/78/d5e6ebde85a13034bb0e096ef4778656817d81","hash":"33a2f126d0da37f6d4c809981b01dfb78b606e60","modified":1495878751795},{"_id":"themes/bubuzou/.git/objects/99/573be882094b0d1318818485d7cc999a7b0ef1","hash":"6056ded2c6e05d39803434d89f9d364278088c92","modified":1495877482447},{"_id":"themes/bubuzou/.git/objects/c6/a94a53c1a6376f16cf48e5579277c2589c0aee","hash":"0b9c4f3e4032115379f83f60d158e43f410fee02","modified":1496323069990},{"_id":"themes/bubuzou/.git/objects/bc/f793255ae5eb08c352f53664c9facc92848a4a","hash":"047866295d716c23b249c6513e4836c89da025e1","modified":1495877449106},{"_id":"themes/bubuzou/.git/objects/d7/80d481aa5cd794226b19b94918e59dd24dd90b","hash":"5ea7595dc0e01a9b84009b7273550ff632f390c5","modified":1495878751792},{"_id":"themes/bubuzou/.git/objects/d9/26402ab4befeecf1234c87904b2b792d97e63e","hash":"2f7118588f32c2513a24b571dcc621ea487acebb","modified":1496323130548},{"_id":"themes/bubuzou/.git/objects/e6/a08aa88bb1c23acaa5452a1d1a7007373ae49e","hash":"f86f61cbb138e4c674108b44b6c5ba1fa4a16ae4","modified":1495877482439},{"_id":"themes/bubuzou/.git/objects/e0/e76e60f0c1befc18b20d83f4367e3ab77a4ff4","hash":"dbb677b8a19281c69efb81d76426fd4f6f9ace7d","modified":1495878751806},{"_id":"themes/bubuzou/.git/objects/eb/4557525c2352365e9e224721a5418862fe4a38","hash":"01a054d0206a238b803b1381ef3c308f820acc68","modified":1496323274439},{"_id":"themes/bubuzou/.git/objects/fd/673af233b70a6bb4cd286492ae7774bee2a2e4","hash":"1885521877e69ce765e1915eca16ed48efb0820b","modified":1496323274478},{"_id":"themes/bubuzou/.git/objects/pack/pack-09d0103f81e9d4a88d9ff96ee135a5e95c9b0fb8.idx","hash":"c43d2fa28cd28170b3135ba6744e1c78984f44dc","modified":1495875886057},{"_id":"themes/bubuzou/.git/refs/heads/master","hash":"1d43cf8657ac50f0afdad0a5b315cf79a82af0a2","modified":1496323274488},{"_id":"themes/bubuzou/source/scss/_partial/base.scss","hash":"b752b780ca886d42da3fa7dc31a2c360e279b2ea","modified":1495875887296},{"_id":"themes/bubuzou/source/scss/_partial/copyright.scss","hash":"e87b144a8389eefeab4f50c353eef18c428a761c","modified":1495875887297},{"_id":"themes/bubuzou/source/scss/_partial/footer.scss","hash":"8cd2631d46be05a9518f1966bd84e1a8b0270857","modified":1495875887298},{"_id":"themes/bubuzou/source/scss/_partial/archive-post-list.scss","hash":"3003361c281d7aa1cfed944ad0da180ac05f2c32","modified":1495875887296},{"_id":"themes/bubuzou/source/scss/_partial/header.scss","hash":"a6aeb5177f370f984565f7b6f0a18fe27545d34d","modified":1495875887299},{"_id":"themes/bubuzou/source/scss/_partial/home-post-list.scss","hash":"658eef39c7cf6f730f784751c2e4701e8eb02e0d","modified":1495875887300},{"_id":"themes/bubuzou/source/scss/_partial/mq.scss","hash":"c7632542c53368fb831e6583f4ce79ba1ba920ed","modified":1495875887301},{"_id":"themes/bubuzou/source/scss/_partial/normalize.scss","hash":"612b367b0e9a0b9f66d37694ee64ce896c552967","modified":1495875887302},{"_id":"themes/bubuzou/source/scss/_partial/post.scss","hash":"d26546a5e2c426b45325d04d64035cd9359bed91","modified":1495875887302},{"_id":"themes/bubuzou/.git/logs/refs/heads/master","hash":"34a81eb441509b83ba83748fb8f413ee309810b1","modified":1496323274491},{"_id":"themes/bubuzou/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1495875887215},{"_id":"themes/bubuzou/.git/refs/remotes/origin/master","hash":"1d43cf8657ac50f0afdad0a5b315cf79a82af0a2","modified":1496323288049},{"_id":"themes/bubuzou/.git/logs/refs/remotes/origin/HEAD","hash":"03e1bbfa6c9584cf458a605a3316a1e59d6166f1","modified":1495875887215},{"_id":"themes/bubuzou/.git/logs/refs/remotes/origin/master","hash":"960dd810c8ce9778f4968ae3e6902f7cb327b53a","modified":1496323288053},{"_id":"themes/bubuzou/.git/objects/pack/pack-09d0103f81e9d4a88d9ff96ee135a5e95c9b0fb8.pack","hash":"c784612f57929a655f62f8577891c0d1d50440dd","modified":1496323246000},{"_id":"public/atom.xml","hash":"1e2fdc500c7077bbf2e3e795dfbcb72a34b7a3b9","modified":1540473577140},{"_id":"public/search.xml","hash":"148120c8f88b959ac350cad78ec9dd13bf43a316","modified":1540473577194},{"_id":"public/sitemap.xml","hash":"ee3a14beabf242ae1b9079f1793072d926bc1a4c","modified":1540473577199},{"_id":"public/about/index.html","hash":"1d598710482923bb02785ace6f2a07619ed6f773","modified":1540473577237},{"_id":"public/categories/index.html","hash":"2ab17b3f63e5193f2bd448472396fe405849d48e","modified":1540473577237},{"_id":"public/2018/02/27/2018-应该静下来/index.html","hash":"0c7420140ac64b02cca0c5df3ea635bb25639056","modified":1540473577237},{"_id":"public/2018/01/22/《楚门的世界》，关于选择和自由/index.html","hash":"a29aecf0ebc6b2fb016a04440da4453d49ecca0f","modified":1540473577238},{"_id":"public/2017/12/28/看电影《十二怒汉》/index.html","hash":"41eb9b55ac8dfca685eb4df7e7c6e840973c70ad","modified":1540473577238},{"_id":"public/2017/10/20/《如何阅读一本书》读书笔记/index.html","hash":"75c764a698b0e993396e3920cb2c0584f89b286e","modified":1540473577238},{"_id":"public/2017/10/20/看完《我不是药神》后我用python分析了中国的药店/index.html","hash":"fd8147f1f49aed1c82f21abefaa055b49f357c64","modified":1540473577239},{"_id":"public/2017/05/20/mysql 数据库导入、导出(总结备忘)/index.html","hash":"8189966409c83a451f2fe793023102ac26b20c33","modified":1540473577239},{"_id":"public/2017/05/20/elasticsearch简介/index.html","hash":"65990dc1d961e8b2320e6ee75057f44d62ea6d10","modified":1540473577240},{"_id":"public/2017/05/20/ES一些名词的解释/index.html","hash":"59aba43d5e56d26b0e7642ed2e6d32f665d3ae2c","modified":1540473577241},{"_id":"public/2017/05/20/MySQL数据库优化-总结/index.html","hash":"fc8c47c880d1659b8f0600370cbb82a845c677da","modified":1540473577241},{"_id":"public/2017/05/20/写在开始的话/index.html","hash":"5877420aee41ad058c08e5ecf75ed5212c487526","modified":1540473577241},{"_id":"public/2017/05/20/11个提问频率最高的PHP面试题/index.html","hash":"cac007957c93d300c7cdbf51d30597657f13c1b2","modified":1540473577241},{"_id":"public/2017/05/20/WinSCP连接linux遇到的一个小问题/index.html","hash":"8b751c832c6a526629f2a2203a5738c529d4aad5","modified":1540473577241},{"_id":"public/2017/05/20/elasticsearch学习笔记目录/index.html","hash":"79ef1e240bf9c23c3a10c51a4c80123cf6236716","modified":1540473577241},{"_id":"public/2017/05/20/如何更改MySQL的datadir目录/index.html","hash":"19f5eb25f639b039e2176ec1fdf21855273d2e6a","modified":1540473577241},{"_id":"public/2017/05/19/hello-world/index.html","hash":"2951306175cbed14b16f091d68bc974d0fbc62fb","modified":1540473577241},{"_id":"public/archives/index.html","hash":"63cc7437c6b8c698f51a6db839bd39fabf29559e","modified":1540473577241},{"_id":"public/archives/page/2/index.html","hash":"5c8220707fbec7e9d7d336807299501b454f2328","modified":1540473577241},{"_id":"public/archives/page/3/index.html","hash":"1ca3879352af0b677b4a3426ac48736bc2b11d64","modified":1540473577241},{"_id":"public/archives/2017/index.html","hash":"820f105bd2844cc97e502643d96861f005dd76a0","modified":1540473577242},{"_id":"public/archives/2017/05/index.html","hash":"732aa652066916d6ce38e0f75772a5bd9c5acb9f","modified":1540473577242},{"_id":"public/archives/2017/page/2/index.html","hash":"6d1752712c46ae15dc49ae429638425dbed4a432","modified":1540473577243},{"_id":"public/archives/2017/05/page/2/index.html","hash":"cb6268b50a8a170e199e9f68477e23666e8c4c27","modified":1540473577243},{"_id":"public/archives/2017/06/index.html","hash":"138e50ebe22205ad4be94451e0a4c3a20d7bfa5d","modified":1540473577243},{"_id":"public/archives/2017/08/index.html","hash":"19d843d8edde4c79c0f044440dc27ad1294a6e33","modified":1540473577243},{"_id":"public/archives/2017/10/index.html","hash":"28b21241f55d05490c70e2561e9ac763a966db66","modified":1540473577244},{"_id":"public/archives/2017/12/index.html","hash":"af8c835f2d16b0a7b66c53d74a503baec0ca8365","modified":1540473577244},{"_id":"public/archives/2018/index.html","hash":"601e101c2ea7caa23fc38cf4e1f0ad57d84033dc","modified":1540473577244},{"_id":"public/archives/2018/01/index.html","hash":"2ee72c10a66a2332c36d5a76878d4929175fc885","modified":1540473577244},{"_id":"public/archives/2018/02/index.html","hash":"f664ad56f659947420a0884f2e8f55c6d351c591","modified":1540473577244},{"_id":"public/categories/PHP/index.html","hash":"6ccfffe0f8cfabc8dc3bb751f817f75f0929f4cc","modified":1540473577244},{"_id":"public/categories/Elasticsearch非权威指南/index.html","hash":"856fead11140aeb5d15b0c4a92c984172f9b9239","modified":1540473577244},{"_id":"public/categories/live/index.html","hash":"37c1b7cff19c8c40c75611d3d92ac2f1821299b6","modified":1540473577245},{"_id":"public/categories/bigdata/index.html","hash":"461e08c20ae01687951ddcfad1d345781ca9314a","modified":1540473577245},{"_id":"public/categories/数据库/index.html","hash":"1662f7ebd2d8b9bc794b14e8316c247a9ab01ad0","modified":1540473577245},{"_id":"public/categories/Python/index.html","hash":"e34ed85a511ba5b04c49c32c5d192efac4188658","modified":1540473577245},{"_id":"public/categories/linux/index.html","hash":"3fda60b8eda97e30ea34e62047c0525b0bc9ef0f","modified":1540473577245},{"_id":"public/categories/tools/index.html","hash":"5430ab47596d541b125675391dac6bd92aa9aaa5","modified":1540473577245},{"_id":"public/categories/read/index.html","hash":"31fde12cea890fb7a8f5566e8b70ce620d50e979","modified":1540473577246},{"_id":"public/page/2/index.html","hash":"97024d95ac219637934d9e7e1c9076b107f4bdb9","modified":1540473577247},{"_id":"public/page/3/index.html","hash":"038bda7221602cef1c36d705306afa433df87ac5","modified":1540473577247},{"_id":"public/tags/php/index.html","hash":"6ccfffe0f8cfabc8dc3bb751f817f75f0929f4cc","modified":1540473577248},{"_id":"public/tags/Elasticsearch/index.html","hash":"856fead11140aeb5d15b0c4a92c984172f9b9239","modified":1540473577248},{"_id":"public/tags/心情记录/index.html","hash":"f664ad56f659947420a0884f2e8f55c6d351c591","modified":1540473577248},{"_id":"public/tags/生活/index.html","hash":"ce61cd02f9d4ed4bf6d0c1696df1781e5d32de58","modified":1540473577248},{"_id":"public/tags/Hadoop/index.html","hash":"8c7aaa98e274cee30d9b4bee4f5d0d5cf29cfb6c","modified":1540473577249},{"_id":"public/tags/HBase/index.html","hash":"8c7aaa98e274cee30d9b4bee4f5d0d5cf29cfb6c","modified":1540473577249},{"_id":"public/tags/大数据/index.html","hash":"8c7aaa98e274cee30d9b4bee4f5d0d5cf29cfb6c","modified":1540473577249},{"_id":"public/tags/Mysql/index.html","hash":"bb6054d9e63ec9c43c752825c082347b1d404d7a","modified":1540473577249},{"_id":"public/tags/数据库/index.html","hash":"1662f7ebd2d8b9bc794b14e8316c247a9ab01ad0","modified":1540473577249},{"_id":"public/tags/Python/index.html","hash":"e34ed85a511ba5b04c49c32c5d192efac4188658","modified":1540473577249},{"_id":"public/tags/正则表达式/index.html","hash":"fd28fb100a6d0ba65514c59083b5b173e4e61286","modified":1540473577249},{"_id":"public/tags/SSH/index.html","hash":"3fda60b8eda97e30ea34e62047c0525b0bc9ef0f","modified":1540473577249},{"_id":"public/tags/Linux/index.html","hash":"8162384bed66e980ed745a7a8f6f50e59de1ba83","modified":1540473577250},{"_id":"public/tags/工具/index.html","hash":"5430ab47596d541b125675391dac6bd92aa9aaa5","modified":1540473577250},{"_id":"public/tags/Redis/index.html","hash":"19d843d8edde4c79c0f044440dc27ad1294a6e33","modified":1540473577250},{"_id":"public/tags/读书笔记/index.html","hash":"31fde12cea890fb7a8f5566e8b70ce620d50e979","modified":1540473577250},{"_id":"public/tags/前端/index.html","hash":"138e50ebe22205ad4be94451e0a4c3a20d7bfa5d","modified":1540473577250},{"_id":"public/tags/PHP/index.html","hash":"138e50ebe22205ad4be94451e0a4c3a20d7bfa5d","modified":1540473577250},{"_id":"public/tags/分页/index.html","hash":"138e50ebe22205ad4be94451e0a4c3a20d7bfa5d","modified":1540473577250},{"_id":"public/tags/shell/index.html","hash":"7c91a7307d71e25de7123a80b6651fcc49211996","modified":1540473577250},{"_id":"public/tags/电影/index.html","hash":"35ea89f003206c99e765e44fbb4797d4b3163d39","modified":1540473577250},{"_id":"public/2017/08/20/redis非权威指南(基本知识)/index.html","hash":"5b354be69504d62e3f1ab7524268023ec4efb451","modified":1540473577250},{"_id":"public/2017/06/01/前端分页逻辑的思考/index.html","hash":"fd107d8338db2f894931ffcca8dfb58e9c3c8ac1","modified":1540473577251},{"_id":"public/2017/05/31/SSH的原理和运用/index.html","hash":"0aba5439328e0f7764bb19ed496928e66fa27ad2","modified":1540473577251},{"_id":"public/2017/05/20/简述应用程序接口(API)/index.html","hash":"b950562c50b5d7b68c8370152c8c6895e609f84b","modified":1540473577251},{"_id":"public/2017/05/20/Hadoop+Hbase+ZooKeeper集群搭建方法/index.html","hash":"e2fed19e706853f25c4754e1e74bcba16683c316","modified":1540473577251},{"_id":"public/2017/05/20/Python，Re模块的学习/index.html","hash":"8a579c605e310d29655f59a297884ecfa9c1d2a5","modified":1540473577251},{"_id":"public/2017/05/20/基本的shell操作HBase/index.html","hash":"42ee8430b569068d67d0dbafe6f875bd09ff37fd","modified":1540473577251},{"_id":"public/index.html","hash":"1fe4a67eacdf47e0d75af998a8cdf362c634699d","modified":1540473577251},{"_id":"public/CNAME","hash":"ccd6123bea45e897139a473830592ff203cf1d74","modified":1540473577287},{"_id":"public/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1540473577287},{"_id":"public/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1540473577288},{"_id":"public/images/abstract.png","hash":"f981405269dbd0e8004364ebcb8220c58934ef31","modified":1540473577288},{"_id":"public/images/alert.png","hash":"1faab50a7d611cec2094e495659037d83ffa9fcb","modified":1540473577288},{"_id":"public/images/cate.png","hash":"8da3b9953df6e425e45a757d60ac04bf3314f683","modified":1540473577288},{"_id":"public/images/icon_dot.jpg","hash":"c3184b95085e80aaf819dd01b104908580294813","modified":1540473577288},{"_id":"public/images/icon_doton.jpg","hash":"8159ced4568b18cd9a9f5fc2624e6cf7cf24788e","modified":1540473577288},{"_id":"public/images/logo.png","hash":"b6437d9e28c5efc90e24bc1ccc898194e79cd80f","modified":1540473577288},{"_id":"public/images/readme.png","hash":"af2e7b2dbd8dc00ded644be760f7de284a2ba8c8","modified":1540473577289},{"_id":"public/images/right-menu.png","hash":"047a16873cb4abf017a5a03bf775c030feb00549","modified":1540473577289},{"_id":"public/images/search.png","hash":"3c6a8d6f0a2e33e1e9ef3abba34d840cd0e5c21a","modified":1540473577289},{"_id":"public/images/search_white.png","hash":"2cd2ae869c53fe9649d6d7da81ba9ae135f81b7d","modified":1540473577289},{"_id":"public/images/totop.png","hash":"4a2ebb1159729805d1b213f19871edbeb90de2e8","modified":1540473577289},{"_id":"public/images/totop2.png","hash":"906ecfc90979db2425ed1c3e372e9c1b7784112d","modified":1540473577289},{"_id":"public/scss/bubuzou.scss","hash":"844926ed4be619cd6b02682eca0447e4d0f6ed70","modified":1540473577289},{"_id":"public/images/favicon.ico","hash":"9f68734133818a70fa8b13b7ac1cb43c0a482745","modified":1540473577312},{"_id":"public/README.html","hash":"63be1f003fe938b5e3c4949f49f5827aa60c807d","modified":1540473577345},{"_id":"public/scripts/arAnchor.js","hash":"9268cffbf54dedc3557c3ebf1f7cfe90fac7d438","modified":1540473577345},{"_id":"public/scripts/main.js","hash":"d378b6350bb637e1a54772dafefd26f379f344f5","modified":1540473577347},{"_id":"public/css/bubuzou.css","hash":"b3777a8fe4bfa3d91caa112b84cc9b0ba8dd95b0","modified":1540473577348},{"_id":"public/scripts/jquery-1.8.2.min.js","hash":"d09d3a99ed25d0f1fbe6856de9e14ffd33557256","modified":1540473577348}],"Category":[{"name":"PHP","_id":"cjnom6wny0002c0fyo4pprnln"},{"name":"Elasticsearch非权威指南","_id":"cjnom6wor0007c0fyqlh7b4by"},{"name":"live","_id":"cjnom6wpa000dc0fyduy68t0p"},{"name":"bigdata","_id":"cjnom6wpj000jc0fyaanikgj0"},{"name":"数据库","_id":"cjnom6wqb000qc0fyv0c1gak7"},{"name":"Python","_id":"cjnom6wqq000zc0fy75n0dbm7"},{"name":"linux","_id":"cjnom6wr10015c0fynnwzxs2j"},{"name":"tools","_id":"cjnom6wrg001cc0fy1f7404gq"},{"name":"read","_id":"cjnom6wrm001oc0fyhtcmefh6"}],"Data":[],"Page":[{"title":"about","date":"2017-06-01T14:08:54.000Z","_content":"# 好好生活，天天向上！\n布局先做好，内容慢慢填。\n<!--more-->\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-06-01 22:08:54\n---\n# 好好生活，天天向上！\n布局先做好，内容慢慢填。\n<!--more-->\n","updated":"2017-06-01T14:17:33.256Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjnom6xp3002wc0fy8m1a0isy","content":"<h1 id=\"好好生活，天天向上！\"><a href=\"#好好生活，天天向上！\" class=\"headerlink\" title=\"好好生活，天天向上！\"></a>好好生活，天天向上！</h1><p>布局先做好，内容慢慢填。<br><a id=\"more\"></a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"好好生活，天天向上！\"><a href=\"#好好生活，天天向上！\" class=\"headerlink\" title=\"好好生活，天天向上！\"></a>好好生活，天天向上！</h1><p>布局先做好，内容慢慢填。<br>","more":"</p>"},{"title":"categories","date":"2017-06-01T14:28:43.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-06-01 22:28:43\ntype: \"categories\"\n---\n","updated":"2017-06-01T14:29:45.243Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjnom6xpc002yc0fyb1xizxh4","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"11个提问频率最高的PHP面试题","date":"2017-05-20T12:07:31.000Z","desc":"php常见的面试题11个，也是常用的方法。","keywords":"php 面试题","_content":"### 问题：请用最简单的语言告诉我PHP是什么？\n回答：PHP全称：Hypertext Preprocessor，是一种用来开发动态网站的服务器脚本语言。\n<!--more-->\n### 问题：什么是MVC？\n回答：MVC由Model（模型）, View（视图）和Controller（控制器）组成，PHP MVC可以更高效地管理好3个不同层的PHP代码。\n**Model**：数据信息存取层。\n**View**：view层负责将应用的数据以特定的方式展现在界面上。\n**Controller**：通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据。\n\n### 问题：在页面中引用CSS有几种方式？\n回答：在页面中使用CSS有3中方式：\n引用外部CSS文件\n内部定义Style样式\n内联样式\n\n### 问题：PHP支持多继承吗？\n回答：不可以。PHP类只能继承一个父类，并用关键字“extends”标识。\n\n### 问题：请问PHP中echo和print有什么区别？\n这两个看起来很相似，因为它们都是将一些值打印在屏幕上。但是echo和print的本质区别在于：echo用来输出字符串，显示多个值的时候可以用逗号隔开。只支持基本类型，print不仅可以打印字符串值，而且可以打印函数的返回值。\n\n### 问题：请问GET和POST方法有什么区别？\n回答：我们再网页上填写的表单信息都可以通过这两个方法将数据传递到服务器上，当我们使用GET方法是，所有的信息都会出现在URL地址中，并且使用GET方法最多只能传递1024个字符，所以如果在传输量小或者安全性不那么重要的情况下可以使用GET方法。说到POST方法，最多可以传输2MB字节的数据，而且可以根据需要调节。\n\n### 问题：PHP中获取图像尺寸大小的方法是什么？\n回答：getimagesize () 获取图片的尺寸\nImagesx () 获取图片的宽度\nImagesy () 获取图片的高度\n\n### 问题：PHP中的PEAR是什么？\n回答：PEAR也就是为PHP扩展与应用库（PHP Extension and Application Repository），它是一个PHP扩展及应用的一个代码仓库。\n\n### 问题：如何用PHP和MySQL上传视频？\n回答：我们可以在数据库中存放视频的地址，而不需要将真正的视频数据存在数据库中。可以将视频数据存放在服务器的指定文件夹下，上传的默认大小是2MB，但是我们也可以在php.ini文件中修改max_file size选项来改变。\n\n### 问题：PHP中的错误类型有哪些？\n回答：PHP中遇到的错误类型大致有3类。\n**提示**：这都是一些非常正常的信息，而非重大的错误，有些甚至不会展示给用户。比如访问不存在的变量。\n**警告**：这是有点严重的错误，将会把警告信息展示给用户，但不会影响代码的输出，比如包含一些不存在的文件。\n**错误**：这是真正的严重错误，比如访问不存在的PHP类。\n\n###问题：如何在PHP中定义常量？\n回答：PHP中使用Define () 来定义常量。\ndefine (“Newconstant”, 30);\n\n###问题：如何不使用submit按钮来提交表单？\n如果我们不想用submit按钮来提交表单，我们也可以用超链接来提交，我们可以这样写代码：\n","source":"_posts/11个提问频率最高的PHP面试题.md","raw":"---\ntitle: 11个提问频率最高的PHP面试题\ndate: 2017-05-20 20:07:31\ntags:\n  - php \ndesc: php常见的面试题11个，也是常用的方法。\nkeywords: php 面试题 \ncategories:\n- PHP\n\n---\n### 问题：请用最简单的语言告诉我PHP是什么？\n回答：PHP全称：Hypertext Preprocessor，是一种用来开发动态网站的服务器脚本语言。\n<!--more-->\n### 问题：什么是MVC？\n回答：MVC由Model（模型）, View（视图）和Controller（控制器）组成，PHP MVC可以更高效地管理好3个不同层的PHP代码。\n**Model**：数据信息存取层。\n**View**：view层负责将应用的数据以特定的方式展现在界面上。\n**Controller**：通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据。\n\n### 问题：在页面中引用CSS有几种方式？\n回答：在页面中使用CSS有3中方式：\n引用外部CSS文件\n内部定义Style样式\n内联样式\n\n### 问题：PHP支持多继承吗？\n回答：不可以。PHP类只能继承一个父类，并用关键字“extends”标识。\n\n### 问题：请问PHP中echo和print有什么区别？\n这两个看起来很相似，因为它们都是将一些值打印在屏幕上。但是echo和print的本质区别在于：echo用来输出字符串，显示多个值的时候可以用逗号隔开。只支持基本类型，print不仅可以打印字符串值，而且可以打印函数的返回值。\n\n### 问题：请问GET和POST方法有什么区别？\n回答：我们再网页上填写的表单信息都可以通过这两个方法将数据传递到服务器上，当我们使用GET方法是，所有的信息都会出现在URL地址中，并且使用GET方法最多只能传递1024个字符，所以如果在传输量小或者安全性不那么重要的情况下可以使用GET方法。说到POST方法，最多可以传输2MB字节的数据，而且可以根据需要调节。\n\n### 问题：PHP中获取图像尺寸大小的方法是什么？\n回答：getimagesize () 获取图片的尺寸\nImagesx () 获取图片的宽度\nImagesy () 获取图片的高度\n\n### 问题：PHP中的PEAR是什么？\n回答：PEAR也就是为PHP扩展与应用库（PHP Extension and Application Repository），它是一个PHP扩展及应用的一个代码仓库。\n\n### 问题：如何用PHP和MySQL上传视频？\n回答：我们可以在数据库中存放视频的地址，而不需要将真正的视频数据存在数据库中。可以将视频数据存放在服务器的指定文件夹下，上传的默认大小是2MB，但是我们也可以在php.ini文件中修改max_file size选项来改变。\n\n### 问题：PHP中的错误类型有哪些？\n回答：PHP中遇到的错误类型大致有3类。\n**提示**：这都是一些非常正常的信息，而非重大的错误，有些甚至不会展示给用户。比如访问不存在的变量。\n**警告**：这是有点严重的错误，将会把警告信息展示给用户，但不会影响代码的输出，比如包含一些不存在的文件。\n**错误**：这是真正的严重错误，比如访问不存在的PHP类。\n\n###问题：如何在PHP中定义常量？\n回答：PHP中使用Define () 来定义常量。\ndefine (“Newconstant”, 30);\n\n###问题：如何不使用submit按钮来提交表单？\n如果我们不想用submit按钮来提交表单，我们也可以用超链接来提交，我们可以这样写代码：\n","slug":"11个提问频率最高的PHP面试题","published":1,"updated":"2017-12-29T14:34:56.833Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnom6wnh0000c0fy17tanfmo","content":"<h3 id=\"问题：请用最简单的语言告诉我PHP是什么？\"><a href=\"#问题：请用最简单的语言告诉我PHP是什么？\" class=\"headerlink\" title=\"问题：请用最简单的语言告诉我PHP是什么？\"></a>问题：请用最简单的语言告诉我PHP是什么？</h3><p>回答：PHP全称：Hypertext Preprocessor，是一种用来开发动态网站的服务器脚本语言。<br><a id=\"more\"></a></p>\n<h3 id=\"问题：什么是MVC？\"><a href=\"#问题：什么是MVC？\" class=\"headerlink\" title=\"问题：什么是MVC？\"></a>问题：什么是MVC？</h3><p>回答：MVC由Model（模型）, View（视图）和Controller（控制器）组成，PHP MVC可以更高效地管理好3个不同层的PHP代码。<br><strong>Model</strong>：数据信息存取层。<br><strong>View</strong>：view层负责将应用的数据以特定的方式展现在界面上。<br><strong>Controller</strong>：通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据。</p>\n<h3 id=\"问题：在页面中引用CSS有几种方式？\"><a href=\"#问题：在页面中引用CSS有几种方式？\" class=\"headerlink\" title=\"问题：在页面中引用CSS有几种方式？\"></a>问题：在页面中引用CSS有几种方式？</h3><p>回答：在页面中使用CSS有3中方式：<br>引用外部CSS文件<br>内部定义Style样式<br>内联样式</p>\n<h3 id=\"问题：PHP支持多继承吗？\"><a href=\"#问题：PHP支持多继承吗？\" class=\"headerlink\" title=\"问题：PHP支持多继承吗？\"></a>问题：PHP支持多继承吗？</h3><p>回答：不可以。PHP类只能继承一个父类，并用关键字“extends”标识。</p>\n<h3 id=\"问题：请问PHP中echo和print有什么区别？\"><a href=\"#问题：请问PHP中echo和print有什么区别？\" class=\"headerlink\" title=\"问题：请问PHP中echo和print有什么区别？\"></a>问题：请问PHP中echo和print有什么区别？</h3><p>这两个看起来很相似，因为它们都是将一些值打印在屏幕上。但是echo和print的本质区别在于：echo用来输出字符串，显示多个值的时候可以用逗号隔开。只支持基本类型，print不仅可以打印字符串值，而且可以打印函数的返回值。</p>\n<h3 id=\"问题：请问GET和POST方法有什么区别？\"><a href=\"#问题：请问GET和POST方法有什么区别？\" class=\"headerlink\" title=\"问题：请问GET和POST方法有什么区别？\"></a>问题：请问GET和POST方法有什么区别？</h3><p>回答：我们再网页上填写的表单信息都可以通过这两个方法将数据传递到服务器上，当我们使用GET方法是，所有的信息都会出现在URL地址中，并且使用GET方法最多只能传递1024个字符，所以如果在传输量小或者安全性不那么重要的情况下可以使用GET方法。说到POST方法，最多可以传输2MB字节的数据，而且可以根据需要调节。</p>\n<h3 id=\"问题：PHP中获取图像尺寸大小的方法是什么？\"><a href=\"#问题：PHP中获取图像尺寸大小的方法是什么？\" class=\"headerlink\" title=\"问题：PHP中获取图像尺寸大小的方法是什么？\"></a>问题：PHP中获取图像尺寸大小的方法是什么？</h3><p>回答：getimagesize () 获取图片的尺寸<br>Imagesx () 获取图片的宽度<br>Imagesy () 获取图片的高度</p>\n<h3 id=\"问题：PHP中的PEAR是什么？\"><a href=\"#问题：PHP中的PEAR是什么？\" class=\"headerlink\" title=\"问题：PHP中的PEAR是什么？\"></a>问题：PHP中的PEAR是什么？</h3><p>回答：PEAR也就是为PHP扩展与应用库（PHP Extension and Application Repository），它是一个PHP扩展及应用的一个代码仓库。</p>\n<h3 id=\"问题：如何用PHP和MySQL上传视频？\"><a href=\"#问题：如何用PHP和MySQL上传视频？\" class=\"headerlink\" title=\"问题：如何用PHP和MySQL上传视频？\"></a>问题：如何用PHP和MySQL上传视频？</h3><p>回答：我们可以在数据库中存放视频的地址，而不需要将真正的视频数据存在数据库中。可以将视频数据存放在服务器的指定文件夹下，上传的默认大小是2MB，但是我们也可以在php.ini文件中修改max_file size选项来改变。</p>\n<h3 id=\"问题：PHP中的错误类型有哪些？\"><a href=\"#问题：PHP中的错误类型有哪些？\" class=\"headerlink\" title=\"问题：PHP中的错误类型有哪些？\"></a>问题：PHP中的错误类型有哪些？</h3><p>回答：PHP中遇到的错误类型大致有3类。<br><strong>提示</strong>：这都是一些非常正常的信息，而非重大的错误，有些甚至不会展示给用户。比如访问不存在的变量。<br><strong>警告</strong>：这是有点严重的错误，将会把警告信息展示给用户，但不会影响代码的输出，比如包含一些不存在的文件。<br><strong>错误</strong>：这是真正的严重错误，比如访问不存在的PHP类。</p>\n<p>###问题：如何在PHP中定义常量？<br>回答：PHP中使用Define () 来定义常量。<br>define (“Newconstant”, 30);</p>\n<p>###问题：如何不使用submit按钮来提交表单？<br>如果我们不想用submit按钮来提交表单，我们也可以用超链接来提交，我们可以这样写代码：</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"问题：请用最简单的语言告诉我PHP是什么？\"><a href=\"#问题：请用最简单的语言告诉我PHP是什么？\" class=\"headerlink\" title=\"问题：请用最简单的语言告诉我PHP是什么？\"></a>问题：请用最简单的语言告诉我PHP是什么？</h3><p>回答：PHP全称：Hypertext Preprocessor，是一种用来开发动态网站的服务器脚本语言。<br>","more":"</p>\n<h3 id=\"问题：什么是MVC？\"><a href=\"#问题：什么是MVC？\" class=\"headerlink\" title=\"问题：什么是MVC？\"></a>问题：什么是MVC？</h3><p>回答：MVC由Model（模型）, View（视图）和Controller（控制器）组成，PHP MVC可以更高效地管理好3个不同层的PHP代码。<br><strong>Model</strong>：数据信息存取层。<br><strong>View</strong>：view层负责将应用的数据以特定的方式展现在界面上。<br><strong>Controller</strong>：通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据。</p>\n<h3 id=\"问题：在页面中引用CSS有几种方式？\"><a href=\"#问题：在页面中引用CSS有几种方式？\" class=\"headerlink\" title=\"问题：在页面中引用CSS有几种方式？\"></a>问题：在页面中引用CSS有几种方式？</h3><p>回答：在页面中使用CSS有3中方式：<br>引用外部CSS文件<br>内部定义Style样式<br>内联样式</p>\n<h3 id=\"问题：PHP支持多继承吗？\"><a href=\"#问题：PHP支持多继承吗？\" class=\"headerlink\" title=\"问题：PHP支持多继承吗？\"></a>问题：PHP支持多继承吗？</h3><p>回答：不可以。PHP类只能继承一个父类，并用关键字“extends”标识。</p>\n<h3 id=\"问题：请问PHP中echo和print有什么区别？\"><a href=\"#问题：请问PHP中echo和print有什么区别？\" class=\"headerlink\" title=\"问题：请问PHP中echo和print有什么区别？\"></a>问题：请问PHP中echo和print有什么区别？</h3><p>这两个看起来很相似，因为它们都是将一些值打印在屏幕上。但是echo和print的本质区别在于：echo用来输出字符串，显示多个值的时候可以用逗号隔开。只支持基本类型，print不仅可以打印字符串值，而且可以打印函数的返回值。</p>\n<h3 id=\"问题：请问GET和POST方法有什么区别？\"><a href=\"#问题：请问GET和POST方法有什么区别？\" class=\"headerlink\" title=\"问题：请问GET和POST方法有什么区别？\"></a>问题：请问GET和POST方法有什么区别？</h3><p>回答：我们再网页上填写的表单信息都可以通过这两个方法将数据传递到服务器上，当我们使用GET方法是，所有的信息都会出现在URL地址中，并且使用GET方法最多只能传递1024个字符，所以如果在传输量小或者安全性不那么重要的情况下可以使用GET方法。说到POST方法，最多可以传输2MB字节的数据，而且可以根据需要调节。</p>\n<h3 id=\"问题：PHP中获取图像尺寸大小的方法是什么？\"><a href=\"#问题：PHP中获取图像尺寸大小的方法是什么？\" class=\"headerlink\" title=\"问题：PHP中获取图像尺寸大小的方法是什么？\"></a>问题：PHP中获取图像尺寸大小的方法是什么？</h3><p>回答：getimagesize () 获取图片的尺寸<br>Imagesx () 获取图片的宽度<br>Imagesy () 获取图片的高度</p>\n<h3 id=\"问题：PHP中的PEAR是什么？\"><a href=\"#问题：PHP中的PEAR是什么？\" class=\"headerlink\" title=\"问题：PHP中的PEAR是什么？\"></a>问题：PHP中的PEAR是什么？</h3><p>回答：PEAR也就是为PHP扩展与应用库（PHP Extension and Application Repository），它是一个PHP扩展及应用的一个代码仓库。</p>\n<h3 id=\"问题：如何用PHP和MySQL上传视频？\"><a href=\"#问题：如何用PHP和MySQL上传视频？\" class=\"headerlink\" title=\"问题：如何用PHP和MySQL上传视频？\"></a>问题：如何用PHP和MySQL上传视频？</h3><p>回答：我们可以在数据库中存放视频的地址，而不需要将真正的视频数据存在数据库中。可以将视频数据存放在服务器的指定文件夹下，上传的默认大小是2MB，但是我们也可以在php.ini文件中修改max_file size选项来改变。</p>\n<h3 id=\"问题：PHP中的错误类型有哪些？\"><a href=\"#问题：PHP中的错误类型有哪些？\" class=\"headerlink\" title=\"问题：PHP中的错误类型有哪些？\"></a>问题：PHP中的错误类型有哪些？</h3><p>回答：PHP中遇到的错误类型大致有3类。<br><strong>提示</strong>：这都是一些非常正常的信息，而非重大的错误，有些甚至不会展示给用户。比如访问不存在的变量。<br><strong>警告</strong>：这是有点严重的错误，将会把警告信息展示给用户，但不会影响代码的输出，比如包含一些不存在的文件。<br><strong>错误</strong>：这是真正的严重错误，比如访问不存在的PHP类。</p>\n<p>###问题：如何在PHP中定义常量？<br>回答：PHP中使用Define () 来定义常量。<br>define (“Newconstant”, 30);</p>\n<p>###问题：如何不使用submit按钮来提交表单？<br>如果我们不想用submit按钮来提交表单，我们也可以用超链接来提交，我们可以这样写代码：</p>"},{"title":"Elasticsearch名词解释","date":"2017-05-20T12:07:31.000Z","desc":"Elasticsearch非权威指南-名词的解释","keywords":"elasticsearch 学习笔记 大数据 非权威指南","_content":"本来这个打算后面再来写的，看到简书上一个朋友归纳好了，我就直接借过来了。\n\n## 数据层面：\n\n> **Index**：</span>Elasticsearch用来存储数据的逻辑区域，它类似于关系型数据库中的db概念。一个index可以在一个或者多个shard上面，同时一个shard也可能会有多个replicas。\n\n>** Document type**：为了查询需要，一个index可能会有多种类型document，也就是会有多个         document type，但需要注意，不同的document type里面同名的field一定要是相同类型的。\n\n> **Document**：Elasticsearch里面存储的实体数据，类似于关系数据中一个table里面的一行数据。\n\n> **field：**document由多个field组成，不同类型的document里面同名的field一定具有相同的类型。\n\n>**multivalued**： document里面field可以重复出现，也就是一个field会有多个值，即multivalued。\n\n>**Mapping**：存储field的相关映射信息，不同document type会有不同的mapping。\n\n* *对于熟悉MySQL的童鞋，我们只需要大概认为Index就是一个database，document就是一行数据，field就是table的column，mapping就是table的定义，而document type就是一个table就可以了。*\n***\n*[《elasticsearch学习笔记》目录](http://www.jianshu.com/p/ede55b4110b1)*\n*本笔记欢迎转载，欢迎分享，转载分享不用通知作者。不过，如果可以的话希望能注明出处，看完文章还能点个赞。*","source":"_posts/ES一些名词的解释.md","raw":"---\ntitle: Elasticsearch名词解释\ndate: 2017-05-20 20:07:31\ntags:\n  - Elasticsearch\ndesc: Elasticsearch非权威指南-名词的解释\nkeywords: elasticsearch 学习笔记 大数据 非权威指南 \ncategories:\n- Elasticsearch非权威指南\n\n---\n本来这个打算后面再来写的，看到简书上一个朋友归纳好了，我就直接借过来了。\n\n## 数据层面：\n\n> **Index**：</span>Elasticsearch用来存储数据的逻辑区域，它类似于关系型数据库中的db概念。一个index可以在一个或者多个shard上面，同时一个shard也可能会有多个replicas。\n\n>** Document type**：为了查询需要，一个index可能会有多种类型document，也就是会有多个         document type，但需要注意，不同的document type里面同名的field一定要是相同类型的。\n\n> **Document**：Elasticsearch里面存储的实体数据，类似于关系数据中一个table里面的一行数据。\n\n> **field：**document由多个field组成，不同类型的document里面同名的field一定具有相同的类型。\n\n>**multivalued**： document里面field可以重复出现，也就是一个field会有多个值，即multivalued。\n\n>**Mapping**：存储field的相关映射信息，不同document type会有不同的mapping。\n\n* *对于熟悉MySQL的童鞋，我们只需要大概认为Index就是一个database，document就是一行数据，field就是table的column，mapping就是table的定义，而document type就是一个table就可以了。*\n***\n*[《elasticsearch学习笔记》目录](http://www.jianshu.com/p/ede55b4110b1)*\n*本笔记欢迎转载，欢迎分享，转载分享不用通知作者。不过，如果可以的话希望能注明出处，看完文章还能点个赞。*","slug":"ES一些名词的解释","published":1,"updated":"2017-06-25T10:24:07.690Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnom6wnt0001c0fygfjuq102","content":"<p>本来这个打算后面再来写的，看到简书上一个朋友归纳好了，我就直接借过来了。</p>\n<h2 id=\"数据层面：\"><a href=\"#数据层面：\" class=\"headerlink\" title=\"数据层面：\"></a>数据层面：</h2><blockquote>\n<p><strong>Index</strong>：Elasticsearch用来存储数据的逻辑区域，它类似于关系型数据库中的db概念。一个index可以在一个或者多个shard上面，同时一个shard也可能会有多个replicas。</p>\n<p><strong> Document type</strong>：为了查询需要，一个index可能会有多种类型document，也就是会有多个         document type，但需要注意，不同的document type里面同名的field一定要是相同类型的。</p>\n<p><strong>Document</strong>：Elasticsearch里面存储的实体数据，类似于关系数据中一个table里面的一行数据。</p>\n<p><strong>field：</strong>document由多个field组成，不同类型的document里面同名的field一定具有相同的类型。</p>\n<p><strong>multivalued</strong>： document里面field可以重复出现，也就是一个field会有多个值，即multivalued。</p>\n<p><strong>Mapping</strong>：存储field的相关映射信息，不同document type会有不同的mapping。</p>\n</blockquote>\n<ul>\n<li><em>对于熟悉MySQL的童鞋，我们只需要大概认为Index就是一个database，document就是一行数据，field就是table的column，mapping就是table的定义，而document type就是一个table就可以了。</em></li>\n</ul>\n<hr>\n<p><em><a href=\"http://www.jianshu.com/p/ede55b4110b1\" target=\"_blank\" rel=\"external\">《elasticsearch学习笔记》目录</a></em><br><em>本笔记欢迎转载，欢迎分享，转载分享不用通知作者。不过，如果可以的话希望能注明出处，看完文章还能点个赞。</em></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本来这个打算后面再来写的，看到简书上一个朋友归纳好了，我就直接借过来了。</p>\n<h2 id=\"数据层面：\"><a href=\"#数据层面：\" class=\"headerlink\" title=\"数据层面：\"></a>数据层面：</h2><blockquote>\n<p><strong>Index</strong>：Elasticsearch用来存储数据的逻辑区域，它类似于关系型数据库中的db概念。一个index可以在一个或者多个shard上面，同时一个shard也可能会有多个replicas。</p>\n<p><strong> Document type</strong>：为了查询需要，一个index可能会有多种类型document，也就是会有多个         document type，但需要注意，不同的document type里面同名的field一定要是相同类型的。</p>\n<p><strong>Document</strong>：Elasticsearch里面存储的实体数据，类似于关系数据中一个table里面的一行数据。</p>\n<p><strong>field：</strong>document由多个field组成，不同类型的document里面同名的field一定具有相同的类型。</p>\n<p><strong>multivalued</strong>： document里面field可以重复出现，也就是一个field会有多个值，即multivalued。</p>\n<p><strong>Mapping</strong>：存储field的相关映射信息，不同document type会有不同的mapping。</p>\n</blockquote>\n<ul>\n<li><em>对于熟悉MySQL的童鞋，我们只需要大概认为Index就是一个database，document就是一行数据，field就是table的column，mapping就是table的定义，而document type就是一个table就可以了。</em></li>\n</ul>\n<hr>\n<p><em><a href=\"http://www.jianshu.com/p/ede55b4110b1\" target=\"_blank\" rel=\"external\">《elasticsearch学习笔记》目录</a></em><br><em>本笔记欢迎转载，欢迎分享，转载分享不用通知作者。不过，如果可以的话希望能注明出处，看完文章还能点个赞。</em></p>\n"},{"title":"2018_应该静下来","comments":1,"date":"2018-02-27T14:32:35.000Z","keywords":"日志 心情记录","_content":"\n写下这个日志标题的时候还是三月份。开始写内容的时候已经是6月了。  \n\n现在还清楚的记得那个时候的心情：早期的项目由于当时能力问题和当时认知的限制，留下了很多bug，客户提出来需要升级。我在其中感受到了一些不满意。晚上下班后的我心情有些低落。思来想去，决定痛改这个项目，并暗自告诉自己。以后再也不写烂代码了。同时也告诉自己，这一年应该静下心来，好好的审视自己，好好的充实自己。\n\n<!--more-->\n不知不觉过了三个月，当时的感受还在，但心情又有所不同。这三个月里，我扔掉了之前的“烂代码”，重构了该项目。这三个月，每次写代码都会想起自己当时心里立下的那个flag：以后再也不写烂代码了。当然，我很清楚，我肯定又写了很多以后的我眼中的“烂代码”。但这个时候，却是有所不同。\n\n我知道，未来的我会否定我现在的这些“烂代码”，但一定不会否定我现在认真的态度。这段时间，我抱着一个敬畏的心态去写下我每行代码。也抱着敬畏的心情去过好生活。突然发现，自己好像静下来了。\n\n再说说，2018。过了今年，会完成大家口中的人生几件大事。父母渐渐变老。家里的事情也要慢慢抗在我身上了。\n\n想起2008的“年少才轻狂”，好像年少轻狂的年纪已经过去了。奔向而立之年的我，应该静下来，看清自己的位置，看清自己的方向，静下来，抛弃轻浮，静下来稳步往前。\n\n三个月前的立下的flag我会一留着，时刻告诉自己：别写烂代码，好好生活。\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=298 height=52 src=\"https://music.163.com/outchain/player?type=2&id=517567264&auto=1&height=32\"></iframe>","source":"_posts/2018-应该静下来.md","raw":"---\ntitle: 2018_应该静下来\ncomments: true\ndate: 2018-02-27 22:32:35\nkeywords: 日志 心情记录 \ntags: \n- 心情记录\n- 生活\ncategories:\n- live\n---\n\n写下这个日志标题的时候还是三月份。开始写内容的时候已经是6月了。  \n\n现在还清楚的记得那个时候的心情：早期的项目由于当时能力问题和当时认知的限制，留下了很多bug，客户提出来需要升级。我在其中感受到了一些不满意。晚上下班后的我心情有些低落。思来想去，决定痛改这个项目，并暗自告诉自己。以后再也不写烂代码了。同时也告诉自己，这一年应该静下心来，好好的审视自己，好好的充实自己。\n\n<!--more-->\n不知不觉过了三个月，当时的感受还在，但心情又有所不同。这三个月里，我扔掉了之前的“烂代码”，重构了该项目。这三个月，每次写代码都会想起自己当时心里立下的那个flag：以后再也不写烂代码了。当然，我很清楚，我肯定又写了很多以后的我眼中的“烂代码”。但这个时候，却是有所不同。\n\n我知道，未来的我会否定我现在的这些“烂代码”，但一定不会否定我现在认真的态度。这段时间，我抱着一个敬畏的心态去写下我每行代码。也抱着敬畏的心情去过好生活。突然发现，自己好像静下来了。\n\n再说说，2018。过了今年，会完成大家口中的人生几件大事。父母渐渐变老。家里的事情也要慢慢抗在我身上了。\n\n想起2008的“年少才轻狂”，好像年少轻狂的年纪已经过去了。奔向而立之年的我，应该静下来，看清自己的位置，看清自己的方向，静下来，抛弃轻浮，静下来稳步往前。\n\n三个月前的立下的flag我会一留着，时刻告诉自己：别写烂代码，好好生活。\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=298 height=52 src=\"https://music.163.com/outchain/player?type=2&id=517567264&auto=1&height=32\"></iframe>","slug":"2018-应该静下来","published":1,"updated":"2018-10-23T16:45:35.175Z","layout":"post","photos":[],"link":"","_id":"cjnom6wo50004c0fycuyin9f9","content":"<p>写下这个日志标题的时候还是三月份。开始写内容的时候已经是6月了。  </p>\n<p>现在还清楚的记得那个时候的心情：早期的项目由于当时能力问题和当时认知的限制，留下了很多bug，客户提出来需要升级。我在其中感受到了一些不满意。晚上下班后的我心情有些低落。思来想去，决定痛改这个项目，并暗自告诉自己。以后再也不写烂代码了。同时也告诉自己，这一年应该静下心来，好好的审视自己，好好的充实自己。</p>\n<a id=\"more\"></a>\n<p>不知不觉过了三个月，当时的感受还在，但心情又有所不同。这三个月里，我扔掉了之前的“烂代码”，重构了该项目。这三个月，每次写代码都会想起自己当时心里立下的那个flag：以后再也不写烂代码了。当然，我很清楚，我肯定又写了很多以后的我眼中的“烂代码”。但这个时候，却是有所不同。</p>\n<p>我知道，未来的我会否定我现在的这些“烂代码”，但一定不会否定我现在认真的态度。这段时间，我抱着一个敬畏的心态去写下我每行代码。也抱着敬畏的心情去过好生活。突然发现，自己好像静下来了。</p>\n<p>再说说，2018。过了今年，会完成大家口中的人生几件大事。父母渐渐变老。家里的事情也要慢慢抗在我身上了。</p>\n<p>想起2008的“年少才轻狂”，好像年少轻狂的年纪已经过去了。奔向而立之年的我，应该静下来，看清自己的位置，看清自己的方向，静下来，抛弃轻浮，静下来稳步往前。</p>\n<p>三个月前的立下的flag我会一留着，时刻告诉自己：别写烂代码，好好生活。</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"298\" height=\"52\" src=\"https://music.163.com/outchain/player?type=2&id=517567264&auto=1&height=32\"></iframe>","site":{"data":{}},"excerpt":"<p>写下这个日志标题的时候还是三月份。开始写内容的时候已经是6月了。  </p>\n<p>现在还清楚的记得那个时候的心情：早期的项目由于当时能力问题和当时认知的限制，留下了很多bug，客户提出来需要升级。我在其中感受到了一些不满意。晚上下班后的我心情有些低落。思来想去，决定痛改这个项目，并暗自告诉自己。以后再也不写烂代码了。同时也告诉自己，这一年应该静下心来，好好的审视自己，好好的充实自己。</p>","more":"<p>不知不觉过了三个月，当时的感受还在，但心情又有所不同。这三个月里，我扔掉了之前的“烂代码”，重构了该项目。这三个月，每次写代码都会想起自己当时心里立下的那个flag：以后再也不写烂代码了。当然，我很清楚，我肯定又写了很多以后的我眼中的“烂代码”。但这个时候，却是有所不同。</p>\n<p>我知道，未来的我会否定我现在的这些“烂代码”，但一定不会否定我现在认真的态度。这段时间，我抱着一个敬畏的心态去写下我每行代码。也抱着敬畏的心情去过好生活。突然发现，自己好像静下来了。</p>\n<p>再说说，2018。过了今年，会完成大家口中的人生几件大事。父母渐渐变老。家里的事情也要慢慢抗在我身上了。</p>\n<p>想起2008的“年少才轻狂”，好像年少轻狂的年纪已经过去了。奔向而立之年的我，应该静下来，看清自己的位置，看清自己的方向，静下来，抛弃轻浮，静下来稳步往前。</p>\n<p>三个月前的立下的flag我会一留着，时刻告诉自己：别写烂代码，好好生活。</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"298\" height=\"52\" src=\"https://music.163.com/outchain/player?type=2&id=517567264&auto=1&height=32\"></iframe>"},{"title":"Hadoop+Hbase+ZooKeeper集群搭建方法","date":"2017-05-20T12:07:31.000Z","desc":"Hadoop+Hbase+ZooKeeper集群搭建方法","keywords":"环境搭建 hadoop hbase zookeeper","_content":"[hadoop的下载地址](http://archive.apache.org/dist/hadoop/common/)\n[hbase的下载地址](http://archive.apache.org/dist/hbase/)\n[zookeeper的下载地址](http://archive.apache.org/dist/hadoop/zookeeper/)\n\n---\n\n## 1、 主机配置如下：\n（添加到/etc/hosts文件里面）   \n```\n192.168.0.211 master  \n#（用于集群主机提供hmaster namenode jobtasker服务 ）  \n192.168.0.212 s1      \n#(用于集群丛机提供regionsrever datanode tasktacuter服务)  \n192.168.0.213 s2  \n```\n<!--more-->\n## 2、安装jdk1.6.2.X  \n## 3、添加java环境变量 \n（``/etc/profile``），后执行source /etc/profile ,使环境变量立即生效\n```\nexport JAVA_HOME=/usr/java/jdk1.6.0_26/  #java 的目录\nexport CLASSPATH=$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/lib  \nexport PATH=$JAVA_HOME/bin:$PATH:$CATALINA_HOME/bin  \nexport HADOOP_HOME=/home/hadoop/hadoop  \nexport HBASE_HOME=/home/hadoop/hbase  \nPATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HBASE_HOME/bin  \n\n```\n## 4、在三台电脑上添加hadoop用户\n\n```\nuseradd hadoop \n```\n## 5、在``/home/hadoop/.bashrc``添加变量\n\n* <u>(将hadoop hbase的配置文件放到hadoop安装包根目录文件下，目的在于以后升级hadoop和hbase的时候不用重新导入配置文件)</u>\n*\n```\nexport HADOOP_CONF_DIR=/home/hadoop/hadoop-config  \nexport HBASE_CONF_DIR=/home/hadoop/hbase-config  \n```\n## 6、将hadoop hbase zookepper的安装包解压 \n到``/home/hadoop/``下，<u>并重命名</u>为``hadoop hbase zookepper``，在``home/hadoop/``下建立``hadoop-config``和``hbase-config``文件夹，并且将``home/hadoop/hadoop/conf``下的``masters、slaves、core-site、mapred-sit、hdfs-site、hadoop-env``拷贝到此文件夹，将``home/hadoop/hbase/conf``下的``hbase-site``和``hbase-env.sh``拷贝到次文件夹。\n\n## 7、修改masters、slaves文件：\n 分别为 ``master`` 和``s1``与``s2``\n\n## 8、修改``hadoop-env.sh``的变量：\n```\nexport JAVA_HOME=/usr/java/jdk1.6.0_26/  \nexport HADOOP_PID_DIR=/home/hadoop/hadoop/tmp \n \n```\n\n\n##9、修改``core-site.xml ``\n```\n<configuration> \n<property> \n<name>fs.default.name</name> \n<value>hdfs://master:9000</value> \n</property> \n</configuration> \n```\n修改``mapred-site.xml ``\n```\n<configuration> \n<property> \n   <name>mapred.job.tracker</name> \n   <value>hdfs://master:9001/</value> \n</property>  \n</configuration> \n```\n修改``hdfs-site.xml``（<u>name和data文件夹不要手动建立</u>）\n```\n<configuration> \n<property> \n<name>dfs.name.dir</name> \n<value>/home/hadoop/hadoop/name</value> \n</property> \n<property> \n<name>dfs.data.dir</name> \n<value>/home/hadoop/hadoop/data/</value> \n</property> \n<property> \n   <name>dfs.replication</name> \n   <value>3</value> \n</property> \n</configuration>\n```\n## 10、设置master, s1, s2机几台器之间无密码访问：\n\n## 11、复制目录至集群丛机\n```\nscp -r /home/hadoop/hadoop s1:/home/hadoop\nscp -r /home/hadoop/hadoop s2:/home/hadoop\n```\n## 12、切换到``/home/hadoop/hadoop``目录下\n执行\n\n```\nbin/hadoop namenode -format\n\n```\n(格式化master主机生成name data tmp等文件夹)\n\n## 13、启动namenode\n执行 \n```\nbin/start-dfs.sh\n\n```\n使用jps命令查看``namenode、secondnamenode``是否正常启动：\nie里面输入http://master:50070 查看`namenode`的相关配置信息、运行状态和日志文件\n\n## 14、启动`mapred`\n执行 \n```\nbin/start-mapred.sh\n```\n使用``jps``命令查看``nomenode、secondnamenode``是否正常启动：\nie里面输入http://master:50030  查看jobtasker的相关配置信息、运行状态和日志文件\n\n---\n\n# hbase+zookeeper集群搭建：\n\n## 1、复制目录修改文件\n将``/home/hadoop/hadoop/conf/``目录下的``hbase-site.xml、regionserver和hbase-env.sh``拷贝到``/home/hadoop/hbase-config/``目录下；\n编辑``hbase-site.xml``配置文件，如下：\n \n```\n<property> \n<name>hbase.rootdir</name> \n<value>hdfs://master:9000/hbase</value> \n</property> \n<property> \n<name>hbase.cluster.distributed</name> \n<value>true</value> \n</property> \n<property> \n<name>hbase.master</name> \n<value>master</value> \n</property> \n<property> \n<name>hbase.zookeeper.quorum</name> \n<value>s1,s2</value> \n</property> \n<property> \n<name>zookeeper.session.timeout</name> \n<value>60000000</value> \n</property> \n<property> \n<name>hbase.zookeeper.property.clientport</name> \n<value>2222</value> \n</property> \n```\n\n## 2、编辑regionserver文件\n```\nS1 \nS2\n```\n\n## 3、编辑hbase-env.xml文件\n\n```\nexport JAVA_HOME=/usr/java/jdk1.6.0_26/  \nexport CLASSPATH=$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/lib  \nexport PATH=$JAVA_HOME/bin:$PATH:$CATALINA_HOME/bin  \nexport HADOOP_HOME=/home/hadoop/hadoop  \nexport HBASE_HOME=/home/hadoop/hbase  \nexport HBASE_MANAGES_ZK=true \nexport PATH=$PATH:/home/hadoop/hbase/bin\n```\n\n## 4、复制文件到集群丛机\n```\nscp -r /home/hadoop/hbase s1:/home/hadoop \nscp -r /home/hadoop/hbase s2:/home/hadoop\n```\n\n## 5、进入``/home/hadoop/zookeeper/conf/``中\n\n> (1)\n```\ncp zoo_sample.cfg zoo.cfg\n```\n> (2)\n```\nvim zoo.cfg\n```\n如下： \n\n```\n# The number of milliseconds of each tick  \ntickTime=2000 \n# The number of ticks that the initial  \n# synchronization phase can take  \ninitLimit=10 \n# The number of ticks that can pass between  \n# sending a request and getting an acknowledgement  \nsyncLimit=5 \n# the directory where the snapshot is stored.  \ndataDir=/home/hadoop/zookeeper/data  \n# the port at which the clients will connect  \nclientPort=2181 \nserver.1=s1:2888:3888  \nserver.2=s2:2888:3888  \n```\n> (3)\n```\ntouch myid\n```\n*编辑：1（<u>此序号设置和zoo.cfg里面的server设置要对应</u>) \n```\nscp -r /home/hadoop/zookeeper s1:/home/hadoop \nscp -r /home/hadoop/zookeeper s2:/home/hadoop\n```\n> 4）在所有的节点执行\n```\nchown -R hadoop.hadoop /home/hadoop```\n启动hbase集群：\n（1）```/home/hadoop/hbase/bin/start-base.sh```\n（2）执行```jps```显示Hmaster是否启动\n（3）执行```bin/hbase shell```\n (4)\n```\n>create 't1' t2'' 't3'#(测试利用hmaster插入数据) \n    >list #（显示已经插入的数据） \n    >t1+t2+t3\n```\n输入：http://master:60010 \n\n*延伸：Hadoop 页面监控信息网址列表*\n\n将Hadoop中可能用到的网页地址list到下面，方便查阅：\n\n1. http://master:50030\n\n查看MapReduce上的jobtracker（在启动了hdfs和MapReduce之后查阅）\n\n2. http://master:50060 \n\n查看MapReduce上的tasktracker（在启动了hdfs和MapReduce之后查阅）\n\n3. http://master:50070  \n\n查看HDFS上的节点信息（在启动了HDFS之后查阅）\n\n4. http://master:60010/master.jsp\n\n查看master连点信息 （在启动了HDFS、MapReduce、ZooKeeper和HBase之后查阅）\n\n5. http://master:60030/regionserver.jsp\n\n查看regionserver信息（在启动了HDFS、MapReduce、ZooKeeper和HBase之后查阅）\n\n6. http://master:60010/zk.jsp\n\n查看zookeeper信息（在启动了HDFS、MapReduce、ZooKeeper和HBase之后查阅）","source":"_posts/Hadoop+Hbase+ZooKeeper集群搭建方法.md","raw":"---\ntitle: Hadoop+Hbase+ZooKeeper集群搭建方法\ndate: 2017-05-20 20:07:31\ntags:\n  - Hadoop\n  - HBase\n  - 大数据\ndesc: Hadoop+Hbase+ZooKeeper集群搭建方法\nkeywords: 环境搭建 hadoop hbase zookeeper \ncategories:\n- bigdata\n\n---\n[hadoop的下载地址](http://archive.apache.org/dist/hadoop/common/)\n[hbase的下载地址](http://archive.apache.org/dist/hbase/)\n[zookeeper的下载地址](http://archive.apache.org/dist/hadoop/zookeeper/)\n\n---\n\n## 1、 主机配置如下：\n（添加到/etc/hosts文件里面）   \n```\n192.168.0.211 master  \n#（用于集群主机提供hmaster namenode jobtasker服务 ）  \n192.168.0.212 s1      \n#(用于集群丛机提供regionsrever datanode tasktacuter服务)  \n192.168.0.213 s2  \n```\n<!--more-->\n## 2、安装jdk1.6.2.X  \n## 3、添加java环境变量 \n（``/etc/profile``），后执行source /etc/profile ,使环境变量立即生效\n```\nexport JAVA_HOME=/usr/java/jdk1.6.0_26/  #java 的目录\nexport CLASSPATH=$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/lib  \nexport PATH=$JAVA_HOME/bin:$PATH:$CATALINA_HOME/bin  \nexport HADOOP_HOME=/home/hadoop/hadoop  \nexport HBASE_HOME=/home/hadoop/hbase  \nPATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HBASE_HOME/bin  \n\n```\n## 4、在三台电脑上添加hadoop用户\n\n```\nuseradd hadoop \n```\n## 5、在``/home/hadoop/.bashrc``添加变量\n\n* <u>(将hadoop hbase的配置文件放到hadoop安装包根目录文件下，目的在于以后升级hadoop和hbase的时候不用重新导入配置文件)</u>\n*\n```\nexport HADOOP_CONF_DIR=/home/hadoop/hadoop-config  \nexport HBASE_CONF_DIR=/home/hadoop/hbase-config  \n```\n## 6、将hadoop hbase zookepper的安装包解压 \n到``/home/hadoop/``下，<u>并重命名</u>为``hadoop hbase zookepper``，在``home/hadoop/``下建立``hadoop-config``和``hbase-config``文件夹，并且将``home/hadoop/hadoop/conf``下的``masters、slaves、core-site、mapred-sit、hdfs-site、hadoop-env``拷贝到此文件夹，将``home/hadoop/hbase/conf``下的``hbase-site``和``hbase-env.sh``拷贝到次文件夹。\n\n## 7、修改masters、slaves文件：\n 分别为 ``master`` 和``s1``与``s2``\n\n## 8、修改``hadoop-env.sh``的变量：\n```\nexport JAVA_HOME=/usr/java/jdk1.6.0_26/  \nexport HADOOP_PID_DIR=/home/hadoop/hadoop/tmp \n \n```\n\n\n##9、修改``core-site.xml ``\n```\n<configuration> \n<property> \n<name>fs.default.name</name> \n<value>hdfs://master:9000</value> \n</property> \n</configuration> \n```\n修改``mapred-site.xml ``\n```\n<configuration> \n<property> \n   <name>mapred.job.tracker</name> \n   <value>hdfs://master:9001/</value> \n</property>  \n</configuration> \n```\n修改``hdfs-site.xml``（<u>name和data文件夹不要手动建立</u>）\n```\n<configuration> \n<property> \n<name>dfs.name.dir</name> \n<value>/home/hadoop/hadoop/name</value> \n</property> \n<property> \n<name>dfs.data.dir</name> \n<value>/home/hadoop/hadoop/data/</value> \n</property> \n<property> \n   <name>dfs.replication</name> \n   <value>3</value> \n</property> \n</configuration>\n```\n## 10、设置master, s1, s2机几台器之间无密码访问：\n\n## 11、复制目录至集群丛机\n```\nscp -r /home/hadoop/hadoop s1:/home/hadoop\nscp -r /home/hadoop/hadoop s2:/home/hadoop\n```\n## 12、切换到``/home/hadoop/hadoop``目录下\n执行\n\n```\nbin/hadoop namenode -format\n\n```\n(格式化master主机生成name data tmp等文件夹)\n\n## 13、启动namenode\n执行 \n```\nbin/start-dfs.sh\n\n```\n使用jps命令查看``namenode、secondnamenode``是否正常启动：\nie里面输入http://master:50070 查看`namenode`的相关配置信息、运行状态和日志文件\n\n## 14、启动`mapred`\n执行 \n```\nbin/start-mapred.sh\n```\n使用``jps``命令查看``nomenode、secondnamenode``是否正常启动：\nie里面输入http://master:50030  查看jobtasker的相关配置信息、运行状态和日志文件\n\n---\n\n# hbase+zookeeper集群搭建：\n\n## 1、复制目录修改文件\n将``/home/hadoop/hadoop/conf/``目录下的``hbase-site.xml、regionserver和hbase-env.sh``拷贝到``/home/hadoop/hbase-config/``目录下；\n编辑``hbase-site.xml``配置文件，如下：\n \n```\n<property> \n<name>hbase.rootdir</name> \n<value>hdfs://master:9000/hbase</value> \n</property> \n<property> \n<name>hbase.cluster.distributed</name> \n<value>true</value> \n</property> \n<property> \n<name>hbase.master</name> \n<value>master</value> \n</property> \n<property> \n<name>hbase.zookeeper.quorum</name> \n<value>s1,s2</value> \n</property> \n<property> \n<name>zookeeper.session.timeout</name> \n<value>60000000</value> \n</property> \n<property> \n<name>hbase.zookeeper.property.clientport</name> \n<value>2222</value> \n</property> \n```\n\n## 2、编辑regionserver文件\n```\nS1 \nS2\n```\n\n## 3、编辑hbase-env.xml文件\n\n```\nexport JAVA_HOME=/usr/java/jdk1.6.0_26/  \nexport CLASSPATH=$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/lib  \nexport PATH=$JAVA_HOME/bin:$PATH:$CATALINA_HOME/bin  \nexport HADOOP_HOME=/home/hadoop/hadoop  \nexport HBASE_HOME=/home/hadoop/hbase  \nexport HBASE_MANAGES_ZK=true \nexport PATH=$PATH:/home/hadoop/hbase/bin\n```\n\n## 4、复制文件到集群丛机\n```\nscp -r /home/hadoop/hbase s1:/home/hadoop \nscp -r /home/hadoop/hbase s2:/home/hadoop\n```\n\n## 5、进入``/home/hadoop/zookeeper/conf/``中\n\n> (1)\n```\ncp zoo_sample.cfg zoo.cfg\n```\n> (2)\n```\nvim zoo.cfg\n```\n如下： \n\n```\n# The number of milliseconds of each tick  \ntickTime=2000 \n# The number of ticks that the initial  \n# synchronization phase can take  \ninitLimit=10 \n# The number of ticks that can pass between  \n# sending a request and getting an acknowledgement  \nsyncLimit=5 \n# the directory where the snapshot is stored.  \ndataDir=/home/hadoop/zookeeper/data  \n# the port at which the clients will connect  \nclientPort=2181 \nserver.1=s1:2888:3888  \nserver.2=s2:2888:3888  \n```\n> (3)\n```\ntouch myid\n```\n*编辑：1（<u>此序号设置和zoo.cfg里面的server设置要对应</u>) \n```\nscp -r /home/hadoop/zookeeper s1:/home/hadoop \nscp -r /home/hadoop/zookeeper s2:/home/hadoop\n```\n> 4）在所有的节点执行\n```\nchown -R hadoop.hadoop /home/hadoop```\n启动hbase集群：\n（1）```/home/hadoop/hbase/bin/start-base.sh```\n（2）执行```jps```显示Hmaster是否启动\n（3）执行```bin/hbase shell```\n (4)\n```\n>create 't1' t2'' 't3'#(测试利用hmaster插入数据) \n    >list #（显示已经插入的数据） \n    >t1+t2+t3\n```\n输入：http://master:60010 \n\n*延伸：Hadoop 页面监控信息网址列表*\n\n将Hadoop中可能用到的网页地址list到下面，方便查阅：\n\n1. http://master:50030\n\n查看MapReduce上的jobtracker（在启动了hdfs和MapReduce之后查阅）\n\n2. http://master:50060 \n\n查看MapReduce上的tasktracker（在启动了hdfs和MapReduce之后查阅）\n\n3. http://master:50070  \n\n查看HDFS上的节点信息（在启动了HDFS之后查阅）\n\n4. http://master:60010/master.jsp\n\n查看master连点信息 （在启动了HDFS、MapReduce、ZooKeeper和HBase之后查阅）\n\n5. http://master:60030/regionserver.jsp\n\n查看regionserver信息（在启动了HDFS、MapReduce、ZooKeeper和HBase之后查阅）\n\n6. http://master:60010/zk.jsp\n\n查看zookeeper信息（在启动了HDFS、MapReduce、ZooKeeper和HBase之后查阅）","slug":"Hadoop+Hbase+ZooKeeper集群搭建方法","published":1,"updated":"2017-06-25T09:08:48.539Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnom6wo80005c0fy5q2kvwfx","content":"<p><a href=\"http://archive.apache.org/dist/hadoop/common/\" target=\"_blank\" rel=\"external\">hadoop的下载地址</a><br><a href=\"http://archive.apache.org/dist/hbase/\" target=\"_blank\" rel=\"external\">hbase的下载地址</a><br><a href=\"http://archive.apache.org/dist/hadoop/zookeeper/\" target=\"_blank\" rel=\"external\">zookeeper的下载地址</a></p>\n<hr>\n<h2 id=\"1、-主机配置如下：\"><a href=\"#1、-主机配置如下：\" class=\"headerlink\" title=\"1、 主机配置如下：\"></a>1、 主机配置如下：</h2><p>（添加到/etc/hosts文件里面）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">192.168.0.211 master  </div><div class=\"line\">#（用于集群主机提供hmaster namenode jobtasker服务 ）  </div><div class=\"line\">192.168.0.212 s1      </div><div class=\"line\">#(用于集群丛机提供regionsrever datanode tasktacuter服务)  </div><div class=\"line\">192.168.0.213 s2</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h2 id=\"2、安装jdk1-6-2-X\"><a href=\"#2、安装jdk1-6-2-X\" class=\"headerlink\" title=\"2、安装jdk1.6.2.X\"></a>2、安装jdk1.6.2.X</h2><h2 id=\"3、添加java环境变量\"><a href=\"#3、添加java环境变量\" class=\"headerlink\" title=\"3、添加java环境变量\"></a>3、添加java环境变量</h2><p>（<code>/etc/profile</code>），后执行source /etc/profile ,使环境变量立即生效<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">export JAVA_HOME=/usr/java/jdk1.6.0_26/  #java 的目录</div><div class=\"line\">export CLASSPATH=$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/lib  </div><div class=\"line\">export PATH=$JAVA_HOME/bin:$PATH:$CATALINA_HOME/bin  </div><div class=\"line\">export HADOOP_HOME=/home/hadoop/hadoop  </div><div class=\"line\">export HBASE_HOME=/home/hadoop/hbase  </div><div class=\"line\">PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HBASE_HOME/bin</div></pre></td></tr></table></figure></p>\n<h2 id=\"4、在三台电脑上添加hadoop用户\"><a href=\"#4、在三台电脑上添加hadoop用户\" class=\"headerlink\" title=\"4、在三台电脑上添加hadoop用户\"></a>4、在三台电脑上添加hadoop用户</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">useradd hadoop</div></pre></td></tr></table></figure>\n<h2 id=\"5、在-home-hadoop-bashrc添加变量\"><a href=\"#5、在-home-hadoop-bashrc添加变量\" class=\"headerlink\" title=\"5、在/home/hadoop/.bashrc添加变量\"></a>5、在<code>/home/hadoop/.bashrc</code>添加变量</h2><ul>\n<li><u>(将hadoop hbase的配置文件放到hadoop安装包根目录文件下，目的在于以后升级hadoop和hbase的时候不用重新导入配置文件)</u><br>*<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">export HADOOP_CONF_DIR=/home/hadoop/hadoop-config  </div><div class=\"line\">export HBASE_CONF_DIR=/home/hadoop/hbase-config</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"6、将hadoop-hbase-zookepper的安装包解压\"><a href=\"#6、将hadoop-hbase-zookepper的安装包解压\" class=\"headerlink\" title=\"6、将hadoop hbase zookepper的安装包解压\"></a>6、将hadoop hbase zookepper的安装包解压</h2><p>到<code>/home/hadoop/</code>下，<u>并重命名</u>为<code>hadoop hbase zookepper</code>，在<code>home/hadoop/</code>下建立<code>hadoop-config</code>和<code>hbase-config</code>文件夹，并且将<code>home/hadoop/hadoop/conf</code>下的<code>masters、slaves、core-site、mapred-sit、hdfs-site、hadoop-env</code>拷贝到此文件夹，将<code>home/hadoop/hbase/conf</code>下的<code>hbase-site</code>和<code>hbase-env.sh</code>拷贝到次文件夹。</p>\n<h2 id=\"7、修改masters、slaves文件：\"><a href=\"#7、修改masters、slaves文件：\" class=\"headerlink\" title=\"7、修改masters、slaves文件：\"></a>7、修改masters、slaves文件：</h2><p> 分别为 <code>master</code> 和<code>s1</code>与<code>s2</code></p>\n<h2 id=\"8、修改hadoop-env-sh的变量：\"><a href=\"#8、修改hadoop-env-sh的变量：\" class=\"headerlink\" title=\"8、修改hadoop-env.sh的变量：\"></a>8、修改<code>hadoop-env.sh</code>的变量：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">export JAVA_HOME=/usr/java/jdk1.6.0_26/  </div><div class=\"line\">export HADOOP_PID_DIR=/home/hadoop/hadoop/tmp</div></pre></td></tr></table></figure>\n<p>##9、修改<code>core-site.xml</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;configuration&gt; </div><div class=\"line\">&lt;property&gt; </div><div class=\"line\">&lt;name&gt;fs.default.name&lt;/name&gt; </div><div class=\"line\">&lt;value&gt;hdfs://master:9000&lt;/value&gt; </div><div class=\"line\">&lt;/property&gt; </div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>\n<p>修改<code>mapred-site.xml</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;configuration&gt; </div><div class=\"line\">&lt;property&gt; </div><div class=\"line\">   &lt;name&gt;mapred.job.tracker&lt;/name&gt; </div><div class=\"line\">   &lt;value&gt;hdfs://master:9001/&lt;/value&gt; </div><div class=\"line\">&lt;/property&gt;  </div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>\n<p>修改<code>hdfs-site.xml</code>（<u>name和data文件夹不要手动建立</u>）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;configuration&gt; </div><div class=\"line\">&lt;property&gt; </div><div class=\"line\">&lt;name&gt;dfs.name.dir&lt;/name&gt; </div><div class=\"line\">&lt;value&gt;/home/hadoop/hadoop/name&lt;/value&gt; </div><div class=\"line\">&lt;/property&gt; </div><div class=\"line\">&lt;property&gt; </div><div class=\"line\">&lt;name&gt;dfs.data.dir&lt;/name&gt; </div><div class=\"line\">&lt;value&gt;/home/hadoop/hadoop/data/&lt;/value&gt; </div><div class=\"line\">&lt;/property&gt; </div><div class=\"line\">&lt;property&gt; </div><div class=\"line\">   &lt;name&gt;dfs.replication&lt;/name&gt; </div><div class=\"line\">   &lt;value&gt;3&lt;/value&gt; </div><div class=\"line\">&lt;/property&gt; </div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"10、设置master-s1-s2机几台器之间无密码访问：\"><a href=\"#10、设置master-s1-s2机几台器之间无密码访问：\" class=\"headerlink\" title=\"10、设置master, s1, s2机几台器之间无密码访问：\"></a>10、设置master, s1, s2机几台器之间无密码访问：</h2><h2 id=\"11、复制目录至集群丛机\"><a href=\"#11、复制目录至集群丛机\" class=\"headerlink\" title=\"11、复制目录至集群丛机\"></a>11、复制目录至集群丛机</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">scp -r /home/hadoop/hadoop s1:/home/hadoop</div><div class=\"line\">scp -r /home/hadoop/hadoop s2:/home/hadoop</div></pre></td></tr></table></figure>\n<h2 id=\"12、切换到-home-hadoop-hadoop目录下\"><a href=\"#12、切换到-home-hadoop-hadoop目录下\" class=\"headerlink\" title=\"12、切换到/home/hadoop/hadoop目录下\"></a>12、切换到<code>/home/hadoop/hadoop</code>目录下</h2><p>执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bin/hadoop namenode -format</div></pre></td></tr></table></figure>\n<p>(格式化master主机生成name data tmp等文件夹)</p>\n<h2 id=\"13、启动namenode\"><a href=\"#13、启动namenode\" class=\"headerlink\" title=\"13、启动namenode\"></a>13、启动namenode</h2><p>执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bin/start-dfs.sh</div></pre></td></tr></table></figure></p>\n<p>使用jps命令查看<code>namenode、secondnamenode</code>是否正常启动：<br>ie里面输入<a href=\"http://master:50070\" target=\"_blank\" rel=\"external\">http://master:50070</a> 查看<code>namenode</code>的相关配置信息、运行状态和日志文件</p>\n<h2 id=\"14、启动mapred\"><a href=\"#14、启动mapred\" class=\"headerlink\" title=\"14、启动mapred\"></a>14、启动<code>mapred</code></h2><p>执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bin/start-mapred.sh</div></pre></td></tr></table></figure></p>\n<p>使用<code>jps</code>命令查看<code>nomenode、secondnamenode</code>是否正常启动：<br>ie里面输入<a href=\"http://master:50030\" target=\"_blank\" rel=\"external\">http://master:50030</a>  查看jobtasker的相关配置信息、运行状态和日志文件</p>\n<hr>\n<h1 id=\"hbase-zookeeper集群搭建：\"><a href=\"#hbase-zookeeper集群搭建：\" class=\"headerlink\" title=\"hbase+zookeeper集群搭建：\"></a>hbase+zookeeper集群搭建：</h1><h2 id=\"1、复制目录修改文件\"><a href=\"#1、复制目录修改文件\" class=\"headerlink\" title=\"1、复制目录修改文件\"></a>1、复制目录修改文件</h2><p>将<code>/home/hadoop/hadoop/conf/</code>目录下的<code>hbase-site.xml、regionserver和hbase-env.sh</code>拷贝到<code>/home/hadoop/hbase-config/</code>目录下；<br>编辑<code>hbase-site.xml</code>配置文件，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;property&gt; </div><div class=\"line\">&lt;name&gt;hbase.rootdir&lt;/name&gt; </div><div class=\"line\">&lt;value&gt;hdfs://master:9000/hbase&lt;/value&gt; </div><div class=\"line\">&lt;/property&gt; </div><div class=\"line\">&lt;property&gt; </div><div class=\"line\">&lt;name&gt;hbase.cluster.distributed&lt;/name&gt; </div><div class=\"line\">&lt;value&gt;true&lt;/value&gt; </div><div class=\"line\">&lt;/property&gt; </div><div class=\"line\">&lt;property&gt; </div><div class=\"line\">&lt;name&gt;hbase.master&lt;/name&gt; </div><div class=\"line\">&lt;value&gt;master&lt;/value&gt; </div><div class=\"line\">&lt;/property&gt; </div><div class=\"line\">&lt;property&gt; </div><div class=\"line\">&lt;name&gt;hbase.zookeeper.quorum&lt;/name&gt; </div><div class=\"line\">&lt;value&gt;s1,s2&lt;/value&gt; </div><div class=\"line\">&lt;/property&gt; </div><div class=\"line\">&lt;property&gt; </div><div class=\"line\">&lt;name&gt;zookeeper.session.timeout&lt;/name&gt; </div><div class=\"line\">&lt;value&gt;60000000&lt;/value&gt; </div><div class=\"line\">&lt;/property&gt; </div><div class=\"line\">&lt;property&gt; </div><div class=\"line\">&lt;name&gt;hbase.zookeeper.property.clientport&lt;/name&gt; </div><div class=\"line\">&lt;value&gt;2222&lt;/value&gt; </div><div class=\"line\">&lt;/property&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"2、编辑regionserver文件\"><a href=\"#2、编辑regionserver文件\" class=\"headerlink\" title=\"2、编辑regionserver文件\"></a>2、编辑regionserver文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">S1 </div><div class=\"line\">S2</div></pre></td></tr></table></figure>\n<h2 id=\"3、编辑hbase-env-xml文件\"><a href=\"#3、编辑hbase-env-xml文件\" class=\"headerlink\" title=\"3、编辑hbase-env.xml文件\"></a>3、编辑hbase-env.xml文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">export JAVA_HOME=/usr/java/jdk1.6.0_26/  </div><div class=\"line\">export CLASSPATH=$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/lib  </div><div class=\"line\">export PATH=$JAVA_HOME/bin:$PATH:$CATALINA_HOME/bin  </div><div class=\"line\">export HADOOP_HOME=/home/hadoop/hadoop  </div><div class=\"line\">export HBASE_HOME=/home/hadoop/hbase  </div><div class=\"line\">export HBASE_MANAGES_ZK=true </div><div class=\"line\">export PATH=$PATH:/home/hadoop/hbase/bin</div></pre></td></tr></table></figure>\n<h2 id=\"4、复制文件到集群丛机\"><a href=\"#4、复制文件到集群丛机\" class=\"headerlink\" title=\"4、复制文件到集群丛机\"></a>4、复制文件到集群丛机</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">scp -r /home/hadoop/hbase s1:/home/hadoop </div><div class=\"line\">scp -r /home/hadoop/hbase s2:/home/hadoop</div></pre></td></tr></table></figure>\n<h2 id=\"5、进入-home-hadoop-zookeeper-conf-中\"><a href=\"#5、进入-home-hadoop-zookeeper-conf-中\" class=\"headerlink\" title=\"5、进入/home/hadoop/zookeeper/conf/中\"></a>5、进入<code>/home/hadoop/zookeeper/conf/</code>中</h2><blockquote>\n<p>(1)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp zoo_sample.cfg zoo.cfg</div></pre></td></tr></table></figure></p>\n<p>(2)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim zoo.cfg</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>如下： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"># The number of milliseconds of each tick  </div><div class=\"line\">tickTime=2000 </div><div class=\"line\"># The number of ticks that the initial  </div><div class=\"line\"># synchronization phase can take  </div><div class=\"line\">initLimit=10 </div><div class=\"line\"># The number of ticks that can pass between  </div><div class=\"line\"># sending a request and getting an acknowledgement  </div><div class=\"line\">syncLimit=5 </div><div class=\"line\"># the directory where the snapshot is stored.  </div><div class=\"line\">dataDir=/home/hadoop/zookeeper/data  </div><div class=\"line\"># the port at which the clients will connect  </div><div class=\"line\">clientPort=2181 </div><div class=\"line\">server.1=s1:2888:3888  </div><div class=\"line\">server.2=s2:2888:3888</div></pre></td></tr></table></figure>\n<blockquote>\n<p>(3)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">touch myid</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>*编辑：1（<u>此序号设置和zoo.cfg里面的server设置要对应</u>)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">scp -r /home/hadoop/zookeeper s1:/home/hadoop </div><div class=\"line\">scp -r /home/hadoop/zookeeper s2:/home/hadoop</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>4）在所有的节点执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chown -R hadoop.hadoop /home/hadoop</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>启动hbase集群：<br>（1）<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">（2）执行```jps```显示Hmaster是否启动</div><div class=\"line\">（3）执行```bin/hbase shell</div></pre></td></tr></table></figure></p>\n<p> (4)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;create &apos;t1&apos; t2&apos;&apos; &apos;t3&apos;#(测试利用hmaster插入数据) </div><div class=\"line\">    &gt;list #（显示已经插入的数据） </div><div class=\"line\">    &gt;t1+t2+t3</div></pre></td></tr></table></figure></p>\n<p>输入：<a href=\"http://master:60010\" target=\"_blank\" rel=\"external\">http://master:60010</a> </p>\n<p><em>延伸：Hadoop 页面监控信息网址列表</em></p>\n<p>将Hadoop中可能用到的网页地址list到下面，方便查阅：</p>\n<ol>\n<li><a href=\"http://master:50030\" target=\"_blank\" rel=\"external\">http://master:50030</a></li>\n</ol>\n<p>查看MapReduce上的jobtracker（在启动了hdfs和MapReduce之后查阅）</p>\n<ol>\n<li><a href=\"http://master:50060\" target=\"_blank\" rel=\"external\">http://master:50060</a> </li>\n</ol>\n<p>查看MapReduce上的tasktracker（在启动了hdfs和MapReduce之后查阅）</p>\n<ol>\n<li><a href=\"http://master:50070\" target=\"_blank\" rel=\"external\">http://master:50070</a>  </li>\n</ol>\n<p>查看HDFS上的节点信息（在启动了HDFS之后查阅）</p>\n<ol>\n<li><a href=\"http://master:60010/master.jsp\" target=\"_blank\" rel=\"external\">http://master:60010/master.jsp</a></li>\n</ol>\n<p>查看master连点信息 （在启动了HDFS、MapReduce、ZooKeeper和HBase之后查阅）</p>\n<ol>\n<li><a href=\"http://master:60030/regionserver.jsp\" target=\"_blank\" rel=\"external\">http://master:60030/regionserver.jsp</a></li>\n</ol>\n<p>查看regionserver信息（在启动了HDFS、MapReduce、ZooKeeper和HBase之后查阅）</p>\n<ol>\n<li><a href=\"http://master:60010/zk.jsp\" target=\"_blank\" rel=\"external\">http://master:60010/zk.jsp</a></li>\n</ol>\n<p>查看zookeeper信息（在启动了HDFS、MapReduce、ZooKeeper和HBase之后查阅）</p>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://archive.apache.org/dist/hadoop/common/\" target=\"_blank\" rel=\"external\">hadoop的下载地址</a><br><a href=\"http://archive.apache.org/dist/hbase/\" target=\"_blank\" rel=\"external\">hbase的下载地址</a><br><a href=\"http://archive.apache.org/dist/hadoop/zookeeper/\" target=\"_blank\" rel=\"external\">zookeeper的下载地址</a></p>\n<hr>\n<h2 id=\"1、-主机配置如下：\"><a href=\"#1、-主机配置如下：\" class=\"headerlink\" title=\"1、 主机配置如下：\"></a>1、 主机配置如下：</h2><p>（添加到/etc/hosts文件里面）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">192.168.0.211 master  </div><div class=\"line\">#（用于集群主机提供hmaster namenode jobtasker服务 ）  </div><div class=\"line\">192.168.0.212 s1      </div><div class=\"line\">#(用于集群丛机提供regionsrever datanode tasktacuter服务)  </div><div class=\"line\">192.168.0.213 s2</div></pre></td></tr></table></figure></p>","more":"<h2 id=\"2、安装jdk1-6-2-X\"><a href=\"#2、安装jdk1-6-2-X\" class=\"headerlink\" title=\"2、安装jdk1.6.2.X\"></a>2、安装jdk1.6.2.X</h2><h2 id=\"3、添加java环境变量\"><a href=\"#3、添加java环境变量\" class=\"headerlink\" title=\"3、添加java环境变量\"></a>3、添加java环境变量</h2><p>（<code>/etc/profile</code>），后执行source /etc/profile ,使环境变量立即生效<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">export JAVA_HOME=/usr/java/jdk1.6.0_26/  #java 的目录</div><div class=\"line\">export CLASSPATH=$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/lib  </div><div class=\"line\">export PATH=$JAVA_HOME/bin:$PATH:$CATALINA_HOME/bin  </div><div class=\"line\">export HADOOP_HOME=/home/hadoop/hadoop  </div><div class=\"line\">export HBASE_HOME=/home/hadoop/hbase  </div><div class=\"line\">PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HBASE_HOME/bin</div></pre></td></tr></table></figure></p>\n<h2 id=\"4、在三台电脑上添加hadoop用户\"><a href=\"#4、在三台电脑上添加hadoop用户\" class=\"headerlink\" title=\"4、在三台电脑上添加hadoop用户\"></a>4、在三台电脑上添加hadoop用户</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">useradd hadoop</div></pre></td></tr></table></figure>\n<h2 id=\"5、在-home-hadoop-bashrc添加变量\"><a href=\"#5、在-home-hadoop-bashrc添加变量\" class=\"headerlink\" title=\"5、在/home/hadoop/.bashrc添加变量\"></a>5、在<code>/home/hadoop/.bashrc</code>添加变量</h2><ul>\n<li><u>(将hadoop hbase的配置文件放到hadoop安装包根目录文件下，目的在于以后升级hadoop和hbase的时候不用重新导入配置文件)</u><br>*<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">export HADOOP_CONF_DIR=/home/hadoop/hadoop-config  </div><div class=\"line\">export HBASE_CONF_DIR=/home/hadoop/hbase-config</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"6、将hadoop-hbase-zookepper的安装包解压\"><a href=\"#6、将hadoop-hbase-zookepper的安装包解压\" class=\"headerlink\" title=\"6、将hadoop hbase zookepper的安装包解压\"></a>6、将hadoop hbase zookepper的安装包解压</h2><p>到<code>/home/hadoop/</code>下，<u>并重命名</u>为<code>hadoop hbase zookepper</code>，在<code>home/hadoop/</code>下建立<code>hadoop-config</code>和<code>hbase-config</code>文件夹，并且将<code>home/hadoop/hadoop/conf</code>下的<code>masters、slaves、core-site、mapred-sit、hdfs-site、hadoop-env</code>拷贝到此文件夹，将<code>home/hadoop/hbase/conf</code>下的<code>hbase-site</code>和<code>hbase-env.sh</code>拷贝到次文件夹。</p>\n<h2 id=\"7、修改masters、slaves文件：\"><a href=\"#7、修改masters、slaves文件：\" class=\"headerlink\" title=\"7、修改masters、slaves文件：\"></a>7、修改masters、slaves文件：</h2><p> 分别为 <code>master</code> 和<code>s1</code>与<code>s2</code></p>\n<h2 id=\"8、修改hadoop-env-sh的变量：\"><a href=\"#8、修改hadoop-env-sh的变量：\" class=\"headerlink\" title=\"8、修改hadoop-env.sh的变量：\"></a>8、修改<code>hadoop-env.sh</code>的变量：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">export JAVA_HOME=/usr/java/jdk1.6.0_26/  </div><div class=\"line\">export HADOOP_PID_DIR=/home/hadoop/hadoop/tmp</div></pre></td></tr></table></figure>\n<p>##9、修改<code>core-site.xml</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;configuration&gt; </div><div class=\"line\">&lt;property&gt; </div><div class=\"line\">&lt;name&gt;fs.default.name&lt;/name&gt; </div><div class=\"line\">&lt;value&gt;hdfs://master:9000&lt;/value&gt; </div><div class=\"line\">&lt;/property&gt; </div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>\n<p>修改<code>mapred-site.xml</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;configuration&gt; </div><div class=\"line\">&lt;property&gt; </div><div class=\"line\">   &lt;name&gt;mapred.job.tracker&lt;/name&gt; </div><div class=\"line\">   &lt;value&gt;hdfs://master:9001/&lt;/value&gt; </div><div class=\"line\">&lt;/property&gt;  </div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>\n<p>修改<code>hdfs-site.xml</code>（<u>name和data文件夹不要手动建立</u>）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;configuration&gt; </div><div class=\"line\">&lt;property&gt; </div><div class=\"line\">&lt;name&gt;dfs.name.dir&lt;/name&gt; </div><div class=\"line\">&lt;value&gt;/home/hadoop/hadoop/name&lt;/value&gt; </div><div class=\"line\">&lt;/property&gt; </div><div class=\"line\">&lt;property&gt; </div><div class=\"line\">&lt;name&gt;dfs.data.dir&lt;/name&gt; </div><div class=\"line\">&lt;value&gt;/home/hadoop/hadoop/data/&lt;/value&gt; </div><div class=\"line\">&lt;/property&gt; </div><div class=\"line\">&lt;property&gt; </div><div class=\"line\">   &lt;name&gt;dfs.replication&lt;/name&gt; </div><div class=\"line\">   &lt;value&gt;3&lt;/value&gt; </div><div class=\"line\">&lt;/property&gt; </div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"10、设置master-s1-s2机几台器之间无密码访问：\"><a href=\"#10、设置master-s1-s2机几台器之间无密码访问：\" class=\"headerlink\" title=\"10、设置master, s1, s2机几台器之间无密码访问：\"></a>10、设置master, s1, s2机几台器之间无密码访问：</h2><h2 id=\"11、复制目录至集群丛机\"><a href=\"#11、复制目录至集群丛机\" class=\"headerlink\" title=\"11、复制目录至集群丛机\"></a>11、复制目录至集群丛机</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">scp -r /home/hadoop/hadoop s1:/home/hadoop</div><div class=\"line\">scp -r /home/hadoop/hadoop s2:/home/hadoop</div></pre></td></tr></table></figure>\n<h2 id=\"12、切换到-home-hadoop-hadoop目录下\"><a href=\"#12、切换到-home-hadoop-hadoop目录下\" class=\"headerlink\" title=\"12、切换到/home/hadoop/hadoop目录下\"></a>12、切换到<code>/home/hadoop/hadoop</code>目录下</h2><p>执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bin/hadoop namenode -format</div></pre></td></tr></table></figure>\n<p>(格式化master主机生成name data tmp等文件夹)</p>\n<h2 id=\"13、启动namenode\"><a href=\"#13、启动namenode\" class=\"headerlink\" title=\"13、启动namenode\"></a>13、启动namenode</h2><p>执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bin/start-dfs.sh</div></pre></td></tr></table></figure></p>\n<p>使用jps命令查看<code>namenode、secondnamenode</code>是否正常启动：<br>ie里面输入<a href=\"http://master:50070\" target=\"_blank\" rel=\"external\">http://master:50070</a> 查看<code>namenode</code>的相关配置信息、运行状态和日志文件</p>\n<h2 id=\"14、启动mapred\"><a href=\"#14、启动mapred\" class=\"headerlink\" title=\"14、启动mapred\"></a>14、启动<code>mapred</code></h2><p>执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bin/start-mapred.sh</div></pre></td></tr></table></figure></p>\n<p>使用<code>jps</code>命令查看<code>nomenode、secondnamenode</code>是否正常启动：<br>ie里面输入<a href=\"http://master:50030\" target=\"_blank\" rel=\"external\">http://master:50030</a>  查看jobtasker的相关配置信息、运行状态和日志文件</p>\n<hr>\n<h1 id=\"hbase-zookeeper集群搭建：\"><a href=\"#hbase-zookeeper集群搭建：\" class=\"headerlink\" title=\"hbase+zookeeper集群搭建：\"></a>hbase+zookeeper集群搭建：</h1><h2 id=\"1、复制目录修改文件\"><a href=\"#1、复制目录修改文件\" class=\"headerlink\" title=\"1、复制目录修改文件\"></a>1、复制目录修改文件</h2><p>将<code>/home/hadoop/hadoop/conf/</code>目录下的<code>hbase-site.xml、regionserver和hbase-env.sh</code>拷贝到<code>/home/hadoop/hbase-config/</code>目录下；<br>编辑<code>hbase-site.xml</code>配置文件，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;property&gt; </div><div class=\"line\">&lt;name&gt;hbase.rootdir&lt;/name&gt; </div><div class=\"line\">&lt;value&gt;hdfs://master:9000/hbase&lt;/value&gt; </div><div class=\"line\">&lt;/property&gt; </div><div class=\"line\">&lt;property&gt; </div><div class=\"line\">&lt;name&gt;hbase.cluster.distributed&lt;/name&gt; </div><div class=\"line\">&lt;value&gt;true&lt;/value&gt; </div><div class=\"line\">&lt;/property&gt; </div><div class=\"line\">&lt;property&gt; </div><div class=\"line\">&lt;name&gt;hbase.master&lt;/name&gt; </div><div class=\"line\">&lt;value&gt;master&lt;/value&gt; </div><div class=\"line\">&lt;/property&gt; </div><div class=\"line\">&lt;property&gt; </div><div class=\"line\">&lt;name&gt;hbase.zookeeper.quorum&lt;/name&gt; </div><div class=\"line\">&lt;value&gt;s1,s2&lt;/value&gt; </div><div class=\"line\">&lt;/property&gt; </div><div class=\"line\">&lt;property&gt; </div><div class=\"line\">&lt;name&gt;zookeeper.session.timeout&lt;/name&gt; </div><div class=\"line\">&lt;value&gt;60000000&lt;/value&gt; </div><div class=\"line\">&lt;/property&gt; </div><div class=\"line\">&lt;property&gt; </div><div class=\"line\">&lt;name&gt;hbase.zookeeper.property.clientport&lt;/name&gt; </div><div class=\"line\">&lt;value&gt;2222&lt;/value&gt; </div><div class=\"line\">&lt;/property&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"2、编辑regionserver文件\"><a href=\"#2、编辑regionserver文件\" class=\"headerlink\" title=\"2、编辑regionserver文件\"></a>2、编辑regionserver文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">S1 </div><div class=\"line\">S2</div></pre></td></tr></table></figure>\n<h2 id=\"3、编辑hbase-env-xml文件\"><a href=\"#3、编辑hbase-env-xml文件\" class=\"headerlink\" title=\"3、编辑hbase-env.xml文件\"></a>3、编辑hbase-env.xml文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">export JAVA_HOME=/usr/java/jdk1.6.0_26/  </div><div class=\"line\">export CLASSPATH=$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/lib  </div><div class=\"line\">export PATH=$JAVA_HOME/bin:$PATH:$CATALINA_HOME/bin  </div><div class=\"line\">export HADOOP_HOME=/home/hadoop/hadoop  </div><div class=\"line\">export HBASE_HOME=/home/hadoop/hbase  </div><div class=\"line\">export HBASE_MANAGES_ZK=true </div><div class=\"line\">export PATH=$PATH:/home/hadoop/hbase/bin</div></pre></td></tr></table></figure>\n<h2 id=\"4、复制文件到集群丛机\"><a href=\"#4、复制文件到集群丛机\" class=\"headerlink\" title=\"4、复制文件到集群丛机\"></a>4、复制文件到集群丛机</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">scp -r /home/hadoop/hbase s1:/home/hadoop </div><div class=\"line\">scp -r /home/hadoop/hbase s2:/home/hadoop</div></pre></td></tr></table></figure>\n<h2 id=\"5、进入-home-hadoop-zookeeper-conf-中\"><a href=\"#5、进入-home-hadoop-zookeeper-conf-中\" class=\"headerlink\" title=\"5、进入/home/hadoop/zookeeper/conf/中\"></a>5、进入<code>/home/hadoop/zookeeper/conf/</code>中</h2><blockquote>\n<p>(1)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp zoo_sample.cfg zoo.cfg</div></pre></td></tr></table></figure></p>\n<p>(2)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim zoo.cfg</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>如下： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"># The number of milliseconds of each tick  </div><div class=\"line\">tickTime=2000 </div><div class=\"line\"># The number of ticks that the initial  </div><div class=\"line\"># synchronization phase can take  </div><div class=\"line\">initLimit=10 </div><div class=\"line\"># The number of ticks that can pass between  </div><div class=\"line\"># sending a request and getting an acknowledgement  </div><div class=\"line\">syncLimit=5 </div><div class=\"line\"># the directory where the snapshot is stored.  </div><div class=\"line\">dataDir=/home/hadoop/zookeeper/data  </div><div class=\"line\"># the port at which the clients will connect  </div><div class=\"line\">clientPort=2181 </div><div class=\"line\">server.1=s1:2888:3888  </div><div class=\"line\">server.2=s2:2888:3888</div></pre></td></tr></table></figure>\n<blockquote>\n<p>(3)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">touch myid</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>*编辑：1（<u>此序号设置和zoo.cfg里面的server设置要对应</u>)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">scp -r /home/hadoop/zookeeper s1:/home/hadoop </div><div class=\"line\">scp -r /home/hadoop/zookeeper s2:/home/hadoop</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>4）在所有的节点执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chown -R hadoop.hadoop /home/hadoop</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>启动hbase集群：<br>（1）<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">（2）执行```jps```显示Hmaster是否启动</div><div class=\"line\">（3）执行```bin/hbase shell</div></pre></td></tr></table></figure></p>\n<p> (4)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;create &apos;t1&apos; t2&apos;&apos; &apos;t3&apos;#(测试利用hmaster插入数据) </div><div class=\"line\">    &gt;list #（显示已经插入的数据） </div><div class=\"line\">    &gt;t1+t2+t3</div></pre></td></tr></table></figure></p>\n<p>输入：<a href=\"http://master:60010\" target=\"_blank\" rel=\"external\">http://master:60010</a> </p>\n<p><em>延伸：Hadoop 页面监控信息网址列表</em></p>\n<p>将Hadoop中可能用到的网页地址list到下面，方便查阅：</p>\n<ol>\n<li><a href=\"http://master:50030\" target=\"_blank\" rel=\"external\">http://master:50030</a></li>\n</ol>\n<p>查看MapReduce上的jobtracker（在启动了hdfs和MapReduce之后查阅）</p>\n<ol>\n<li><a href=\"http://master:50060\" target=\"_blank\" rel=\"external\">http://master:50060</a> </li>\n</ol>\n<p>查看MapReduce上的tasktracker（在启动了hdfs和MapReduce之后查阅）</p>\n<ol>\n<li><a href=\"http://master:50070\" target=\"_blank\" rel=\"external\">http://master:50070</a>  </li>\n</ol>\n<p>查看HDFS上的节点信息（在启动了HDFS之后查阅）</p>\n<ol>\n<li><a href=\"http://master:60010/master.jsp\" target=\"_blank\" rel=\"external\">http://master:60010/master.jsp</a></li>\n</ol>\n<p>查看master连点信息 （在启动了HDFS、MapReduce、ZooKeeper和HBase之后查阅）</p>\n<ol>\n<li><a href=\"http://master:60030/regionserver.jsp\" target=\"_blank\" rel=\"external\">http://master:60030/regionserver.jsp</a></li>\n</ol>\n<p>查看regionserver信息（在启动了HDFS、MapReduce、ZooKeeper和HBase之后查阅）</p>\n<ol>\n<li><a href=\"http://master:60010/zk.jsp\" target=\"_blank\" rel=\"external\">http://master:60010/zk.jsp</a></li>\n</ol>\n<p>查看zookeeper信息（在启动了HDFS、MapReduce、ZooKeeper和HBase之后查阅）</p>"},{"title":"MySQL数据库优化-总结","date":"2017-05-20T12:07:31.000Z","desc":"MySQL数据库优化-总结","keywords":"MySQL 数据库 数据库导入","_content":"\n\n面试时遇到的问题：千万级的mysql数据库如何优化？\n作为一个刚入门的phper,遇到这个问题时,我还是压力山大的.还好有一个周末的时间来学习.本文就是这周末三天的整理总结.\n<!--more-->\n## 方案一:缓存\n通过redis或memcache,添加缓存服务器.\n原理:将经常查询的内容自动添加到缓存,访问量低的通过正常查询获得,可以让绝大多数的内容从内存中自动访问.\n\n> ridis和memcache的区别:\n\n1 Redis不仅仅支持简单的k/v类型的数据，同时还提供list，set，hash等数据结构的存储。\n\n2 Redis支持数据的备份，即master-slave模式的数据备份。\n\n3 Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。\n\n## 方案二:添加索引\n通过对常用字段添加索引的办法可以极大的提高查询的效率.\n注意事项:\n\n1. 首先应考虑在 where 及 order by 涉及的列上建立索引。///禁用排名,`` oder by null``\n\n2. 可以在 num 上设置默认值 0,确保表中 num 列没有 null 值。\n\n3. 不要写一些没有意义的查询.\n\n4. 用 exists 代替 in 是一个好的选择.如:\n> \nselect num from a where num in(select num from b);  \n可以用  \nselect num from a where exists(select 1 from b where num=a.num);  \n来代替.\n\n5. 索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过 6 个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。\n\n6. 尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能,并增加存储开销。这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言 只需要比较一次就够了。\n\n\n7. 尽可能的使用 ```varchar/nvarchar ```代替 ```char/nchar ```, 因为首先变长字段存储空间小， 可以节省存储空间， 其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。\n\n\n8. 不要使用 ``select * from t ``,用具体的字段列表代替“*”,不要返回用不到的任何字段。\n\n#### 避免全表扫描:\n\n+ 避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描。\n\n+ ``` select id from t where name like '%c%';```也将导致全表扫描。\n\n+ 如果在 where 子句中使用参数，也会导致全表扫描.如:`` select id from t where num=@num ;``可以改为强制查询使用索引:`` select id from t with(index(索引名)) where num=@num ;``\n\n+ 在 where 子句中对字段进行表达式操作， 这将导致引擎放弃使用索引而进行全表扫描。如:`` select id from t where num/2=100;``\n\n+ 在 where 子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：`` select id from t where substring(name,1,3)='abc';#name 以 abc 开头的 id``\n\n## 方案三:水平分库/分表\n原理:  \n一个1000多万条记录的用户表user,查询起来非常之慢，分表的做法是将其散列到100个表中，分别从user_0到user_99，然后根据userId分发记录到这些表中.\n\n## 方案四:Sphinx等索引工具\n原理:  \nSphinx工具是一个基于SQL的索引检索引擎.原理是将SQL中的数据建立索引,php通过API的方式从Sphinx中获得检索的值.php不直接通过mysql取值.\n\n![Sphinx的原理图](http://upload-images.jianshu.io/upload_images/2229907-552a7cc0a9351d0d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### Sphinx的特性（优、缺点）  \n#### 优点：  \n\n+ 高速索引 (在新款CPU上,近10 MB/秒);  \n+ 高速搜索 (2-4G的文本量中平均查询速度不到0.1秒);  \n+ 高可用性 (单CPU上最大可支持100 GB的文本,100M文档);\n+ 提供良好的相关性排名\n+ 支持分布式搜索;\n+ 提供文档摘要生成;\n+ 提供从MySQL内部的插件式存储引擎上搜索\n+ 支持布尔,短语, 和近义词查询;\n+ 支持每个文档多个全文检索域(默认最大32个);\n+ 支持每个文档多属性;\n+ 支持断词;\n+ 支持单字节编码与UTF-8编码;\n+ 支持多字段的检索域\n+ 支持MySQL（MYISAM和INNODB）和Postgres数据库\n+ 支持windows, linux, unix, mac等平台\n\n#### 缺点：\n+ 必须要有主键\n+ 主键必须为整型\n+ 不负责数据存储\n+ 配置不灵活\n\n## 方案五:读写分离\n原理：  \n通过物理的方式来提升mysql的性能.\n...未完待续\n\n","source":"_posts/MySQL数据库优化-总结.md","raw":"---\ntitle: MySQL数据库优化-总结\ndate: 2017-05-20 20:07:31\ntags:\n  - Mysql\n  - 数据库\ndesc: MySQL数据库优化-总结\nkeywords: MySQL 数据库 数据库导入\ncategories:\n- 数据库\n\n---\n\n\n面试时遇到的问题：千万级的mysql数据库如何优化？\n作为一个刚入门的phper,遇到这个问题时,我还是压力山大的.还好有一个周末的时间来学习.本文就是这周末三天的整理总结.\n<!--more-->\n## 方案一:缓存\n通过redis或memcache,添加缓存服务器.\n原理:将经常查询的内容自动添加到缓存,访问量低的通过正常查询获得,可以让绝大多数的内容从内存中自动访问.\n\n> ridis和memcache的区别:\n\n1 Redis不仅仅支持简单的k/v类型的数据，同时还提供list，set，hash等数据结构的存储。\n\n2 Redis支持数据的备份，即master-slave模式的数据备份。\n\n3 Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。\n\n## 方案二:添加索引\n通过对常用字段添加索引的办法可以极大的提高查询的效率.\n注意事项:\n\n1. 首先应考虑在 where 及 order by 涉及的列上建立索引。///禁用排名,`` oder by null``\n\n2. 可以在 num 上设置默认值 0,确保表中 num 列没有 null 值。\n\n3. 不要写一些没有意义的查询.\n\n4. 用 exists 代替 in 是一个好的选择.如:\n> \nselect num from a where num in(select num from b);  \n可以用  \nselect num from a where exists(select 1 from b where num=a.num);  \n来代替.\n\n5. 索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过 6 个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。\n\n6. 尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能,并增加存储开销。这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言 只需要比较一次就够了。\n\n\n7. 尽可能的使用 ```varchar/nvarchar ```代替 ```char/nchar ```, 因为首先变长字段存储空间小， 可以节省存储空间， 其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。\n\n\n8. 不要使用 ``select * from t ``,用具体的字段列表代替“*”,不要返回用不到的任何字段。\n\n#### 避免全表扫描:\n\n+ 避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描。\n\n+ ``` select id from t where name like '%c%';```也将导致全表扫描。\n\n+ 如果在 where 子句中使用参数，也会导致全表扫描.如:`` select id from t where num=@num ;``可以改为强制查询使用索引:`` select id from t with(index(索引名)) where num=@num ;``\n\n+ 在 where 子句中对字段进行表达式操作， 这将导致引擎放弃使用索引而进行全表扫描。如:`` select id from t where num/2=100;``\n\n+ 在 where 子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：`` select id from t where substring(name,1,3)='abc';#name 以 abc 开头的 id``\n\n## 方案三:水平分库/分表\n原理:  \n一个1000多万条记录的用户表user,查询起来非常之慢，分表的做法是将其散列到100个表中，分别从user_0到user_99，然后根据userId分发记录到这些表中.\n\n## 方案四:Sphinx等索引工具\n原理:  \nSphinx工具是一个基于SQL的索引检索引擎.原理是将SQL中的数据建立索引,php通过API的方式从Sphinx中获得检索的值.php不直接通过mysql取值.\n\n![Sphinx的原理图](http://upload-images.jianshu.io/upload_images/2229907-552a7cc0a9351d0d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### Sphinx的特性（优、缺点）  \n#### 优点：  \n\n+ 高速索引 (在新款CPU上,近10 MB/秒);  \n+ 高速搜索 (2-4G的文本量中平均查询速度不到0.1秒);  \n+ 高可用性 (单CPU上最大可支持100 GB的文本,100M文档);\n+ 提供良好的相关性排名\n+ 支持分布式搜索;\n+ 提供文档摘要生成;\n+ 提供从MySQL内部的插件式存储引擎上搜索\n+ 支持布尔,短语, 和近义词查询;\n+ 支持每个文档多个全文检索域(默认最大32个);\n+ 支持每个文档多属性;\n+ 支持断词;\n+ 支持单字节编码与UTF-8编码;\n+ 支持多字段的检索域\n+ 支持MySQL（MYISAM和INNODB）和Postgres数据库\n+ 支持windows, linux, unix, mac等平台\n\n#### 缺点：\n+ 必须要有主键\n+ 主键必须为整型\n+ 不负责数据存储\n+ 配置不灵活\n\n## 方案五:读写分离\n原理：  \n通过物理的方式来提升mysql的性能.\n...未完待续\n\n","slug":"MySQL数据库优化-总结","published":1,"updated":"2017-09-14T13:54:52.706Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnom6wop0006c0fy4mel2i4d","content":"<p>面试时遇到的问题：千万级的mysql数据库如何优化？<br>作为一个刚入门的phper,遇到这个问题时,我还是压力山大的.还好有一个周末的时间来学习.本文就是这周末三天的整理总结.<br><a id=\"more\"></a></p>\n<h2 id=\"方案一-缓存\"><a href=\"#方案一-缓存\" class=\"headerlink\" title=\"方案一:缓存\"></a>方案一:缓存</h2><p>通过redis或memcache,添加缓存服务器.<br>原理:将经常查询的内容自动添加到缓存,访问量低的通过正常查询获得,可以让绝大多数的内容从内存中自动访问.</p>\n<blockquote>\n<p>ridis和memcache的区别:</p>\n</blockquote>\n<p>1 Redis不仅仅支持简单的k/v类型的数据，同时还提供list，set，hash等数据结构的存储。</p>\n<p>2 Redis支持数据的备份，即master-slave模式的数据备份。</p>\n<p>3 Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。</p>\n<h2 id=\"方案二-添加索引\"><a href=\"#方案二-添加索引\" class=\"headerlink\" title=\"方案二:添加索引\"></a>方案二:添加索引</h2><p>通过对常用字段添加索引的办法可以极大的提高查询的效率.<br>注意事项:</p>\n<ol>\n<li><p>首先应考虑在 where 及 order by 涉及的列上建立索引。///禁用排名,<code>oder by null</code></p>\n</li>\n<li><p>可以在 num 上设置默认值 0,确保表中 num 列没有 null 值。</p>\n</li>\n<li><p>不要写一些没有意义的查询.</p>\n</li>\n<li><p>用 exists 代替 in 是一个好的选择.如:</p>\n<blockquote>\n<p>select num from a where num in(select num from b);<br>可以用<br>select num from a where exists(select 1 from b where num=a.num);<br>来代替.</p>\n</blockquote>\n</li>\n<li><p>索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过 6 个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。</p>\n</li>\n<li><p>尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能,并增加存储开销。这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言 只需要比较一次就够了。</p>\n</li>\n</ol>\n<ol>\n<li>尽可能的使用 <code>varchar/nvarchar</code>代替 <code>char/nchar</code>, 因为首先变长字段存储空间小， 可以节省存储空间， 其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</li>\n</ol>\n<ol>\n<li>不要使用 <code>select * from t</code>,用具体的字段列表代替“*”,不要返回用不到的任何字段。</li>\n</ol>\n<h4 id=\"避免全表扫描\"><a href=\"#避免全表扫描\" class=\"headerlink\" title=\"避免全表扫描:\"></a>避免全表扫描:</h4><ul>\n<li><p>避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描。</p>\n</li>\n<li><p><code>select id from t where name like &#39;%c%&#39;;</code>也将导致全表扫描。</p>\n</li>\n<li><p>如果在 where 子句中使用参数，也会导致全表扫描.如:<code>select id from t where num=@num ;</code>可以改为强制查询使用索引:<code>select id from t with(index(索引名)) where num=@num ;</code></p>\n</li>\n<li><p>在 where 子句中对字段进行表达式操作， 这将导致引擎放弃使用索引而进行全表扫描。如:<code>select id from t where num/2=100;</code></p>\n</li>\n<li><p>在 where 子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：<code>select id from t where substring(name,1,3)=&#39;abc&#39;;#name 以 abc 开头的 id</code></p>\n</li>\n</ul>\n<h2 id=\"方案三-水平分库-分表\"><a href=\"#方案三-水平分库-分表\" class=\"headerlink\" title=\"方案三:水平分库/分表\"></a>方案三:水平分库/分表</h2><p>原理:<br>一个1000多万条记录的用户表user,查询起来非常之慢，分表的做法是将其散列到100个表中，分别从user_0到user_99，然后根据userId分发记录到这些表中.</p>\n<h2 id=\"方案四-Sphinx等索引工具\"><a href=\"#方案四-Sphinx等索引工具\" class=\"headerlink\" title=\"方案四:Sphinx等索引工具\"></a>方案四:Sphinx等索引工具</h2><p>原理:<br>Sphinx工具是一个基于SQL的索引检索引擎.原理是将SQL中的数据建立索引,php通过API的方式从Sphinx中获得检索的值.php不直接通过mysql取值.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2229907-552a7cc0a9351d0d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Sphinx的原理图\"></p>\n<h3 id=\"Sphinx的特性（优、缺点）\"><a href=\"#Sphinx的特性（优、缺点）\" class=\"headerlink\" title=\"Sphinx的特性（优、缺点）\"></a>Sphinx的特性（优、缺点）</h3><h4 id=\"优点：\"><a href=\"#优点：\" class=\"headerlink\" title=\"优点：\"></a>优点：</h4><ul>\n<li>高速索引 (在新款CPU上,近10 MB/秒);  </li>\n<li>高速搜索 (2-4G的文本量中平均查询速度不到0.1秒);  </li>\n<li>高可用性 (单CPU上最大可支持100 GB的文本,100M文档);</li>\n<li>提供良好的相关性排名</li>\n<li>支持分布式搜索;</li>\n<li>提供文档摘要生成;</li>\n<li>提供从MySQL内部的插件式存储引擎上搜索</li>\n<li>支持布尔,短语, 和近义词查询;</li>\n<li>支持每个文档多个全文检索域(默认最大32个);</li>\n<li>支持每个文档多属性;</li>\n<li>支持断词;</li>\n<li>支持单字节编码与UTF-8编码;</li>\n<li>支持多字段的检索域</li>\n<li>支持MySQL（MYISAM和INNODB）和Postgres数据库</li>\n<li>支持windows, linux, unix, mac等平台</li>\n</ul>\n<h4 id=\"缺点：\"><a href=\"#缺点：\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h4><ul>\n<li>必须要有主键</li>\n<li>主键必须为整型</li>\n<li>不负责数据存储</li>\n<li>配置不灵活</li>\n</ul>\n<h2 id=\"方案五-读写分离\"><a href=\"#方案五-读写分离\" class=\"headerlink\" title=\"方案五:读写分离\"></a>方案五:读写分离</h2><p>原理：<br>通过物理的方式来提升mysql的性能.<br>…未完待续</p>\n","site":{"data":{}},"excerpt":"<p>面试时遇到的问题：千万级的mysql数据库如何优化？<br>作为一个刚入门的phper,遇到这个问题时,我还是压力山大的.还好有一个周末的时间来学习.本文就是这周末三天的整理总结.<br>","more":"</p>\n<h2 id=\"方案一-缓存\"><a href=\"#方案一-缓存\" class=\"headerlink\" title=\"方案一:缓存\"></a>方案一:缓存</h2><p>通过redis或memcache,添加缓存服务器.<br>原理:将经常查询的内容自动添加到缓存,访问量低的通过正常查询获得,可以让绝大多数的内容从内存中自动访问.</p>\n<blockquote>\n<p>ridis和memcache的区别:</p>\n</blockquote>\n<p>1 Redis不仅仅支持简单的k/v类型的数据，同时还提供list，set，hash等数据结构的存储。</p>\n<p>2 Redis支持数据的备份，即master-slave模式的数据备份。</p>\n<p>3 Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。</p>\n<h2 id=\"方案二-添加索引\"><a href=\"#方案二-添加索引\" class=\"headerlink\" title=\"方案二:添加索引\"></a>方案二:添加索引</h2><p>通过对常用字段添加索引的办法可以极大的提高查询的效率.<br>注意事项:</p>\n<ol>\n<li><p>首先应考虑在 where 及 order by 涉及的列上建立索引。///禁用排名,<code>oder by null</code></p>\n</li>\n<li><p>可以在 num 上设置默认值 0,确保表中 num 列没有 null 值。</p>\n</li>\n<li><p>不要写一些没有意义的查询.</p>\n</li>\n<li><p>用 exists 代替 in 是一个好的选择.如:</p>\n<blockquote>\n<p>select num from a where num in(select num from b);<br>可以用<br>select num from a where exists(select 1 from b where num=a.num);<br>来代替.</p>\n</blockquote>\n</li>\n<li><p>索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过 6 个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。</p>\n</li>\n<li><p>尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能,并增加存储开销。这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言 只需要比较一次就够了。</p>\n</li>\n</ol>\n<ol>\n<li>尽可能的使用 <code>varchar/nvarchar</code>代替 <code>char/nchar</code>, 因为首先变长字段存储空间小， 可以节省存储空间， 其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</li>\n</ol>\n<ol>\n<li>不要使用 <code>select * from t</code>,用具体的字段列表代替“*”,不要返回用不到的任何字段。</li>\n</ol>\n<h4 id=\"避免全表扫描\"><a href=\"#避免全表扫描\" class=\"headerlink\" title=\"避免全表扫描:\"></a>避免全表扫描:</h4><ul>\n<li><p>避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描。</p>\n</li>\n<li><p><code>select id from t where name like &#39;%c%&#39;;</code>也将导致全表扫描。</p>\n</li>\n<li><p>如果在 where 子句中使用参数，也会导致全表扫描.如:<code>select id from t where num=@num ;</code>可以改为强制查询使用索引:<code>select id from t with(index(索引名)) where num=@num ;</code></p>\n</li>\n<li><p>在 where 子句中对字段进行表达式操作， 这将导致引擎放弃使用索引而进行全表扫描。如:<code>select id from t where num/2=100;</code></p>\n</li>\n<li><p>在 where 子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：<code>select id from t where substring(name,1,3)=&#39;abc&#39;;#name 以 abc 开头的 id</code></p>\n</li>\n</ul>\n<h2 id=\"方案三-水平分库-分表\"><a href=\"#方案三-水平分库-分表\" class=\"headerlink\" title=\"方案三:水平分库/分表\"></a>方案三:水平分库/分表</h2><p>原理:<br>一个1000多万条记录的用户表user,查询起来非常之慢，分表的做法是将其散列到100个表中，分别从user_0到user_99，然后根据userId分发记录到这些表中.</p>\n<h2 id=\"方案四-Sphinx等索引工具\"><a href=\"#方案四-Sphinx等索引工具\" class=\"headerlink\" title=\"方案四:Sphinx等索引工具\"></a>方案四:Sphinx等索引工具</h2><p>原理:<br>Sphinx工具是一个基于SQL的索引检索引擎.原理是将SQL中的数据建立索引,php通过API的方式从Sphinx中获得检索的值.php不直接通过mysql取值.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2229907-552a7cc0a9351d0d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Sphinx的原理图\"></p>\n<h3 id=\"Sphinx的特性（优、缺点）\"><a href=\"#Sphinx的特性（优、缺点）\" class=\"headerlink\" title=\"Sphinx的特性（优、缺点）\"></a>Sphinx的特性（优、缺点）</h3><h4 id=\"优点：\"><a href=\"#优点：\" class=\"headerlink\" title=\"优点：\"></a>优点：</h4><ul>\n<li>高速索引 (在新款CPU上,近10 MB/秒);  </li>\n<li>高速搜索 (2-4G的文本量中平均查询速度不到0.1秒);  </li>\n<li>高可用性 (单CPU上最大可支持100 GB的文本,100M文档);</li>\n<li>提供良好的相关性排名</li>\n<li>支持分布式搜索;</li>\n<li>提供文档摘要生成;</li>\n<li>提供从MySQL内部的插件式存储引擎上搜索</li>\n<li>支持布尔,短语, 和近义词查询;</li>\n<li>支持每个文档多个全文检索域(默认最大32个);</li>\n<li>支持每个文档多属性;</li>\n<li>支持断词;</li>\n<li>支持单字节编码与UTF-8编码;</li>\n<li>支持多字段的检索域</li>\n<li>支持MySQL（MYISAM和INNODB）和Postgres数据库</li>\n<li>支持windows, linux, unix, mac等平台</li>\n</ul>\n<h4 id=\"缺点：\"><a href=\"#缺点：\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h4><ul>\n<li>必须要有主键</li>\n<li>主键必须为整型</li>\n<li>不负责数据存储</li>\n<li>配置不灵活</li>\n</ul>\n<h2 id=\"方案五-读写分离\"><a href=\"#方案五-读写分离\" class=\"headerlink\" title=\"方案五:读写分离\"></a>方案五:读写分离</h2><p>原理：<br>通过物理的方式来提升mysql的性能.<br>…未完待续</p>"},{"title":"Python，Re模块的学习","date":"2017-05-20T12:07:31.000Z","desc":"Python，Re模块的学习","keywords":"Python Re 正则表达式 学习 笔记","_content":"\n\n\n## 1.概念：\n\n正则表达式（或 RE）是一种小型的、高度专业化的编程语言，在Python中）它内嵌在Python中，并通过 re 模块实现。\n使用这个小型语言，你可以为想要匹配的相应字符串集指定规则；\n该字符串集可能包含英文语句、email、地址、TeX命令或任何你想搞定的东西。\n然后你可以问诸如“这个字符串匹配该模式吗？”或“在这个字符串中是否有部分匹配该模式呢？”。\n你也可以使用 RE以各种方式来修改或分割字符串。正则表达式语言相对小型和受限（功能有限），\n因此并非所有字符串处理都能用正则表达式完成。\n当然也有些任务可以用正则表达式完成，不过最终表达式会变得异常复杂。\n碰到这些情形时，编写 Python 代码进行处理可能反而更好；\n尽管Python 代码比一个精巧的正则表达式要慢些，但它更易理解。\n<!--more-->\n## 2.在正则表达式中， 如下的字符是具有特殊含义的\n```\n. (所有字符)  ^  $  *(0-N次)  +(1-N次)  ? (0-1次) { } [  ]  \\  |  ( ) \n\n```\n1).\"[\" 和 \"]\"。它们常用来指定一个字符类别，所谓字符类别就是你想匹配的一个字符集\n\n2).其它地方的\"^\"只会简单匹配 \"^\"字符本身。例[^5] 将匹配除 \"5\" 之外的任意字符。\n\n3).反斜杠后面可以加不同的字符以表示不同特殊意义。它也可以用于取消所有的元字符\n\n\n## 3.RE 函数用法:\n   findall(rule , target [,flag] ) 在目标字符串中查找符合规则的字符串。\n   match() 决定 RE 是否在字符串刚开始的位置匹配\n   search() 扫描字符串，找到这个 RE 匹配的位置\n   findall() 找到 RE 匹配的所有子串，并把它们作为一个列表返回\n   finditer() 找到 RE 匹配的所有子串，并把它们作为一个迭代器返回\n   group() 返回被 RE 匹配的字符串\n   start() 返回匹配开始的位置\n   end() 返回匹配结束的位置\n   span() 返回一个元组包含匹配 (开始,结束) 的位置\n   compile( rule [,flag] )将正则规则编译成一个Pattern对象，以供接下来使用第一个参数是规则式，第二个参数是规则选项。(使用compile加速)\n\n## 4 : 含义:\n\n\t预定义转义字符集： “\\d”  “\\w” “\\s” 等等，它们是以字符’\\’开头，后面接一个特定字符的形式,用来指示一个预定义好的含义\n\n\t‘^’  和’$’ 匹配字符串开头和结尾\n\t‘.’    匹配所有字符 除\\n以外\n\t‘\\d’  匹配数字\n\t‘\\D’  匹配非数字\n\t‘\\w’  匹配字母和数字\n\t‘\\W’  匹配非英文字母和数字\n\t‘\\s’   匹配间隔符\n\t‘\\S’   匹配非间隔符\n\t‘\\A’  匹配字符串开头\n\t‘\\Z’  匹配字符串结尾\n\t‘\\b’  只用以匹配单词的词首和词尾。单词被定义为一个字母数字序列，因此词尾就是用空白符或非字母数字符来标示的。(退格)\n\t‘\\B’，它正好同 \\b 相反，只在当前位置不在单词边界时匹配。\n\n## 5.前向界定与后向界定:\n\n\t‘(?<=…)’ 前向界定:括号中’…’代表你希望匹配的字符串的前面应该出现的字符串。\n\t‘(?=…)’后向界定    :括号中的’…’代表你希望匹配的字符串后面应该出现的字符串\n\t‘(?<!..)’前向非界定 :只有当你希望的字符串前面不是’…’的内容时才匹配\n\t‘(?!...)’后向非界定  :只有当你希望的字符串后面不跟着’…’内容时才匹配。\n\n## 6.组的基本知识:\n\t‘(‘’)’          无命名组                    [a-z]+(\\d+)[a-z]+\n\t‘(?P<name>…)’    命名组                    (?P<g1>[a-z]+)\\d+(?P=g1)\n\t‘(?P=name)’    调用已匹配的命名组\n\t‘\\number’     通过序号调用已匹配的组正则式中的每个组都有一个序号，序号是按组从左到右，从1开始的数字，你可以通过下面的形式来调用已匹配的组 ( r\"(\\d+)([a-z]+)(\\d+)(\\2)(\\1)\" )  \n\n```\n# -*- coding:UTF8 -*- \nimport sys\nreload(sys)\nsys.setdefaultencoding('utf-8')\n\nimport rhinoscriptsyntax as rs\n# 正则表达式\nimport re\nstr1 = \"abc \\\\ 123 456\"\nprint re.findall(\"\\\\\\\\\",str1)  # 不用r和用r的区\nprint re.findall(r\"\\d\\Z\",str1) # 用\"r\"来定义规则字符串\n\np = re.compile('(a)b')\nm = p.match('ab')\nprint m.group()\n\ns = \"aaa1 22 gg 333 ccc 4444 pppp 55555 666\"\nprint re.findall(r\"\\b\\d{3}\\b\",s)\nprint re.findall(r\"\\b\\d{2,4}\\b\",s)\n\ns2 = \"aaa111aaa , bbb222 , 333ccc\"\nprint re.findall( r\"(?<=[a-z]+)\\d+(?=[a-z]+)\",s2 )\nprint re.findall( r\"\\d+(?=[a-z]+)\",s2 )\n## 目标 前面是a-z 1-多次、中间数字1-9 1-多次\nprint re.findall(r\"\\d+(?!\\w+)\",s2)\n#无命名组\nprint re.findall(r\"[a-z]+(\\d+)[a-z]+\",s2) # 只返回()里面的\ns3 = 'aaa111aaa,bbb222,333ccc,444ddd444,555eee666,fff777ggg,hhh888hhh'\nprint re.findall(r\"([a-z]+)\\d+([a-z]+)\",s3) #返回括号里面的\n#‘(?P<name>…)’ 命名组\nprint re.findall( r\"(?P<g1>[a-z]+)\\d+(?P=g1)\",s3 ) #找出被中间夹有数字的前后同样的字母\nprint re.findall(r\"([a-z]+)\\d+\\1\",s3)\ns4 = \"111aaa222aaa111,333bbb444bb33\"\nprint re.findall( r\"(\\d+)([a-z]+)(\\d+)(\\2)(\\1)\", s4 ) #数字、字母、数字、字母、数字相对称\nprint re.compile(r\"(\\d+)([a-z]+)(\\d+)(\\2)(\\1)\").findall(s4)\n\n#compile( rule [,flag] ) 使用compile加速\ns5 = \"111,222,aaa,bbb,ccc333,444ddd\"\nprint re.compile(r\"\\d+\\b\").findall(s5) # \\退格 匹配一个位于开头的数字，没有使用M选项\n\ns6 = \"123 456\\n789 012\\n345 678\"\nprint re.compile(r\"^\\d+\",re.M).findall(s6) # 匹配位于(M/多行)开头的数字\n\nrcm=re.compile(r\"\\d+$\")# 对于’$’来说，没有使用M选项，它将匹配最后一个行尾的数字，即’678’，加上以后，就能匹配三个行尾的数字456 012和678了.\nprint re.compile(r\"\\d+$\",re.M).findall(s6) # \n```\n","source":"_posts/Python，Re模块的学习.md","raw":"---\ntitle: Python，Re模块的学习\ndate: 2017-05-20 20:07:31\ntags:\n  - Python\n  - 正则表达式\ndesc: Python，Re模块的学习\nkeywords: Python Re 正则表达式 学习 笔记\ncategories:\n- Python\n\n---\n\n\n\n## 1.概念：\n\n正则表达式（或 RE）是一种小型的、高度专业化的编程语言，在Python中）它内嵌在Python中，并通过 re 模块实现。\n使用这个小型语言，你可以为想要匹配的相应字符串集指定规则；\n该字符串集可能包含英文语句、email、地址、TeX命令或任何你想搞定的东西。\n然后你可以问诸如“这个字符串匹配该模式吗？”或“在这个字符串中是否有部分匹配该模式呢？”。\n你也可以使用 RE以各种方式来修改或分割字符串。正则表达式语言相对小型和受限（功能有限），\n因此并非所有字符串处理都能用正则表达式完成。\n当然也有些任务可以用正则表达式完成，不过最终表达式会变得异常复杂。\n碰到这些情形时，编写 Python 代码进行处理可能反而更好；\n尽管Python 代码比一个精巧的正则表达式要慢些，但它更易理解。\n<!--more-->\n## 2.在正则表达式中， 如下的字符是具有特殊含义的\n```\n. (所有字符)  ^  $  *(0-N次)  +(1-N次)  ? (0-1次) { } [  ]  \\  |  ( ) \n\n```\n1).\"[\" 和 \"]\"。它们常用来指定一个字符类别，所谓字符类别就是你想匹配的一个字符集\n\n2).其它地方的\"^\"只会简单匹配 \"^\"字符本身。例[^5] 将匹配除 \"5\" 之外的任意字符。\n\n3).反斜杠后面可以加不同的字符以表示不同特殊意义。它也可以用于取消所有的元字符\n\n\n## 3.RE 函数用法:\n   findall(rule , target [,flag] ) 在目标字符串中查找符合规则的字符串。\n   match() 决定 RE 是否在字符串刚开始的位置匹配\n   search() 扫描字符串，找到这个 RE 匹配的位置\n   findall() 找到 RE 匹配的所有子串，并把它们作为一个列表返回\n   finditer() 找到 RE 匹配的所有子串，并把它们作为一个迭代器返回\n   group() 返回被 RE 匹配的字符串\n   start() 返回匹配开始的位置\n   end() 返回匹配结束的位置\n   span() 返回一个元组包含匹配 (开始,结束) 的位置\n   compile( rule [,flag] )将正则规则编译成一个Pattern对象，以供接下来使用第一个参数是规则式，第二个参数是规则选项。(使用compile加速)\n\n## 4 : 含义:\n\n\t预定义转义字符集： “\\d”  “\\w” “\\s” 等等，它们是以字符’\\’开头，后面接一个特定字符的形式,用来指示一个预定义好的含义\n\n\t‘^’  和’$’ 匹配字符串开头和结尾\n\t‘.’    匹配所有字符 除\\n以外\n\t‘\\d’  匹配数字\n\t‘\\D’  匹配非数字\n\t‘\\w’  匹配字母和数字\n\t‘\\W’  匹配非英文字母和数字\n\t‘\\s’   匹配间隔符\n\t‘\\S’   匹配非间隔符\n\t‘\\A’  匹配字符串开头\n\t‘\\Z’  匹配字符串结尾\n\t‘\\b’  只用以匹配单词的词首和词尾。单词被定义为一个字母数字序列，因此词尾就是用空白符或非字母数字符来标示的。(退格)\n\t‘\\B’，它正好同 \\b 相反，只在当前位置不在单词边界时匹配。\n\n## 5.前向界定与后向界定:\n\n\t‘(?<=…)’ 前向界定:括号中’…’代表你希望匹配的字符串的前面应该出现的字符串。\n\t‘(?=…)’后向界定    :括号中的’…’代表你希望匹配的字符串后面应该出现的字符串\n\t‘(?<!..)’前向非界定 :只有当你希望的字符串前面不是’…’的内容时才匹配\n\t‘(?!...)’后向非界定  :只有当你希望的字符串后面不跟着’…’内容时才匹配。\n\n## 6.组的基本知识:\n\t‘(‘’)’          无命名组                    [a-z]+(\\d+)[a-z]+\n\t‘(?P<name>…)’    命名组                    (?P<g1>[a-z]+)\\d+(?P=g1)\n\t‘(?P=name)’    调用已匹配的命名组\n\t‘\\number’     通过序号调用已匹配的组正则式中的每个组都有一个序号，序号是按组从左到右，从1开始的数字，你可以通过下面的形式来调用已匹配的组 ( r\"(\\d+)([a-z]+)(\\d+)(\\2)(\\1)\" )  \n\n```\n# -*- coding:UTF8 -*- \nimport sys\nreload(sys)\nsys.setdefaultencoding('utf-8')\n\nimport rhinoscriptsyntax as rs\n# 正则表达式\nimport re\nstr1 = \"abc \\\\ 123 456\"\nprint re.findall(\"\\\\\\\\\",str1)  # 不用r和用r的区\nprint re.findall(r\"\\d\\Z\",str1) # 用\"r\"来定义规则字符串\n\np = re.compile('(a)b')\nm = p.match('ab')\nprint m.group()\n\ns = \"aaa1 22 gg 333 ccc 4444 pppp 55555 666\"\nprint re.findall(r\"\\b\\d{3}\\b\",s)\nprint re.findall(r\"\\b\\d{2,4}\\b\",s)\n\ns2 = \"aaa111aaa , bbb222 , 333ccc\"\nprint re.findall( r\"(?<=[a-z]+)\\d+(?=[a-z]+)\",s2 )\nprint re.findall( r\"\\d+(?=[a-z]+)\",s2 )\n## 目标 前面是a-z 1-多次、中间数字1-9 1-多次\nprint re.findall(r\"\\d+(?!\\w+)\",s2)\n#无命名组\nprint re.findall(r\"[a-z]+(\\d+)[a-z]+\",s2) # 只返回()里面的\ns3 = 'aaa111aaa,bbb222,333ccc,444ddd444,555eee666,fff777ggg,hhh888hhh'\nprint re.findall(r\"([a-z]+)\\d+([a-z]+)\",s3) #返回括号里面的\n#‘(?P<name>…)’ 命名组\nprint re.findall( r\"(?P<g1>[a-z]+)\\d+(?P=g1)\",s3 ) #找出被中间夹有数字的前后同样的字母\nprint re.findall(r\"([a-z]+)\\d+\\1\",s3)\ns4 = \"111aaa222aaa111,333bbb444bb33\"\nprint re.findall( r\"(\\d+)([a-z]+)(\\d+)(\\2)(\\1)\", s4 ) #数字、字母、数字、字母、数字相对称\nprint re.compile(r\"(\\d+)([a-z]+)(\\d+)(\\2)(\\1)\").findall(s4)\n\n#compile( rule [,flag] ) 使用compile加速\ns5 = \"111,222,aaa,bbb,ccc333,444ddd\"\nprint re.compile(r\"\\d+\\b\").findall(s5) # \\退格 匹配一个位于开头的数字，没有使用M选项\n\ns6 = \"123 456\\n789 012\\n345 678\"\nprint re.compile(r\"^\\d+\",re.M).findall(s6) # 匹配位于(M/多行)开头的数字\n\nrcm=re.compile(r\"\\d+$\")# 对于’$’来说，没有使用M选项，它将匹配最后一个行尾的数字，即’678’，加上以后，就能匹配三个行尾的数字456 012和678了.\nprint re.compile(r\"\\d+$\",re.M).findall(s6) # \n```\n","slug":"Python，Re模块的学习","published":1,"updated":"2017-06-25T09:50:27.310Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnom6wow000ac0fyc3ip3y64","content":"<h2 id=\"1-概念：\"><a href=\"#1-概念：\" class=\"headerlink\" title=\"1.概念：\"></a>1.概念：</h2><p>正则表达式（或 RE）是一种小型的、高度专业化的编程语言，在Python中）它内嵌在Python中，并通过 re 模块实现。<br>使用这个小型语言，你可以为想要匹配的相应字符串集指定规则；<br>该字符串集可能包含英文语句、email、地址、TeX命令或任何你想搞定的东西。<br>然后你可以问诸如“这个字符串匹配该模式吗？”或“在这个字符串中是否有部分匹配该模式呢？”。<br>你也可以使用 RE以各种方式来修改或分割字符串。正则表达式语言相对小型和受限（功能有限），<br>因此并非所有字符串处理都能用正则表达式完成。<br>当然也有些任务可以用正则表达式完成，不过最终表达式会变得异常复杂。<br>碰到这些情形时，编写 Python 代码进行处理可能反而更好；<br>尽管Python 代码比一个精巧的正则表达式要慢些，但它更易理解。<br><a id=\"more\"></a></p>\n<h2 id=\"2-在正则表达式中，-如下的字符是具有特殊含义的\"><a href=\"#2-在正则表达式中，-如下的字符是具有特殊含义的\" class=\"headerlink\" title=\"2.在正则表达式中， 如下的字符是具有特殊含义的\"></a>2.在正则表达式中， 如下的字符是具有特殊含义的</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">. (所有字符)  ^  $  *(0-N次)  +(1-N次)  ? (0-1次) &#123; &#125; [  ]  \\  |  ( )</div></pre></td></tr></table></figure>\n<p>1).”[“ 和 “]”。它们常用来指定一个字符类别，所谓字符类别就是你想匹配的一个字符集</p>\n<p>2).其它地方的”^”只会简单匹配 “^”字符本身。例[^5] 将匹配除 “5” 之外的任意字符。</p>\n<p>3).反斜杠后面可以加不同的字符以表示不同特殊意义。它也可以用于取消所有的元字符</p>\n<h2 id=\"3-RE-函数用法\"><a href=\"#3-RE-函数用法\" class=\"headerlink\" title=\"3.RE 函数用法:\"></a>3.RE 函数用法:</h2><p>   findall(rule , target [,flag] ) 在目标字符串中查找符合规则的字符串。<br>   match() 决定 RE 是否在字符串刚开始的位置匹配<br>   search() 扫描字符串，找到这个 RE 匹配的位置<br>   findall() 找到 RE 匹配的所有子串，并把它们作为一个列表返回<br>   finditer() 找到 RE 匹配的所有子串，并把它们作为一个迭代器返回<br>   group() 返回被 RE 匹配的字符串<br>   start() 返回匹配开始的位置<br>   end() 返回匹配结束的位置<br>   span() 返回一个元组包含匹配 (开始,结束) 的位置<br>   compile( rule [,flag] )将正则规则编译成一个Pattern对象，以供接下来使用第一个参数是规则式，第二个参数是规则选项。(使用compile加速)</p>\n<h2 id=\"4-含义\"><a href=\"#4-含义\" class=\"headerlink\" title=\"4 : 含义:\"></a>4 : 含义:</h2><pre><code>预定义转义字符集： “\\d”  “\\w” “\\s” 等等，它们是以字符’\\’开头，后面接一个特定字符的形式,用来指示一个预定义好的含义\n\n‘^’  和’$’ 匹配字符串开头和结尾\n‘.’    匹配所有字符 除\\n以外\n‘\\d’  匹配数字\n‘\\D’  匹配非数字\n‘\\w’  匹配字母和数字\n‘\\W’  匹配非英文字母和数字\n‘\\s’   匹配间隔符\n‘\\S’   匹配非间隔符\n‘\\A’  匹配字符串开头\n‘\\Z’  匹配字符串结尾\n‘\\b’  只用以匹配单词的词首和词尾。单词被定义为一个字母数字序列，因此词尾就是用空白符或非字母数字符来标示的。(退格)\n‘\\B’，它正好同 \\b 相反，只在当前位置不在单词边界时匹配。\n</code></pre><h2 id=\"5-前向界定与后向界定\"><a href=\"#5-前向界定与后向界定\" class=\"headerlink\" title=\"5.前向界定与后向界定:\"></a>5.前向界定与后向界定:</h2><pre><code>‘(?&lt;=…)’ 前向界定:括号中’…’代表你希望匹配的字符串的前面应该出现的字符串。\n‘(?=…)’后向界定    :括号中的’…’代表你希望匹配的字符串后面应该出现的字符串\n‘(?&lt;!..)’前向非界定 :只有当你希望的字符串前面不是’…’的内容时才匹配\n‘(?!...)’后向非界定  :只有当你希望的字符串后面不跟着’…’内容时才匹配。\n</code></pre><h2 id=\"6-组的基本知识\"><a href=\"#6-组的基本知识\" class=\"headerlink\" title=\"6.组的基本知识:\"></a>6.组的基本知识:</h2><pre><code>‘(‘’)’          无命名组                    [a-z]+(\\d+)[a-z]+\n‘(?P&lt;name&gt;…)’    命名组                    (?P&lt;g1&gt;[a-z]+)\\d+(?P=g1)\n‘(?P=name)’    调用已匹配的命名组\n‘\\number’     通过序号调用已匹配的组正则式中的每个组都有一个序号，序号是按组从左到右，从1开始的数字，你可以通过下面的形式来调用已匹配的组 ( r&quot;(\\d+)([a-z]+)(\\d+)(\\2)(\\1)&quot; )  \n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"># -*- coding:UTF8 -*- </div><div class=\"line\">import sys</div><div class=\"line\">reload(sys)</div><div class=\"line\">sys.setdefaultencoding(&apos;utf-8&apos;)</div><div class=\"line\"></div><div class=\"line\">import rhinoscriptsyntax as rs</div><div class=\"line\"># 正则表达式</div><div class=\"line\">import re</div><div class=\"line\">str1 = &quot;abc \\\\ 123 456&quot;</div><div class=\"line\">print re.findall(&quot;\\\\\\\\&quot;,str1)  # 不用r和用r的区</div><div class=\"line\">print re.findall(r&quot;\\d\\Z&quot;,str1) # 用&quot;r&quot;来定义规则字符串</div><div class=\"line\"></div><div class=\"line\">p = re.compile(&apos;(a)b&apos;)</div><div class=\"line\">m = p.match(&apos;ab&apos;)</div><div class=\"line\">print m.group()</div><div class=\"line\"></div><div class=\"line\">s = &quot;aaa1 22 gg 333 ccc 4444 pppp 55555 666&quot;</div><div class=\"line\">print re.findall(r&quot;\\b\\d&#123;3&#125;\\b&quot;,s)</div><div class=\"line\">print re.findall(r&quot;\\b\\d&#123;2,4&#125;\\b&quot;,s)</div><div class=\"line\"></div><div class=\"line\">s2 = &quot;aaa111aaa , bbb222 , 333ccc&quot;</div><div class=\"line\">print re.findall( r&quot;(?&lt;=[a-z]+)\\d+(?=[a-z]+)&quot;,s2 )</div><div class=\"line\">print re.findall( r&quot;\\d+(?=[a-z]+)&quot;,s2 )</div><div class=\"line\">## 目标 前面是a-z 1-多次、中间数字1-9 1-多次</div><div class=\"line\">print re.findall(r&quot;\\d+(?!\\w+)&quot;,s2)</div><div class=\"line\">#无命名组</div><div class=\"line\">print re.findall(r&quot;[a-z]+(\\d+)[a-z]+&quot;,s2) # 只返回()里面的</div><div class=\"line\">s3 = &apos;aaa111aaa,bbb222,333ccc,444ddd444,555eee666,fff777ggg,hhh888hhh&apos;</div><div class=\"line\">print re.findall(r&quot;([a-z]+)\\d+([a-z]+)&quot;,s3) #返回括号里面的</div><div class=\"line\">#‘(?P&lt;name&gt;…)’ 命名组</div><div class=\"line\">print re.findall( r&quot;(?P&lt;g1&gt;[a-z]+)\\d+(?P=g1)&quot;,s3 ) #找出被中间夹有数字的前后同样的字母</div><div class=\"line\">print re.findall(r&quot;([a-z]+)\\d+\\1&quot;,s3)</div><div class=\"line\">s4 = &quot;111aaa222aaa111,333bbb444bb33&quot;</div><div class=\"line\">print re.findall( r&quot;(\\d+)([a-z]+)(\\d+)(\\2)(\\1)&quot;, s4 ) #数字、字母、数字、字母、数字相对称</div><div class=\"line\">print re.compile(r&quot;(\\d+)([a-z]+)(\\d+)(\\2)(\\1)&quot;).findall(s4)</div><div class=\"line\"></div><div class=\"line\">#compile( rule [,flag] ) 使用compile加速</div><div class=\"line\">s5 = &quot;111,222,aaa,bbb,ccc333,444ddd&quot;</div><div class=\"line\">print re.compile(r&quot;\\d+\\b&quot;).findall(s5) # \\退格 匹配一个位于开头的数字，没有使用M选项</div><div class=\"line\"></div><div class=\"line\">s6 = &quot;123 456\\n789 012\\n345 678&quot;</div><div class=\"line\">print re.compile(r&quot;^\\d+&quot;,re.M).findall(s6) # 匹配位于(M/多行)开头的数字</div><div class=\"line\"></div><div class=\"line\">rcm=re.compile(r&quot;\\d+$&quot;)# 对于’$’来说，没有使用M选项，它将匹配最后一个行尾的数字，即’678’，加上以后，就能匹配三个行尾的数字456 012和678了.</div><div class=\"line\">print re.compile(r&quot;\\d+$&quot;,re.M).findall(s6) #</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"1-概念：\"><a href=\"#1-概念：\" class=\"headerlink\" title=\"1.概念：\"></a>1.概念：</h2><p>正则表达式（或 RE）是一种小型的、高度专业化的编程语言，在Python中）它内嵌在Python中，并通过 re 模块实现。<br>使用这个小型语言，你可以为想要匹配的相应字符串集指定规则；<br>该字符串集可能包含英文语句、email、地址、TeX命令或任何你想搞定的东西。<br>然后你可以问诸如“这个字符串匹配该模式吗？”或“在这个字符串中是否有部分匹配该模式呢？”。<br>你也可以使用 RE以各种方式来修改或分割字符串。正则表达式语言相对小型和受限（功能有限），<br>因此并非所有字符串处理都能用正则表达式完成。<br>当然也有些任务可以用正则表达式完成，不过最终表达式会变得异常复杂。<br>碰到这些情形时，编写 Python 代码进行处理可能反而更好；<br>尽管Python 代码比一个精巧的正则表达式要慢些，但它更易理解。<br>","more":"</p>\n<h2 id=\"2-在正则表达式中，-如下的字符是具有特殊含义的\"><a href=\"#2-在正则表达式中，-如下的字符是具有特殊含义的\" class=\"headerlink\" title=\"2.在正则表达式中， 如下的字符是具有特殊含义的\"></a>2.在正则表达式中， 如下的字符是具有特殊含义的</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">. (所有字符)  ^  $  *(0-N次)  +(1-N次)  ? (0-1次) &#123; &#125; [  ]  \\  |  ( )</div></pre></td></tr></table></figure>\n<p>1).”[“ 和 “]”。它们常用来指定一个字符类别，所谓字符类别就是你想匹配的一个字符集</p>\n<p>2).其它地方的”^”只会简单匹配 “^”字符本身。例[^5] 将匹配除 “5” 之外的任意字符。</p>\n<p>3).反斜杠后面可以加不同的字符以表示不同特殊意义。它也可以用于取消所有的元字符</p>\n<h2 id=\"3-RE-函数用法\"><a href=\"#3-RE-函数用法\" class=\"headerlink\" title=\"3.RE 函数用法:\"></a>3.RE 函数用法:</h2><p>   findall(rule , target [,flag] ) 在目标字符串中查找符合规则的字符串。<br>   match() 决定 RE 是否在字符串刚开始的位置匹配<br>   search() 扫描字符串，找到这个 RE 匹配的位置<br>   findall() 找到 RE 匹配的所有子串，并把它们作为一个列表返回<br>   finditer() 找到 RE 匹配的所有子串，并把它们作为一个迭代器返回<br>   group() 返回被 RE 匹配的字符串<br>   start() 返回匹配开始的位置<br>   end() 返回匹配结束的位置<br>   span() 返回一个元组包含匹配 (开始,结束) 的位置<br>   compile( rule [,flag] )将正则规则编译成一个Pattern对象，以供接下来使用第一个参数是规则式，第二个参数是规则选项。(使用compile加速)</p>\n<h2 id=\"4-含义\"><a href=\"#4-含义\" class=\"headerlink\" title=\"4 : 含义:\"></a>4 : 含义:</h2><pre><code>预定义转义字符集： “\\d”  “\\w” “\\s” 等等，它们是以字符’\\’开头，后面接一个特定字符的形式,用来指示一个预定义好的含义\n\n‘^’  和’$’ 匹配字符串开头和结尾\n‘.’    匹配所有字符 除\\n以外\n‘\\d’  匹配数字\n‘\\D’  匹配非数字\n‘\\w’  匹配字母和数字\n‘\\W’  匹配非英文字母和数字\n‘\\s’   匹配间隔符\n‘\\S’   匹配非间隔符\n‘\\A’  匹配字符串开头\n‘\\Z’  匹配字符串结尾\n‘\\b’  只用以匹配单词的词首和词尾。单词被定义为一个字母数字序列，因此词尾就是用空白符或非字母数字符来标示的。(退格)\n‘\\B’，它正好同 \\b 相反，只在当前位置不在单词边界时匹配。\n</code></pre><h2 id=\"5-前向界定与后向界定\"><a href=\"#5-前向界定与后向界定\" class=\"headerlink\" title=\"5.前向界定与后向界定:\"></a>5.前向界定与后向界定:</h2><pre><code>‘(?&lt;=…)’ 前向界定:括号中’…’代表你希望匹配的字符串的前面应该出现的字符串。\n‘(?=…)’后向界定    :括号中的’…’代表你希望匹配的字符串后面应该出现的字符串\n‘(?&lt;!..)’前向非界定 :只有当你希望的字符串前面不是’…’的内容时才匹配\n‘(?!...)’后向非界定  :只有当你希望的字符串后面不跟着’…’内容时才匹配。\n</code></pre><h2 id=\"6-组的基本知识\"><a href=\"#6-组的基本知识\" class=\"headerlink\" title=\"6.组的基本知识:\"></a>6.组的基本知识:</h2><pre><code>‘(‘’)’          无命名组                    [a-z]+(\\d+)[a-z]+\n‘(?P&lt;name&gt;…)’    命名组                    (?P&lt;g1&gt;[a-z]+)\\d+(?P=g1)\n‘(?P=name)’    调用已匹配的命名组\n‘\\number’     通过序号调用已匹配的组正则式中的每个组都有一个序号，序号是按组从左到右，从1开始的数字，你可以通过下面的形式来调用已匹配的组 ( r&quot;(\\d+)([a-z]+)(\\d+)(\\2)(\\1)&quot; )  \n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"># -*- coding:UTF8 -*- </div><div class=\"line\">import sys</div><div class=\"line\">reload(sys)</div><div class=\"line\">sys.setdefaultencoding(&apos;utf-8&apos;)</div><div class=\"line\"></div><div class=\"line\">import rhinoscriptsyntax as rs</div><div class=\"line\"># 正则表达式</div><div class=\"line\">import re</div><div class=\"line\">str1 = &quot;abc \\\\ 123 456&quot;</div><div class=\"line\">print re.findall(&quot;\\\\\\\\&quot;,str1)  # 不用r和用r的区</div><div class=\"line\">print re.findall(r&quot;\\d\\Z&quot;,str1) # 用&quot;r&quot;来定义规则字符串</div><div class=\"line\"></div><div class=\"line\">p = re.compile(&apos;(a)b&apos;)</div><div class=\"line\">m = p.match(&apos;ab&apos;)</div><div class=\"line\">print m.group()</div><div class=\"line\"></div><div class=\"line\">s = &quot;aaa1 22 gg 333 ccc 4444 pppp 55555 666&quot;</div><div class=\"line\">print re.findall(r&quot;\\b\\d&#123;3&#125;\\b&quot;,s)</div><div class=\"line\">print re.findall(r&quot;\\b\\d&#123;2,4&#125;\\b&quot;,s)</div><div class=\"line\"></div><div class=\"line\">s2 = &quot;aaa111aaa , bbb222 , 333ccc&quot;</div><div class=\"line\">print re.findall( r&quot;(?&lt;=[a-z]+)\\d+(?=[a-z]+)&quot;,s2 )</div><div class=\"line\">print re.findall( r&quot;\\d+(?=[a-z]+)&quot;,s2 )</div><div class=\"line\">## 目标 前面是a-z 1-多次、中间数字1-9 1-多次</div><div class=\"line\">print re.findall(r&quot;\\d+(?!\\w+)&quot;,s2)</div><div class=\"line\">#无命名组</div><div class=\"line\">print re.findall(r&quot;[a-z]+(\\d+)[a-z]+&quot;,s2) # 只返回()里面的</div><div class=\"line\">s3 = &apos;aaa111aaa,bbb222,333ccc,444ddd444,555eee666,fff777ggg,hhh888hhh&apos;</div><div class=\"line\">print re.findall(r&quot;([a-z]+)\\d+([a-z]+)&quot;,s3) #返回括号里面的</div><div class=\"line\">#‘(?P&lt;name&gt;…)’ 命名组</div><div class=\"line\">print re.findall( r&quot;(?P&lt;g1&gt;[a-z]+)\\d+(?P=g1)&quot;,s3 ) #找出被中间夹有数字的前后同样的字母</div><div class=\"line\">print re.findall(r&quot;([a-z]+)\\d+\\1&quot;,s3)</div><div class=\"line\">s4 = &quot;111aaa222aaa111,333bbb444bb33&quot;</div><div class=\"line\">print re.findall( r&quot;(\\d+)([a-z]+)(\\d+)(\\2)(\\1)&quot;, s4 ) #数字、字母、数字、字母、数字相对称</div><div class=\"line\">print re.compile(r&quot;(\\d+)([a-z]+)(\\d+)(\\2)(\\1)&quot;).findall(s4)</div><div class=\"line\"></div><div class=\"line\">#compile( rule [,flag] ) 使用compile加速</div><div class=\"line\">s5 = &quot;111,222,aaa,bbb,ccc333,444ddd&quot;</div><div class=\"line\">print re.compile(r&quot;\\d+\\b&quot;).findall(s5) # \\退格 匹配一个位于开头的数字，没有使用M选项</div><div class=\"line\"></div><div class=\"line\">s6 = &quot;123 456\\n789 012\\n345 678&quot;</div><div class=\"line\">print re.compile(r&quot;^\\d+&quot;,re.M).findall(s6) # 匹配位于(M/多行)开头的数字</div><div class=\"line\"></div><div class=\"line\">rcm=re.compile(r&quot;\\d+$&quot;)# 对于’$’来说，没有使用M选项，它将匹配最后一个行尾的数字，即’678’，加上以后，就能匹配三个行尾的数字456 012和678了.</div><div class=\"line\">print re.compile(r&quot;\\d+$&quot;,re.M).findall(s6) #</div></pre></td></tr></table></figure>"},{"title":"SSH的原理和运用","date":"2017-05-31T13:54:48.000Z","desc":"SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议","keywords":"ssh 网络传输 linux 加密","_content":"** SSH(安全外壳协议) **为 Secure Shell 的缩写，由 IETF 的网络小组（Network Working Group）所制定；SSH 为建立在应用层和传输层基础上的安全协议。SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。     \n利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。SSH最初是UNIX系统上的一个程序，后来又迅速扩展到其他操作平台。SSH在正确使用时可弥补网络中的漏洞。  \nSSH客户端适用于多种平台。几乎所有UNIX平台—包括HP-UX、Linux、AIX、Solaris、Digital   UNIX、Irix，以及其他平台，都可运行SSH。[百度百科:SSH](https://0x9.me/xuSFD)\n<!--more-->\n\nSSH是每一台Linux电脑的标准配置。\n随着Linux设备从电脑逐渐扩展到手机、外设和家用电器，SSH的使用范围也越来越广。不仅程序员离不开它，很多普通用户也每天使用。\nSSH具备多种功能，可以用于很多场合。有些事情，没有它就是办不成。本文是我的学习笔记，总结和解释了SSH的常见用法，希望对大家有用。\n## ** 1.SSH是什么 ** \n简单说，SSH是一种网络协议，用于计算机之间的加密登录。\n如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露。  \n## **二、最基本的用法**\nSSH主要用于远程登录。假定你要以用户名user，登录远程主机host，只要一条简单命令就可以了。\n```\n$ ssh user@host\n```\n\n如果本地用户名与远程用户名一致，登录时可以省略用户名。\n```\n$ ssh host\n```\n\nSSH的默认端口是22，也就是说，你的登录请求会送进远程主机的22端口。使用p参数，可以修改这个端口。\n```\n$ ssh -p 2222 user@host\n```\n上面这条命令表示，ssh直接连接远程主机的2222端口。\n\n## **三、中间人攻击**\nSSH之所以能够保证安全，原因在于它采用了公钥加密。\n整个过程是这样的：\n\n（1）远程主机收到用户的登录请求，把自己的公钥发给用户。\n\n（2）用户使用这个公钥，将登录密码加密后，发送回来。\n\n（3）远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。\n\n这个过程本身是安全的，但是实施的时候存在一个风险：如果有人截获了登录请求，然后冒充远程主机，将伪造的公钥发给用户，那么用户很难辨别真伪。因为不像https协议，SSH协议的公钥是没有证书中心（CA）公证的，也就是说，都是自己签发的。\n可以设想，如果攻击者插在用户与远程主机之间（比如在公共的wifi区域），用伪造的公钥，获取用户的登录密码。再用这个密码登录远程主机，那么SSH的安全机制就荡然无存了。这种风险就是著名的\"中间人攻击\"（Man-in-the-middle attack）。\n\nSSH协议是如何应对的呢？\n\n## **四、口令登录**\n如果你是第一次登录对方主机，系统会出现下面的提示：\n``\n　　$ ssh user@host\n　　The authenticity of host 'host (12.18.429.21)' can't be established.\n　　RSA key fingerprint is 98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d.\n　　Are you sure you want to continue connecting (yes/no)?\n``\n  这段话的意思是，无法确认host主机的真实性，只知道它的公钥指纹，问你还想继续连接吗？\n所谓\"公钥指纹\"，是指公钥长度较长（这里采用RSA算法，长达1024位），很难比对，所以对其进行MD5计算，将它变成一个128位的指纹。上例中是`98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d`，再进行比较，就容易多了。\n\n  很自然的一个问题就是，用户怎么知道远程主机的公钥指纹应该是多少？回答是没有好办法，远程主机必须在自己的网站上贴出公钥指纹，以便用户自行核对。\n\n假定经过风险衡量以后，用户决定接受这个远程主机的公钥。\n``Are you sure you want to continue connecting (yes/no)? yes``\n\n系统会出现一句提示，表示host主机已经得到认可。\n``Warning: Permanently added 'host,12.18.429.21' (RSA) to the list of known hosts.``\n\n然后，会要求输入密码。\n``Password: (enter password)``\n\n如果密码正确，就可以登录了。\n当远程主机的公钥被接受以后，它就会被保存在文件`$HOME/.ssh/known_hosts`之中。下次再连接这台主机，系统就会认出它的公钥已经保存在本地了，从而跳过警告部分，直接提示输入密码。\n\n每个SSH用户都有自己的known_hosts文件，此外系统也有一个这样的文件，通常是``/etc/ssh/ssh_known_hosts``，保存一些对所有用户都可信赖的远程主机的公钥。\n\n## **五、公钥登录**\n使用密码登录，每次都必须输入密码，非常麻烦。好在SSH还提供了公钥登录，可以省去输入密码的步骤。\n\n所谓\"公钥登录\"，原理很简单，就是用户将自己的公钥储存在远程主机上。登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录shell，不再要求密码。\n\n这种方法要求用户必须提供自己的公钥。如果没有现成的，可以直接用ssh-keygen生成一个：\n```$ ssh-keygen```\n  运行上面的命令以后，系统会出现一系列提示，可以一路回车。其中有一个问题是，要不要对私钥设置口令（passphrase），如果担心私钥的安全，这里可以设置一个。\n\n运行结束以后，在`$HOME/.ssh/`目录下，会新生成两个文件：`id_rsa.pub`和`id_rsa`。\n前者是你的公钥，后者是你的私钥。\n\n这时再输入下面的命令，将公钥传送到远程主机host上面：\n\n```$ ssh-copy-id user@host```\n\n好了，从此你再登录，就不需要输入密码了。\n如果还是不行，就打开远程主机的`/etc/ssh/sshd_config`这个文件，检查下面几行前面\"#\"注释是否取掉。\n``RSAAuthentication yes\n\nPubkeyAuthentication yes \n\nAuthorizedKeysFile .ssh/authorized_keys\n``\n然后，重启远程主机的ssh服务。\n\n// ubuntu系统　　``service ssh restart``\n\n// debian系统　　``/etc/init.d/ssh restart``\n\n## **六、authorized_keys文件**\n远程主机将用户的公钥，保存在登录后的用户主目录的``$HOME/.ssh/authorized_keys``文件中。\n公钥就是一段字符串，只要把它追加在``authorized_keys``文件的末尾就行了。\n\n这里不使用上面的``ssh-copy-id``命令，改用下面的命令，解释公钥的保存过程：\n\n```$ ssh user@host 'mkdir -p .ssh && cat >> .ssh/authorized_keys' < ~/.ssh/id_rsa.pub\n```\n\n这条命令由多个语句组成，依次分解开来看：\n\n（1）\"``$ ssh user@host``\"，表示登录远程主机；\n\n（2）单引号中的``mkdir .ssh && cat >> .ssh/authorized_keys``，表示登录后在远程shell上执行的命令：\n\n（3）\"``$ mkdir -p .ssh``\"的作用是，如果用户主目录中的.ssh目录不存在，就创建一个；\n\n（4）``'cat >> .ssh/authorized_keys' < ~/.ssh/id_rsa.pub``的作用是，将本地的公钥文件``~/.ssh/id_rsa.pub``，重定向追加到远程文件authorized_keys的末尾。\n\n写入``authorized_keys``文件后，公钥登录的设置就完成了。\n\n\n\n## 拓展阅读：\n[数字签名是什么？](http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html)","source":"_posts/SSH的原理和运用.md","raw":"---\ntitle: SSH的原理和运用\ndate: 2017-05-31 21:54:48\ntags: \n- SSH\n- Linux\ndesc: SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议\nkeywords: ssh 网络传输 linux 加密\ncategories:\n  - linux\n---\n** SSH(安全外壳协议) **为 Secure Shell 的缩写，由 IETF 的网络小组（Network Working Group）所制定；SSH 为建立在应用层和传输层基础上的安全协议。SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。     \n利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。SSH最初是UNIX系统上的一个程序，后来又迅速扩展到其他操作平台。SSH在正确使用时可弥补网络中的漏洞。  \nSSH客户端适用于多种平台。几乎所有UNIX平台—包括HP-UX、Linux、AIX、Solaris、Digital   UNIX、Irix，以及其他平台，都可运行SSH。[百度百科:SSH](https://0x9.me/xuSFD)\n<!--more-->\n\nSSH是每一台Linux电脑的标准配置。\n随着Linux设备从电脑逐渐扩展到手机、外设和家用电器，SSH的使用范围也越来越广。不仅程序员离不开它，很多普通用户也每天使用。\nSSH具备多种功能，可以用于很多场合。有些事情，没有它就是办不成。本文是我的学习笔记，总结和解释了SSH的常见用法，希望对大家有用。\n## ** 1.SSH是什么 ** \n简单说，SSH是一种网络协议，用于计算机之间的加密登录。\n如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露。  \n## **二、最基本的用法**\nSSH主要用于远程登录。假定你要以用户名user，登录远程主机host，只要一条简单命令就可以了。\n```\n$ ssh user@host\n```\n\n如果本地用户名与远程用户名一致，登录时可以省略用户名。\n```\n$ ssh host\n```\n\nSSH的默认端口是22，也就是说，你的登录请求会送进远程主机的22端口。使用p参数，可以修改这个端口。\n```\n$ ssh -p 2222 user@host\n```\n上面这条命令表示，ssh直接连接远程主机的2222端口。\n\n## **三、中间人攻击**\nSSH之所以能够保证安全，原因在于它采用了公钥加密。\n整个过程是这样的：\n\n（1）远程主机收到用户的登录请求，把自己的公钥发给用户。\n\n（2）用户使用这个公钥，将登录密码加密后，发送回来。\n\n（3）远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。\n\n这个过程本身是安全的，但是实施的时候存在一个风险：如果有人截获了登录请求，然后冒充远程主机，将伪造的公钥发给用户，那么用户很难辨别真伪。因为不像https协议，SSH协议的公钥是没有证书中心（CA）公证的，也就是说，都是自己签发的。\n可以设想，如果攻击者插在用户与远程主机之间（比如在公共的wifi区域），用伪造的公钥，获取用户的登录密码。再用这个密码登录远程主机，那么SSH的安全机制就荡然无存了。这种风险就是著名的\"中间人攻击\"（Man-in-the-middle attack）。\n\nSSH协议是如何应对的呢？\n\n## **四、口令登录**\n如果你是第一次登录对方主机，系统会出现下面的提示：\n``\n　　$ ssh user@host\n　　The authenticity of host 'host (12.18.429.21)' can't be established.\n　　RSA key fingerprint is 98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d.\n　　Are you sure you want to continue connecting (yes/no)?\n``\n  这段话的意思是，无法确认host主机的真实性，只知道它的公钥指纹，问你还想继续连接吗？\n所谓\"公钥指纹\"，是指公钥长度较长（这里采用RSA算法，长达1024位），很难比对，所以对其进行MD5计算，将它变成一个128位的指纹。上例中是`98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d`，再进行比较，就容易多了。\n\n  很自然的一个问题就是，用户怎么知道远程主机的公钥指纹应该是多少？回答是没有好办法，远程主机必须在自己的网站上贴出公钥指纹，以便用户自行核对。\n\n假定经过风险衡量以后，用户决定接受这个远程主机的公钥。\n``Are you sure you want to continue connecting (yes/no)? yes``\n\n系统会出现一句提示，表示host主机已经得到认可。\n``Warning: Permanently added 'host,12.18.429.21' (RSA) to the list of known hosts.``\n\n然后，会要求输入密码。\n``Password: (enter password)``\n\n如果密码正确，就可以登录了。\n当远程主机的公钥被接受以后，它就会被保存在文件`$HOME/.ssh/known_hosts`之中。下次再连接这台主机，系统就会认出它的公钥已经保存在本地了，从而跳过警告部分，直接提示输入密码。\n\n每个SSH用户都有自己的known_hosts文件，此外系统也有一个这样的文件，通常是``/etc/ssh/ssh_known_hosts``，保存一些对所有用户都可信赖的远程主机的公钥。\n\n## **五、公钥登录**\n使用密码登录，每次都必须输入密码，非常麻烦。好在SSH还提供了公钥登录，可以省去输入密码的步骤。\n\n所谓\"公钥登录\"，原理很简单，就是用户将自己的公钥储存在远程主机上。登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录shell，不再要求密码。\n\n这种方法要求用户必须提供自己的公钥。如果没有现成的，可以直接用ssh-keygen生成一个：\n```$ ssh-keygen```\n  运行上面的命令以后，系统会出现一系列提示，可以一路回车。其中有一个问题是，要不要对私钥设置口令（passphrase），如果担心私钥的安全，这里可以设置一个。\n\n运行结束以后，在`$HOME/.ssh/`目录下，会新生成两个文件：`id_rsa.pub`和`id_rsa`。\n前者是你的公钥，后者是你的私钥。\n\n这时再输入下面的命令，将公钥传送到远程主机host上面：\n\n```$ ssh-copy-id user@host```\n\n好了，从此你再登录，就不需要输入密码了。\n如果还是不行，就打开远程主机的`/etc/ssh/sshd_config`这个文件，检查下面几行前面\"#\"注释是否取掉。\n``RSAAuthentication yes\n\nPubkeyAuthentication yes \n\nAuthorizedKeysFile .ssh/authorized_keys\n``\n然后，重启远程主机的ssh服务。\n\n// ubuntu系统　　``service ssh restart``\n\n// debian系统　　``/etc/init.d/ssh restart``\n\n## **六、authorized_keys文件**\n远程主机将用户的公钥，保存在登录后的用户主目录的``$HOME/.ssh/authorized_keys``文件中。\n公钥就是一段字符串，只要把它追加在``authorized_keys``文件的末尾就行了。\n\n这里不使用上面的``ssh-copy-id``命令，改用下面的命令，解释公钥的保存过程：\n\n```$ ssh user@host 'mkdir -p .ssh && cat >> .ssh/authorized_keys' < ~/.ssh/id_rsa.pub\n```\n\n这条命令由多个语句组成，依次分解开来看：\n\n（1）\"``$ ssh user@host``\"，表示登录远程主机；\n\n（2）单引号中的``mkdir .ssh && cat >> .ssh/authorized_keys``，表示登录后在远程shell上执行的命令：\n\n（3）\"``$ mkdir -p .ssh``\"的作用是，如果用户主目录中的.ssh目录不存在，就创建一个；\n\n（4）``'cat >> .ssh/authorized_keys' < ~/.ssh/id_rsa.pub``的作用是，将本地的公钥文件``~/.ssh/id_rsa.pub``，重定向追加到远程文件authorized_keys的末尾。\n\n写入``authorized_keys``文件后，公钥登录的设置就完成了。\n\n\n\n## 拓展阅读：\n[数字签名是什么？](http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html)","slug":"SSH的原理和运用","published":1,"updated":"2017-11-01T13:51:26.035Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnom6wp3000cc0fyky6x8zzx","content":"<p><strong> SSH(安全外壳协议) </strong>为 Secure Shell 的缩写，由 IETF 的网络小组（Network Working Group）所制定；SSH 为建立在应用层和传输层基础上的安全协议。SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。<br>利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。SSH最初是UNIX系统上的一个程序，后来又迅速扩展到其他操作平台。SSH在正确使用时可弥补网络中的漏洞。<br>SSH客户端适用于多种平台。几乎所有UNIX平台—包括HP-UX、Linux、AIX、Solaris、Digital   UNIX、Irix，以及其他平台，都可运行SSH。<a href=\"https://0x9.me/xuSFD\" target=\"_blank\" rel=\"external\">百度百科:SSH</a><br><a id=\"more\"></a></p>\n<p>SSH是每一台Linux电脑的标准配置。<br>随着Linux设备从电脑逐渐扩展到手机、外设和家用电器，SSH的使用范围也越来越广。不仅程序员离不开它，很多普通用户也每天使用。<br>SSH具备多种功能，可以用于很多场合。有些事情，没有它就是办不成。本文是我的学习笔记，总结和解释了SSH的常见用法，希望对大家有用。</p>\n<h2 id=\"1-SSH是什么\"><a href=\"#1-SSH是什么\" class=\"headerlink\" title=\" 1.SSH是什么 \"></a><strong> 1.SSH是什么 </strong></h2><p>简单说，SSH是一种网络协议，用于计算机之间的加密登录。<br>如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露。  </p>\n<h2 id=\"二、最基本的用法\"><a href=\"#二、最基本的用法\" class=\"headerlink\" title=\"二、最基本的用法\"></a><strong>二、最基本的用法</strong></h2><p>SSH主要用于远程登录。假定你要以用户名user，登录远程主机host，只要一条简单命令就可以了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh user@host</div></pre></td></tr></table></figure></p>\n<p>如果本地用户名与远程用户名一致，登录时可以省略用户名。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh host</div></pre></td></tr></table></figure></p>\n<p>SSH的默认端口是22，也就是说，你的登录请求会送进远程主机的22端口。使用p参数，可以修改这个端口。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh -p 2222 user@host</div></pre></td></tr></table></figure></p>\n<p>上面这条命令表示，ssh直接连接远程主机的2222端口。</p>\n<h2 id=\"三、中间人攻击\"><a href=\"#三、中间人攻击\" class=\"headerlink\" title=\"三、中间人攻击\"></a><strong>三、中间人攻击</strong></h2><p>SSH之所以能够保证安全，原因在于它采用了公钥加密。<br>整个过程是这样的：</p>\n<p>（1）远程主机收到用户的登录请求，把自己的公钥发给用户。</p>\n<p>（2）用户使用这个公钥，将登录密码加密后，发送回来。</p>\n<p>（3）远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。</p>\n<p>这个过程本身是安全的，但是实施的时候存在一个风险：如果有人截获了登录请求，然后冒充远程主机，将伪造的公钥发给用户，那么用户很难辨别真伪。因为不像https协议，SSH协议的公钥是没有证书中心（CA）公证的，也就是说，都是自己签发的。<br>可以设想，如果攻击者插在用户与远程主机之间（比如在公共的wifi区域），用伪造的公钥，获取用户的登录密码。再用这个密码登录远程主机，那么SSH的安全机制就荡然无存了。这种风险就是著名的”中间人攻击”（Man-in-the-middle attack）。</p>\n<p>SSH协议是如何应对的呢？</p>\n<h2 id=\"四、口令登录\"><a href=\"#四、口令登录\" class=\"headerlink\" title=\"四、口令登录\"></a><strong>四、口令登录</strong></h2><p>如果你是第一次登录对方主机，系统会出现下面的提示：<br><code>$ ssh user@host\n　　The authenticity of host &#39;host (12.18.429.21)&#39; can&#39;t be established.\n　　RSA key fingerprint is 98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d.\n　　Are you sure you want to continue connecting (yes/no)?</code><br>  这段话的意思是，无法确认host主机的真实性，只知道它的公钥指纹，问你还想继续连接吗？<br>所谓”公钥指纹”，是指公钥长度较长（这里采用RSA算法，长达1024位），很难比对，所以对其进行MD5计算，将它变成一个128位的指纹。上例中是<code>98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d</code>，再进行比较，就容易多了。</p>\n<p>  很自然的一个问题就是，用户怎么知道远程主机的公钥指纹应该是多少？回答是没有好办法，远程主机必须在自己的网站上贴出公钥指纹，以便用户自行核对。</p>\n<p>假定经过风险衡量以后，用户决定接受这个远程主机的公钥。<br><code>Are you sure you want to continue connecting (yes/no)? yes</code></p>\n<p>系统会出现一句提示，表示host主机已经得到认可。<br><code>Warning: Permanently added &#39;host,12.18.429.21&#39; (RSA) to the list of known hosts.</code></p>\n<p>然后，会要求输入密码。<br><code>Password: (enter password)</code></p>\n<p>如果密码正确，就可以登录了。<br>当远程主机的公钥被接受以后，它就会被保存在文件<code>$HOME/.ssh/known_hosts</code>之中。下次再连接这台主机，系统就会认出它的公钥已经保存在本地了，从而跳过警告部分，直接提示输入密码。</p>\n<p>每个SSH用户都有自己的known_hosts文件，此外系统也有一个这样的文件，通常是<code>/etc/ssh/ssh_known_hosts</code>，保存一些对所有用户都可信赖的远程主机的公钥。</p>\n<h2 id=\"五、公钥登录\"><a href=\"#五、公钥登录\" class=\"headerlink\" title=\"五、公钥登录\"></a><strong>五、公钥登录</strong></h2><p>使用密码登录，每次都必须输入密码，非常麻烦。好在SSH还提供了公钥登录，可以省去输入密码的步骤。</p>\n<p>所谓”公钥登录”，原理很简单，就是用户将自己的公钥储存在远程主机上。登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录shell，不再要求密码。</p>\n<p>这种方法要求用户必须提供自己的公钥。如果没有现成的，可以直接用ssh-keygen生成一个：<br><figure class=\"highlight plain\"><figcaption><span>ssh-keygen```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">  运行上面的命令以后，系统会出现一系列提示，可以一路回车。其中有一个问题是，要不要对私钥设置口令（passphrase），如果担心私钥的安全，这里可以设置一个。</div><div class=\"line\"></div><div class=\"line\">运行结束以后，在`$HOME/.ssh/`目录下，会新生成两个文件：`id_rsa.pub`和`id_rsa`。</div><div class=\"line\">前者是你的公钥，后者是你的私钥。</div><div class=\"line\"></div><div class=\"line\">这时再输入下面的命令，将公钥传送到远程主机host上面：</div><div class=\"line\"></div><div class=\"line\">```$ ssh-copy-id user@host</div></pre></td></tr></table></figure></p>\n<p>好了，从此你再登录，就不需要输入密码了。<br>如果还是不行，就打开远程主机的<code>/etc/ssh/sshd_config</code>这个文件，检查下面几行前面”#”注释是否取掉。<br>``RSAAuthentication yes</p>\n<p>PubkeyAuthentication yes </p>\n<p>AuthorizedKeysFile .ssh/authorized_keys<br>``<br>然后，重启远程主机的ssh服务。</p>\n<p>// ubuntu系统　　<code>service ssh restart</code></p>\n<p>// debian系统　　<code>/etc/init.d/ssh restart</code></p>\n<h2 id=\"六、authorized-keys文件\"><a href=\"#六、authorized-keys文件\" class=\"headerlink\" title=\"六、authorized_keys文件\"></a><strong>六、authorized_keys文件</strong></h2><p>远程主机将用户的公钥，保存在登录后的用户主目录的<code>$HOME/.ssh/authorized_keys</code>文件中。<br>公钥就是一段字符串，只要把它追加在<code>authorized_keys</code>文件的末尾就行了。</p>\n<p>这里不使用上面的<code>ssh-copy-id</code>命令，改用下面的命令，解释公钥的保存过程：</p>\n<p><code>$ ssh user@host &#39;mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys&#39; &lt; ~/.ssh/id_rsa.pub</code></p>\n<p>这条命令由多个语句组成，依次分解开来看：</p>\n<p>（1）”<code>$ ssh user@host</code>“，表示登录远程主机；</p>\n<p>（2）单引号中的<code>mkdir .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys</code>，表示登录后在远程shell上执行的命令：</p>\n<p>（3）”<code>$ mkdir -p .ssh</code>“的作用是，如果用户主目录中的.ssh目录不存在，就创建一个；</p>\n<p>（4）<code>&#39;cat &gt;&gt; .ssh/authorized_keys&#39; &lt; ~/.ssh/id_rsa.pub</code>的作用是，将本地的公钥文件<code>~/.ssh/id_rsa.pub</code>，重定向追加到远程文件authorized_keys的末尾。</p>\n<p>写入<code>authorized_keys</code>文件后，公钥登录的设置就完成了。</p>\n<h2 id=\"拓展阅读：\"><a href=\"#拓展阅读：\" class=\"headerlink\" title=\"拓展阅读：\"></a>拓展阅读：</h2><p><a href=\"http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html\" target=\"_blank\" rel=\"external\">数字签名是什么？</a></p>\n","site":{"data":{}},"excerpt":"<p><strong> SSH(安全外壳协议) </strong>为 Secure Shell 的缩写，由 IETF 的网络小组（Network Working Group）所制定；SSH 为建立在应用层和传输层基础上的安全协议。SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。<br>利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。SSH最初是UNIX系统上的一个程序，后来又迅速扩展到其他操作平台。SSH在正确使用时可弥补网络中的漏洞。<br>SSH客户端适用于多种平台。几乎所有UNIX平台—包括HP-UX、Linux、AIX、Solaris、Digital   UNIX、Irix，以及其他平台，都可运行SSH。<a href=\"https://0x9.me/xuSFD\" target=\"_blank\" rel=\"external\">百度百科:SSH</a><br>","more":"</p>\n<p>SSH是每一台Linux电脑的标准配置。<br>随着Linux设备从电脑逐渐扩展到手机、外设和家用电器，SSH的使用范围也越来越广。不仅程序员离不开它，很多普通用户也每天使用。<br>SSH具备多种功能，可以用于很多场合。有些事情，没有它就是办不成。本文是我的学习笔记，总结和解释了SSH的常见用法，希望对大家有用。</p>\n<h2 id=\"1-SSH是什么\"><a href=\"#1-SSH是什么\" class=\"headerlink\" title=\" 1.SSH是什么 \"></a><strong> 1.SSH是什么 </strong></h2><p>简单说，SSH是一种网络协议，用于计算机之间的加密登录。<br>如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露。  </p>\n<h2 id=\"二、最基本的用法\"><a href=\"#二、最基本的用法\" class=\"headerlink\" title=\"二、最基本的用法\"></a><strong>二、最基本的用法</strong></h2><p>SSH主要用于远程登录。假定你要以用户名user，登录远程主机host，只要一条简单命令就可以了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh user@host</div></pre></td></tr></table></figure></p>\n<p>如果本地用户名与远程用户名一致，登录时可以省略用户名。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh host</div></pre></td></tr></table></figure></p>\n<p>SSH的默认端口是22，也就是说，你的登录请求会送进远程主机的22端口。使用p参数，可以修改这个端口。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh -p 2222 user@host</div></pre></td></tr></table></figure></p>\n<p>上面这条命令表示，ssh直接连接远程主机的2222端口。</p>\n<h2 id=\"三、中间人攻击\"><a href=\"#三、中间人攻击\" class=\"headerlink\" title=\"三、中间人攻击\"></a><strong>三、中间人攻击</strong></h2><p>SSH之所以能够保证安全，原因在于它采用了公钥加密。<br>整个过程是这样的：</p>\n<p>（1）远程主机收到用户的登录请求，把自己的公钥发给用户。</p>\n<p>（2）用户使用这个公钥，将登录密码加密后，发送回来。</p>\n<p>（3）远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。</p>\n<p>这个过程本身是安全的，但是实施的时候存在一个风险：如果有人截获了登录请求，然后冒充远程主机，将伪造的公钥发给用户，那么用户很难辨别真伪。因为不像https协议，SSH协议的公钥是没有证书中心（CA）公证的，也就是说，都是自己签发的。<br>可以设想，如果攻击者插在用户与远程主机之间（比如在公共的wifi区域），用伪造的公钥，获取用户的登录密码。再用这个密码登录远程主机，那么SSH的安全机制就荡然无存了。这种风险就是著名的”中间人攻击”（Man-in-the-middle attack）。</p>\n<p>SSH协议是如何应对的呢？</p>\n<h2 id=\"四、口令登录\"><a href=\"#四、口令登录\" class=\"headerlink\" title=\"四、口令登录\"></a><strong>四、口令登录</strong></h2><p>如果你是第一次登录对方主机，系统会出现下面的提示：<br><code>$ ssh user@host\n　　The authenticity of host &#39;host (12.18.429.21)&#39; can&#39;t be established.\n　　RSA key fingerprint is 98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d.\n　　Are you sure you want to continue connecting (yes/no)?</code><br>  这段话的意思是，无法确认host主机的真实性，只知道它的公钥指纹，问你还想继续连接吗？<br>所谓”公钥指纹”，是指公钥长度较长（这里采用RSA算法，长达1024位），很难比对，所以对其进行MD5计算，将它变成一个128位的指纹。上例中是<code>98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d</code>，再进行比较，就容易多了。</p>\n<p>  很自然的一个问题就是，用户怎么知道远程主机的公钥指纹应该是多少？回答是没有好办法，远程主机必须在自己的网站上贴出公钥指纹，以便用户自行核对。</p>\n<p>假定经过风险衡量以后，用户决定接受这个远程主机的公钥。<br><code>Are you sure you want to continue connecting (yes/no)? yes</code></p>\n<p>系统会出现一句提示，表示host主机已经得到认可。<br><code>Warning: Permanently added &#39;host,12.18.429.21&#39; (RSA) to the list of known hosts.</code></p>\n<p>然后，会要求输入密码。<br><code>Password: (enter password)</code></p>\n<p>如果密码正确，就可以登录了。<br>当远程主机的公钥被接受以后，它就会被保存在文件<code>$HOME/.ssh/known_hosts</code>之中。下次再连接这台主机，系统就会认出它的公钥已经保存在本地了，从而跳过警告部分，直接提示输入密码。</p>\n<p>每个SSH用户都有自己的known_hosts文件，此外系统也有一个这样的文件，通常是<code>/etc/ssh/ssh_known_hosts</code>，保存一些对所有用户都可信赖的远程主机的公钥。</p>\n<h2 id=\"五、公钥登录\"><a href=\"#五、公钥登录\" class=\"headerlink\" title=\"五、公钥登录\"></a><strong>五、公钥登录</strong></h2><p>使用密码登录，每次都必须输入密码，非常麻烦。好在SSH还提供了公钥登录，可以省去输入密码的步骤。</p>\n<p>所谓”公钥登录”，原理很简单，就是用户将自己的公钥储存在远程主机上。登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录shell，不再要求密码。</p>\n<p>这种方法要求用户必须提供自己的公钥。如果没有现成的，可以直接用ssh-keygen生成一个：<br><figure class=\"highlight plain\"><figcaption><span>ssh-keygen```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">  运行上面的命令以后，系统会出现一系列提示，可以一路回车。其中有一个问题是，要不要对私钥设置口令（passphrase），如果担心私钥的安全，这里可以设置一个。</div><div class=\"line\"></div><div class=\"line\">运行结束以后，在`$HOME/.ssh/`目录下，会新生成两个文件：`id_rsa.pub`和`id_rsa`。</div><div class=\"line\">前者是你的公钥，后者是你的私钥。</div><div class=\"line\"></div><div class=\"line\">这时再输入下面的命令，将公钥传送到远程主机host上面：</div><div class=\"line\"></div><div class=\"line\">```$ ssh-copy-id user@host</div></pre></td></tr></table></figure></p>\n<p>好了，从此你再登录，就不需要输入密码了。<br>如果还是不行，就打开远程主机的<code>/etc/ssh/sshd_config</code>这个文件，检查下面几行前面”#”注释是否取掉。<br>``RSAAuthentication yes</p>\n<p>PubkeyAuthentication yes </p>\n<p>AuthorizedKeysFile .ssh/authorized_keys<br>``<br>然后，重启远程主机的ssh服务。</p>\n<p>// ubuntu系统　　<code>service ssh restart</code></p>\n<p>// debian系统　　<code>/etc/init.d/ssh restart</code></p>\n<h2 id=\"六、authorized-keys文件\"><a href=\"#六、authorized-keys文件\" class=\"headerlink\" title=\"六、authorized_keys文件\"></a><strong>六、authorized_keys文件</strong></h2><p>远程主机将用户的公钥，保存在登录后的用户主目录的<code>$HOME/.ssh/authorized_keys</code>文件中。<br>公钥就是一段字符串，只要把它追加在<code>authorized_keys</code>文件的末尾就行了。</p>\n<p>这里不使用上面的<code>ssh-copy-id</code>命令，改用下面的命令，解释公钥的保存过程：</p>\n<p><code>$ ssh user@host &#39;mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys&#39; &lt; ~/.ssh/id_rsa.pub</code></p>\n<p>这条命令由多个语句组成，依次分解开来看：</p>\n<p>（1）”<code>$ ssh user@host</code>“，表示登录远程主机；</p>\n<p>（2）单引号中的<code>mkdir .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys</code>，表示登录后在远程shell上执行的命令：</p>\n<p>（3）”<code>$ mkdir -p .ssh</code>“的作用是，如果用户主目录中的.ssh目录不存在，就创建一个；</p>\n<p>（4）<code>&#39;cat &gt;&gt; .ssh/authorized_keys&#39; &lt; ~/.ssh/id_rsa.pub</code>的作用是，将本地的公钥文件<code>~/.ssh/id_rsa.pub</code>，重定向追加到远程文件authorized_keys的末尾。</p>\n<p>写入<code>authorized_keys</code>文件后，公钥登录的设置就完成了。</p>\n<h2 id=\"拓展阅读：\"><a href=\"#拓展阅读：\" class=\"headerlink\" title=\"拓展阅读：\"></a>拓展阅读：</h2><p><a href=\"http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html\" target=\"_blank\" rel=\"external\">数字签名是什么？</a></p>"},{"title":"WinSCP连接linux遇到的一个小问题","date":"2017-05-20T12:07:31.000Z","desc":"WinSCP连接linux遇到的一个小问题","keywords":"linux","_content":"第一次在win上使用WinSCP来链接linux，遇到的一个小问题：\n提示我：\n```\n服务器拒绝了sftp连接，但它监听ftp连接.想要用ftp协议来代替sftp\n```\n然后我将链接方式改成了ftp。又爆出另一个蛋疼的提示：\n\n```\n由于目标机器积极拒绝，无法连接```\n\n<!--more-->\n两个提示都百度了一下，果然有很多答案，说是要关防火墙啊，改连接方式啊等等。满世界的答案都成功的避开了我遇到的问题。\n    纠结了很久，我考虑到WinSCP连接linux的原理是什么呢？再仔细想想自己哪一步可能漏掉？？\n    突然想起，这是自己新装的一个虚拟机，还没配SSH，难道是这个原因？？\n果断的配上了SSH，发现果然OK了。果断的记录一下，如果也有新手跟我遇到同样的问题，就能有所帮助。\n关于SSH可以参考另一篇文章：[SSH原理和运用](http://www.jianshu.com/writer#/notebooks/4873723/notes/4574585)","source":"_posts/WinSCP连接linux遇到的一个小问题.md","raw":"---\ntitle: WinSCP连接linux遇到的一个小问题\ndate: 2017-05-20 20:07:31\ntags:\n  - 工具\n  - Linux\ndesc: WinSCP连接linux遇到的一个小问题\nkeywords: linux\ncategories:\n- tools\n\n---\n第一次在win上使用WinSCP来链接linux，遇到的一个小问题：\n提示我：\n```\n服务器拒绝了sftp连接，但它监听ftp连接.想要用ftp协议来代替sftp\n```\n然后我将链接方式改成了ftp。又爆出另一个蛋疼的提示：\n\n```\n由于目标机器积极拒绝，无法连接```\n\n<!--more-->\n两个提示都百度了一下，果然有很多答案，说是要关防火墙啊，改连接方式啊等等。满世界的答案都成功的避开了我遇到的问题。\n    纠结了很久，我考虑到WinSCP连接linux的原理是什么呢？再仔细想想自己哪一步可能漏掉？？\n    突然想起，这是自己新装的一个虚拟机，还没配SSH，难道是这个原因？？\n果断的配上了SSH，发现果然OK了。果断的记录一下，如果也有新手跟我遇到同样的问题，就能有所帮助。\n关于SSH可以参考另一篇文章：[SSH原理和运用](http://www.jianshu.com/writer#/notebooks/4873723/notes/4574585)","slug":"WinSCP连接linux遇到的一个小问题","published":1,"updated":"2017-06-25T10:27:58.129Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnom6wpb000fc0fyfqkd5qm0","content":"<p>第一次在win上使用WinSCP来链接linux，遇到的一个小问题：<br>提示我：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">服务器拒绝了sftp连接，但它监听ftp连接.想要用ftp协议来代替sftp</div></pre></td></tr></table></figure></p>\n<p>然后我将链接方式改成了ftp。又爆出另一个蛋疼的提示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">由于目标机器积极拒绝，无法连接</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>两个提示都百度了一下，果然有很多答案，说是要关防火墙啊，改连接方式啊等等。满世界的答案都成功的避开了我遇到的问题。<br>    纠结了很久，我考虑到WinSCP连接linux的原理是什么呢？再仔细想想自己哪一步可能漏掉？？<br>    突然想起，这是自己新装的一个虚拟机，还没配SSH，难道是这个原因？？<br>果断的配上了SSH，发现果然OK了。果断的记录一下，如果也有新手跟我遇到同样的问题，就能有所帮助。<br>关于SSH可以参考另一篇文章：<a href=\"http://www.jianshu.com/writer#/notebooks/4873723/notes/4574585\" target=\"_blank\" rel=\"external\">SSH原理和运用</a></p>\n","site":{"data":{}},"excerpt":"<p>第一次在win上使用WinSCP来链接linux，遇到的一个小问题：<br>提示我：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">服务器拒绝了sftp连接，但它监听ftp连接.想要用ftp协议来代替sftp</div></pre></td></tr></table></figure></p>\n<p>然后我将链接方式改成了ftp。又爆出另一个蛋疼的提示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">由于目标机器积极拒绝，无法连接</div></pre></td></tr></table></figure>","more":"<p>两个提示都百度了一下，果然有很多答案，说是要关防火墙啊，改连接方式啊等等。满世界的答案都成功的避开了我遇到的问题。<br>    纠结了很久，我考虑到WinSCP连接linux的原理是什么呢？再仔细想想自己哪一步可能漏掉？？<br>    突然想起，这是自己新装的一个虚拟机，还没配SSH，难道是这个原因？？<br>果断的配上了SSH，发现果然OK了。果断的记录一下，如果也有新手跟我遇到同样的问题，就能有所帮助。<br>关于SSH可以参考另一篇文章：<a href=\"http://www.jianshu.com/writer#/notebooks/4873723/notes/4574585\" target=\"_blank\" rel=\"external\">SSH原理和运用</a></p>"},{"title":"Elasticsearch非权威指南目录","date":"2017-05-20T12:07:31.000Z","desc":"Elasticsearch非权威指南，目录","keywords":"elasticsearch 学习笔记 大数据 非权威指南","_content":"#[写在开始的话](http://www.jianshu.com/p/844892bd0dff)\n\n#[一、elasticsearch简介](http://www.jianshu.com/p/e8ee319a238d)\n##[1、ES一些名词的解释](http://www.jianshu.com/p/4c56a271c5b8)\n\n#二、elasticsearch及各种组件的安装\n\n#三、es索引存储\n\n#四、搜索查询\n\n#五、集群管理\n\n#六、其他","source":"_posts/elasticsearch学习笔记目录.md","raw":"---\ntitle: Elasticsearch非权威指南目录\ndate: 2017-05-20 20:07:31\ntags:\n  - Elasticsearch\ndesc: Elasticsearch非权威指南，目录\nkeywords: elasticsearch 学习笔记 大数据 非权威指南 \ncategories:\n- Elasticsearch非权威指南\n\n---\n#[写在开始的话](http://www.jianshu.com/p/844892bd0dff)\n\n#[一、elasticsearch简介](http://www.jianshu.com/p/e8ee319a238d)\n##[1、ES一些名词的解释](http://www.jianshu.com/p/4c56a271c5b8)\n\n#二、elasticsearch及各种组件的安装\n\n#三、es索引存储\n\n#四、搜索查询\n\n#五、集群管理\n\n#六、其他","slug":"elasticsearch学习笔记目录","published":1,"updated":"2017-06-25T10:20:55.570Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnom6wpd000hc0fy3seonzau","content":"<p>#<a href=\"http://www.jianshu.com/p/844892bd0dff\" target=\"_blank\" rel=\"external\">写在开始的话</a></p>\n<p>#<a href=\"http://www.jianshu.com/p/e8ee319a238d\" target=\"_blank\" rel=\"external\">一、elasticsearch简介</a></p>\n<p>##<a href=\"http://www.jianshu.com/p/4c56a271c5b8\" target=\"_blank\" rel=\"external\">1、ES一些名词的解释</a></p>\n<p>#二、elasticsearch及各种组件的安装</p>\n<p>#三、es索引存储</p>\n<p>#四、搜索查询</p>\n<p>#五、集群管理</p>\n<p>#六、其他</p>\n","site":{"data":{}},"excerpt":"","more":"<p>#<a href=\"http://www.jianshu.com/p/844892bd0dff\" target=\"_blank\" rel=\"external\">写在开始的话</a></p>\n<p>#<a href=\"http://www.jianshu.com/p/e8ee319a238d\" target=\"_blank\" rel=\"external\">一、elasticsearch简介</a></p>\n<p>##<a href=\"http://www.jianshu.com/p/4c56a271c5b8\" target=\"_blank\" rel=\"external\">1、ES一些名词的解释</a></p>\n<p>#二、elasticsearch及各种组件的安装</p>\n<p>#三、es索引存储</p>\n<p>#四、搜索查询</p>\n<p>#五、集群管理</p>\n<p>#六、其他</p>\n"},{"title":"Elasticsearch简介","date":"2017-05-20T12:07:31.000Z","desc":"Elasticsearch非权威指南-简介","keywords":"elasticsearch 学习笔记 大数据 非权威指南","_content":"\n## 一、elasticsearch是什么\n> ElasticSearch是一个基于[Lucene](http://baike.baidu.com/item/Lucene?sefr=enterbtn)的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于[云计算](http://baike.baidu.com/view/1316082.htm)中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。\n(百度百科)\n<!--more-->\n理解这段话简单理解就是：ES是一个搜索引擎，是基于Lucene的。它是一个提供了基于[RESTful](http://baike.baidu.com/item/RESTful?sefr=enterbtn) 的web接口，能够达到实时，稳定，可靠，快速的搜索引擎。\n\nElasticsearch也使用Java开发并使用Lucene作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的RESTful API来隐藏Lucene的复杂性，从而让全文搜索变得简单。\n\nES是开源的，它的官网是：[www.elastic.co](www.elastic.co)，\n\ngithub项目地址是：[www.github.com/elastic/elasticsearch](https://github.com/elastic/elasticsearch)\n\n中文论坛：[elasticsearc.cn](elasticsearch.cn)\n\n## 二、elasticsearch能做什么\n\nElasticsearch不仅仅是Lucene和全文搜索，其他特点还包括：\n* 分布式的实时文件存储，每个字段都被索引并可被搜索\n* 分布式的实时分析搜索引擎\n* 可以扩展到上百台服务器，处理PB级结构化或非结构化数据\n\n而且，所有的这些功能被集成到一个服务里面，你的应用可以通过简单的RESTful API、各种语言的客户端甚至命令行与之交互。\n总结一句话：**ES是一个功能强大，使用简单的分布式的全文搜索引擎。**\n\n## 三、elasticsearch文档的概念\n在Elasticsearch中，数据是以文档(document)形式存在的，归属于一种类型(type),而这些类型存在于索引(index)。和关系型数据库中的概念对比：\n\n| SQL | database | table | row | column|\n| :------------------ | :------------- | :------ | :----- | :--------- |\n|** elasticsearch** | index | type | document | field|\n\n其实这样的对比并不是完全的准确的，但是有助于我们理解elasticsearch的数据存储格式。\n\n## 四、个人对ES的一些理解\n\nelasticsearch主要优势是：**速度快**，使用方便，分布式的，功能强大。\nES官方的想做的是ELK结合起来做日志分析等工作。估计这也是它最多的应用场景。\nES使用非常方便，官方文档也比较全，社区也很活跃。估计以后的发展会越来越好，应用场景会越来越多。\n\n关于更详细的ES简介可以查看网上有朋友翻译的[《Elasticsearch权威指南》](https://es.xiaoleilu.com/)\n也可以看看这个朋友写的ES基本概念：[Elasticsearch学习，请先看这一篇！](http://blog.csdn.net/laoyang360/article/details/52244917)\n\n*[《elasticsearch非权威指南》目录](http://www.jianshu.com/p/ede55b4110b1)*\n*本笔记欢迎转载，欢迎分享，转载分享不用通知作者。不过，如果可以的话希望能注明出处，看完文章还能点个赞。*","source":"_posts/elasticsearch简介.md","raw":"---\ntitle: Elasticsearch简介\ndate: 2017-05-20 20:07:31\ntags:\n  - Elasticsearch\ndesc: Elasticsearch非权威指南-简介\nkeywords: elasticsearch 学习笔记 大数据 非权威指南 \ncategories:\n- Elasticsearch非权威指南\n\n---\n\n## 一、elasticsearch是什么\n> ElasticSearch是一个基于[Lucene](http://baike.baidu.com/item/Lucene?sefr=enterbtn)的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于[云计算](http://baike.baidu.com/view/1316082.htm)中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。\n(百度百科)\n<!--more-->\n理解这段话简单理解就是：ES是一个搜索引擎，是基于Lucene的。它是一个提供了基于[RESTful](http://baike.baidu.com/item/RESTful?sefr=enterbtn) 的web接口，能够达到实时，稳定，可靠，快速的搜索引擎。\n\nElasticsearch也使用Java开发并使用Lucene作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的RESTful API来隐藏Lucene的复杂性，从而让全文搜索变得简单。\n\nES是开源的，它的官网是：[www.elastic.co](www.elastic.co)，\n\ngithub项目地址是：[www.github.com/elastic/elasticsearch](https://github.com/elastic/elasticsearch)\n\n中文论坛：[elasticsearc.cn](elasticsearch.cn)\n\n## 二、elasticsearch能做什么\n\nElasticsearch不仅仅是Lucene和全文搜索，其他特点还包括：\n* 分布式的实时文件存储，每个字段都被索引并可被搜索\n* 分布式的实时分析搜索引擎\n* 可以扩展到上百台服务器，处理PB级结构化或非结构化数据\n\n而且，所有的这些功能被集成到一个服务里面，你的应用可以通过简单的RESTful API、各种语言的客户端甚至命令行与之交互。\n总结一句话：**ES是一个功能强大，使用简单的分布式的全文搜索引擎。**\n\n## 三、elasticsearch文档的概念\n在Elasticsearch中，数据是以文档(document)形式存在的，归属于一种类型(type),而这些类型存在于索引(index)。和关系型数据库中的概念对比：\n\n| SQL | database | table | row | column|\n| :------------------ | :------------- | :------ | :----- | :--------- |\n|** elasticsearch** | index | type | document | field|\n\n其实这样的对比并不是完全的准确的，但是有助于我们理解elasticsearch的数据存储格式。\n\n## 四、个人对ES的一些理解\n\nelasticsearch主要优势是：**速度快**，使用方便，分布式的，功能强大。\nES官方的想做的是ELK结合起来做日志分析等工作。估计这也是它最多的应用场景。\nES使用非常方便，官方文档也比较全，社区也很活跃。估计以后的发展会越来越好，应用场景会越来越多。\n\n关于更详细的ES简介可以查看网上有朋友翻译的[《Elasticsearch权威指南》](https://es.xiaoleilu.com/)\n也可以看看这个朋友写的ES基本概念：[Elasticsearch学习，请先看这一篇！](http://blog.csdn.net/laoyang360/article/details/52244917)\n\n*[《elasticsearch非权威指南》目录](http://www.jianshu.com/p/ede55b4110b1)*\n*本笔记欢迎转载，欢迎分享，转载分享不用通知作者。不过，如果可以的话希望能注明出处，看完文章还能点个赞。*","slug":"elasticsearch简介","published":1,"updated":"2017-06-25T10:20:43.889Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnom6wpn000lc0fyivzw9ayw","content":"<h2 id=\"一、elasticsearch是什么\"><a href=\"#一、elasticsearch是什么\" class=\"headerlink\" title=\"一、elasticsearch是什么\"></a>一、elasticsearch是什么</h2><blockquote>\n<p>ElasticSearch是一个基于<a href=\"http://baike.baidu.com/item/Lucene?sefr=enterbtn\" target=\"_blank\" rel=\"external\">Lucene</a>的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于<a href=\"http://baike.baidu.com/view/1316082.htm\" target=\"_blank\" rel=\"external\">云计算</a>中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。<br>(百度百科)<br><a id=\"more\"></a><br>理解这段话简单理解就是：ES是一个搜索引擎，是基于Lucene的。它是一个提供了基于<a href=\"http://baike.baidu.com/item/RESTful?sefr=enterbtn\" target=\"_blank\" rel=\"external\">RESTful</a> 的web接口，能够达到实时，稳定，可靠，快速的搜索引擎。</p>\n</blockquote>\n<p>Elasticsearch也使用Java开发并使用Lucene作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的RESTful API来隐藏Lucene的复杂性，从而让全文搜索变得简单。</p>\n<p>ES是开源的，它的官网是：<a href=\"www.elastic.co\">www.elastic.co</a>，</p>\n<p>github项目地址是：<a href=\"https://github.com/elastic/elasticsearch\" target=\"_blank\" rel=\"external\">www.github.com/elastic/elasticsearch</a></p>\n<p>中文论坛：<a href=\"elasticsearch.cn\">elasticsearc.cn</a></p>\n<h2 id=\"二、elasticsearch能做什么\"><a href=\"#二、elasticsearch能做什么\" class=\"headerlink\" title=\"二、elasticsearch能做什么\"></a>二、elasticsearch能做什么</h2><p>Elasticsearch不仅仅是Lucene和全文搜索，其他特点还包括：</p>\n<ul>\n<li>分布式的实时文件存储，每个字段都被索引并可被搜索</li>\n<li>分布式的实时分析搜索引擎</li>\n<li>可以扩展到上百台服务器，处理PB级结构化或非结构化数据</li>\n</ul>\n<p>而且，所有的这些功能被集成到一个服务里面，你的应用可以通过简单的RESTful API、各种语言的客户端甚至命令行与之交互。<br>总结一句话：<strong>ES是一个功能强大，使用简单的分布式的全文搜索引擎。</strong></p>\n<h2 id=\"三、elasticsearch文档的概念\"><a href=\"#三、elasticsearch文档的概念\" class=\"headerlink\" title=\"三、elasticsearch文档的概念\"></a>三、elasticsearch文档的概念</h2><p>在Elasticsearch中，数据是以文档(document)形式存在的，归属于一种类型(type),而这些类型存在于索引(index)。和关系型数据库中的概念对比：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">SQL</th>\n<th style=\"text-align:left\">database</th>\n<th style=\"text-align:left\">table</th>\n<th style=\"text-align:left\">row</th>\n<th style=\"text-align:left\">column</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong> elasticsearch</strong></td>\n<td style=\"text-align:left\">index</td>\n<td style=\"text-align:left\">type</td>\n<td style=\"text-align:left\">document</td>\n<td style=\"text-align:left\">field</td>\n</tr>\n</tbody>\n</table>\n<p>其实这样的对比并不是完全的准确的，但是有助于我们理解elasticsearch的数据存储格式。</p>\n<h2 id=\"四、个人对ES的一些理解\"><a href=\"#四、个人对ES的一些理解\" class=\"headerlink\" title=\"四、个人对ES的一些理解\"></a>四、个人对ES的一些理解</h2><p>elasticsearch主要优势是：<strong>速度快</strong>，使用方便，分布式的，功能强大。<br>ES官方的想做的是ELK结合起来做日志分析等工作。估计这也是它最多的应用场景。<br>ES使用非常方便，官方文档也比较全，社区也很活跃。估计以后的发展会越来越好，应用场景会越来越多。</p>\n<p>关于更详细的ES简介可以查看网上有朋友翻译的<a href=\"https://es.xiaoleilu.com/\" target=\"_blank\" rel=\"external\">《Elasticsearch权威指南》</a><br>也可以看看这个朋友写的ES基本概念：<a href=\"http://blog.csdn.net/laoyang360/article/details/52244917\" target=\"_blank\" rel=\"external\">Elasticsearch学习，请先看这一篇！</a></p>\n<p><em><a href=\"http://www.jianshu.com/p/ede55b4110b1\" target=\"_blank\" rel=\"external\">《elasticsearch非权威指南》目录</a></em><br><em>本笔记欢迎转载，欢迎分享，转载分享不用通知作者。不过，如果可以的话希望能注明出处，看完文章还能点个赞。</em></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"一、elasticsearch是什么\"><a href=\"#一、elasticsearch是什么\" class=\"headerlink\" title=\"一、elasticsearch是什么\"></a>一、elasticsearch是什么</h2><blockquote>\n<p>ElasticSearch是一个基于<a href=\"http://baike.baidu.com/item/Lucene?sefr=enterbtn\" target=\"_blank\" rel=\"external\">Lucene</a>的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于<a href=\"http://baike.baidu.com/view/1316082.htm\" target=\"_blank\" rel=\"external\">云计算</a>中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。<br>(百度百科)<br>","more":"<br>理解这段话简单理解就是：ES是一个搜索引擎，是基于Lucene的。它是一个提供了基于<a href=\"http://baike.baidu.com/item/RESTful?sefr=enterbtn\" target=\"_blank\" rel=\"external\">RESTful</a> 的web接口，能够达到实时，稳定，可靠，快速的搜索引擎。</p>\n</blockquote>\n<p>Elasticsearch也使用Java开发并使用Lucene作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的RESTful API来隐藏Lucene的复杂性，从而让全文搜索变得简单。</p>\n<p>ES是开源的，它的官网是：<a href=\"www.elastic.co\">www.elastic.co</a>，</p>\n<p>github项目地址是：<a href=\"https://github.com/elastic/elasticsearch\" target=\"_blank\" rel=\"external\">www.github.com/elastic/elasticsearch</a></p>\n<p>中文论坛：<a href=\"elasticsearch.cn\">elasticsearc.cn</a></p>\n<h2 id=\"二、elasticsearch能做什么\"><a href=\"#二、elasticsearch能做什么\" class=\"headerlink\" title=\"二、elasticsearch能做什么\"></a>二、elasticsearch能做什么</h2><p>Elasticsearch不仅仅是Lucene和全文搜索，其他特点还包括：</p>\n<ul>\n<li>分布式的实时文件存储，每个字段都被索引并可被搜索</li>\n<li>分布式的实时分析搜索引擎</li>\n<li>可以扩展到上百台服务器，处理PB级结构化或非结构化数据</li>\n</ul>\n<p>而且，所有的这些功能被集成到一个服务里面，你的应用可以通过简单的RESTful API、各种语言的客户端甚至命令行与之交互。<br>总结一句话：<strong>ES是一个功能强大，使用简单的分布式的全文搜索引擎。</strong></p>\n<h2 id=\"三、elasticsearch文档的概念\"><a href=\"#三、elasticsearch文档的概念\" class=\"headerlink\" title=\"三、elasticsearch文档的概念\"></a>三、elasticsearch文档的概念</h2><p>在Elasticsearch中，数据是以文档(document)形式存在的，归属于一种类型(type),而这些类型存在于索引(index)。和关系型数据库中的概念对比：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">SQL</th>\n<th style=\"text-align:left\">database</th>\n<th style=\"text-align:left\">table</th>\n<th style=\"text-align:left\">row</th>\n<th style=\"text-align:left\">column</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong> elasticsearch</strong></td>\n<td style=\"text-align:left\">index</td>\n<td style=\"text-align:left\">type</td>\n<td style=\"text-align:left\">document</td>\n<td style=\"text-align:left\">field</td>\n</tr>\n</tbody>\n</table>\n<p>其实这样的对比并不是完全的准确的，但是有助于我们理解elasticsearch的数据存储格式。</p>\n<h2 id=\"四、个人对ES的一些理解\"><a href=\"#四、个人对ES的一些理解\" class=\"headerlink\" title=\"四、个人对ES的一些理解\"></a>四、个人对ES的一些理解</h2><p>elasticsearch主要优势是：<strong>速度快</strong>，使用方便，分布式的，功能强大。<br>ES官方的想做的是ELK结合起来做日志分析等工作。估计这也是它最多的应用场景。<br>ES使用非常方便，官方文档也比较全，社区也很活跃。估计以后的发展会越来越好，应用场景会越来越多。</p>\n<p>关于更详细的ES简介可以查看网上有朋友翻译的<a href=\"https://es.xiaoleilu.com/\" target=\"_blank\" rel=\"external\">《Elasticsearch权威指南》</a><br>也可以看看这个朋友写的ES基本概念：<a href=\"http://blog.csdn.net/laoyang360/article/details/52244917\" target=\"_blank\" rel=\"external\">Elasticsearch学习，请先看这一篇！</a></p>\n<p><em><a href=\"http://www.jianshu.com/p/ede55b4110b1\" target=\"_blank\" rel=\"external\">《elasticsearch非权威指南》目录</a></em><br><em>本笔记欢迎转载，欢迎分享，转载分享不用通知作者。不过，如果可以的话希望能注明出处，看完文章还能点个赞。</em></p>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-05-19T13:42:11.982Z","updated":"2017-05-31T13:50:23.649Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnom6wq4000nc0fy1h0hgaxb","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"},{"title":"mysql 数据库导入/导出(总结备忘)","date":"2017-05-20T12:07:31.000Z","desc":"mysql 数据库导入/导出(总结备忘)","keywords":"MySQL 数据库 数据库优化","_content":"\n在linux下直接用命令行操作就可以 在windows下 一般情况下有两种方法一个也是用命令行 另一个是用phpmyadmin\n \n## 1.phpmyadmin\n先来说说phpmyadmin 这个工具导出和导入很简单 而且导入时无需建库 直接还原成原来的数据库   用** source ** \n 也可以还原 但他导入文件时有大小限制不能超过20M\n<!--more-->\n再来说说 ** mysqldump **和 ** source **  用命令操作很快 但是想把导出的文件再导入时必须先建立一个数据库(这个库可以随便起名) 然后进入数据库后才能导入用phpmyadmin导入\n** mysqldump **导出的文件也得需要这步\n \n## 2.其他命令方式\n\n下面是从前辈那copy来的命令具体使用方法\n1.导出整个数据库\n``` \nmysqldump -u 用户名 -p 数据库名 > 导出的文件名\n\n```\n``` \nmysqldump -uroot -proot dingding > 1.sql\n```\n2.导出一个表\n``` \nmysqldump -u 用户名 -p 数据库名 表名> 导出的文件名\n```\n``` \nmysqldump -uroot -proot dingding >F:/dingding/wcnc.sql\n```\n3.导出一个数据库结构\n``` \nmysqldump -u wcnc -p -d --add-drop-table smgp_apps_wcnc >d:wcnc_db.sql\n```\n-d 没有数据 --add-drop-table 在每个create语句之前增加一个drop table\n　　\n备忘:\n> mysqldump在linux下可直接使用 在windows下有时需要进入mysql/bin中使用 因为有时用的是类似appserv的套装软件 这样的话命令就不能直接使用 因为这些命令没在环境变量的目录里 而且用mysqldump导出的备份 必须先建立数据库才能导入\n\n\n 4.导入数据库\n　　常用`` source ``命令\n　　进入mysql数据库控制台，\n　　如`` mysql -u root -p ``\n　　mysql>use 数据库\n　　然后使用source命令，后面参数为脚本文件(如这里用到的.sql)\n　　`` mysql>source d:wcnc_db.sql``\n\n存疑: phpmyadmin导入有大小限制 不知道source导入时有没限制 而且导出时是不可以限制文件大小 并且分数个文件导出","source":"_posts/mysql 数据库导入、导出(总结备忘).md","raw":"---\ntitle: mysql 数据库导入/导出(总结备忘)\ndate: 2017-05-20 20:07:31\ntags:\n  - Mysql\n  - 数据库\ndesc: mysql 数据库导入/导出(总结备忘)\nkeywords: MySQL 数据库 数据库优化\ncategories:\n- 数据库\n\n---\n\n在linux下直接用命令行操作就可以 在windows下 一般情况下有两种方法一个也是用命令行 另一个是用phpmyadmin\n \n## 1.phpmyadmin\n先来说说phpmyadmin 这个工具导出和导入很简单 而且导入时无需建库 直接还原成原来的数据库   用** source ** \n 也可以还原 但他导入文件时有大小限制不能超过20M\n<!--more-->\n再来说说 ** mysqldump **和 ** source **  用命令操作很快 但是想把导出的文件再导入时必须先建立一个数据库(这个库可以随便起名) 然后进入数据库后才能导入用phpmyadmin导入\n** mysqldump **导出的文件也得需要这步\n \n## 2.其他命令方式\n\n下面是从前辈那copy来的命令具体使用方法\n1.导出整个数据库\n``` \nmysqldump -u 用户名 -p 数据库名 > 导出的文件名\n\n```\n``` \nmysqldump -uroot -proot dingding > 1.sql\n```\n2.导出一个表\n``` \nmysqldump -u 用户名 -p 数据库名 表名> 导出的文件名\n```\n``` \nmysqldump -uroot -proot dingding >F:/dingding/wcnc.sql\n```\n3.导出一个数据库结构\n``` \nmysqldump -u wcnc -p -d --add-drop-table smgp_apps_wcnc >d:wcnc_db.sql\n```\n-d 没有数据 --add-drop-table 在每个create语句之前增加一个drop table\n　　\n备忘:\n> mysqldump在linux下可直接使用 在windows下有时需要进入mysql/bin中使用 因为有时用的是类似appserv的套装软件 这样的话命令就不能直接使用 因为这些命令没在环境变量的目录里 而且用mysqldump导出的备份 必须先建立数据库才能导入\n\n\n 4.导入数据库\n　　常用`` source ``命令\n　　进入mysql数据库控制台，\n　　如`` mysql -u root -p ``\n　　mysql>use 数据库\n　　然后使用source命令，后面参数为脚本文件(如这里用到的.sql)\n　　`` mysql>source d:wcnc_db.sql``\n\n存疑: phpmyadmin导入有大小限制 不知道source导入时有没限制 而且导出时是不可以限制文件大小 并且分数个文件导出","slug":"mysql 数据库导入、导出(总结备忘)","published":1,"updated":"2017-09-14T13:54:56.305Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnom6wqe000sc0fy5pc5okcl","content":"<p>在linux下直接用命令行操作就可以 在windows下 一般情况下有两种方法一个也是用命令行 另一个是用phpmyadmin</p>\n<h2 id=\"1-phpmyadmin\"><a href=\"#1-phpmyadmin\" class=\"headerlink\" title=\"1.phpmyadmin\"></a>1.phpmyadmin</h2><p>先来说说phpmyadmin 这个工具导出和导入很简单 而且导入时无需建库 直接还原成原来的数据库   用<strong> source </strong><br> 也可以还原 但他导入文件时有大小限制不能超过20M<br><a id=\"more\"></a><br>再来说说 <strong> mysqldump </strong>和 <strong> source </strong>  用命令操作很快 但是想把导出的文件再导入时必须先建立一个数据库(这个库可以随便起名) 然后进入数据库后才能导入用phpmyadmin导入<br><strong> mysqldump </strong>导出的文件也得需要这步</p>\n<h2 id=\"2-其他命令方式\"><a href=\"#2-其他命令方式\" class=\"headerlink\" title=\"2.其他命令方式\"></a>2.其他命令方式</h2><p>下面是从前辈那copy来的命令具体使用方法<br>1.导出整个数据库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysqldump -u 用户名 -p 数据库名 &gt; 导出的文件名</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysqldump -uroot -proot dingding &gt; 1.sql</div></pre></td></tr></table></figure>\n<p>2.导出一个表<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysqldump -u 用户名 -p 数据库名 表名&gt; 导出的文件名</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysqldump -uroot -proot dingding &gt;F:/dingding/wcnc.sql</div></pre></td></tr></table></figure>\n<p>3.导出一个数据库结构<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysqldump -u wcnc -p -d --add-drop-table smgp_apps_wcnc &gt;d:wcnc_db.sql</div></pre></td></tr></table></figure></p>\n<p>-d 没有数据 –add-drop-table 在每个create语句之前增加一个drop table<br>　　<br>备忘:</p>\n<blockquote>\n<p>mysqldump在linux下可直接使用 在windows下有时需要进入mysql/bin中使用 因为有时用的是类似appserv的套装软件 这样的话命令就不能直接使用 因为这些命令没在环境变量的目录里 而且用mysqldump导出的备份 必须先建立数据库才能导入</p>\n</blockquote>\n<p> 4.导入数据库<br>　　常用<code>source</code>命令<br>　　进入mysql数据库控制台，<br>　　如<code>mysql -u root -p</code><br>　　mysql&gt;use 数据库<br>　　然后使用source命令，后面参数为脚本文件(如这里用到的.sql)<br>　　<code>mysql&gt;source d:wcnc_db.sql</code></p>\n<p>存疑: phpmyadmin导入有大小限制 不知道source导入时有没限制 而且导出时是不可以限制文件大小 并且分数个文件导出</p>\n","site":{"data":{}},"excerpt":"<p>在linux下直接用命令行操作就可以 在windows下 一般情况下有两种方法一个也是用命令行 另一个是用phpmyadmin</p>\n<h2 id=\"1-phpmyadmin\"><a href=\"#1-phpmyadmin\" class=\"headerlink\" title=\"1.phpmyadmin\"></a>1.phpmyadmin</h2><p>先来说说phpmyadmin 这个工具导出和导入很简单 而且导入时无需建库 直接还原成原来的数据库   用<strong> source </strong><br> 也可以还原 但他导入文件时有大小限制不能超过20M<br>","more":"<br>再来说说 <strong> mysqldump </strong>和 <strong> source </strong>  用命令操作很快 但是想把导出的文件再导入时必须先建立一个数据库(这个库可以随便起名) 然后进入数据库后才能导入用phpmyadmin导入<br><strong> mysqldump </strong>导出的文件也得需要这步</p>\n<h2 id=\"2-其他命令方式\"><a href=\"#2-其他命令方式\" class=\"headerlink\" title=\"2.其他命令方式\"></a>2.其他命令方式</h2><p>下面是从前辈那copy来的命令具体使用方法<br>1.导出整个数据库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysqldump -u 用户名 -p 数据库名 &gt; 导出的文件名</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysqldump -uroot -proot dingding &gt; 1.sql</div></pre></td></tr></table></figure>\n<p>2.导出一个表<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysqldump -u 用户名 -p 数据库名 表名&gt; 导出的文件名</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysqldump -uroot -proot dingding &gt;F:/dingding/wcnc.sql</div></pre></td></tr></table></figure>\n<p>3.导出一个数据库结构<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysqldump -u wcnc -p -d --add-drop-table smgp_apps_wcnc &gt;d:wcnc_db.sql</div></pre></td></tr></table></figure></p>\n<p>-d 没有数据 –add-drop-table 在每个create语句之前增加一个drop table<br>　　<br>备忘:</p>\n<blockquote>\n<p>mysqldump在linux下可直接使用 在windows下有时需要进入mysql/bin中使用 因为有时用的是类似appserv的套装软件 这样的话命令就不能直接使用 因为这些命令没在环境变量的目录里 而且用mysqldump导出的备份 必须先建立数据库才能导入</p>\n</blockquote>\n<p> 4.导入数据库<br>　　常用<code>source</code>命令<br>　　进入mysql数据库控制台，<br>　　如<code>mysql -u root -p</code><br>　　mysql&gt;use 数据库<br>　　然后使用source命令，后面参数为脚本文件(如这里用到的.sql)<br>　　<code>mysql&gt;source d:wcnc_db.sql</code></p>\n<p>存疑: phpmyadmin导入有大小限制 不知道source导入时有没限制 而且导出时是不可以限制文件大小 并且分数个文件导出</p>"},{"title":"Redis非权威指南(基本知识)","date":"2017-08-20T12:07:31.000Z","desc":"Redis非权威指南(基本知识)","keywords":"redis 缓存 基础 教程 php","_content":"\n## Redis 简介\n<center>![redis_logo.png](https://i.loli.net/2017/09/11/59b6a42bf239f.png)</center>  \nRedis是完全开源免费的一个高性能的key-value存储系统。\n它可以用作数据库、缓存和消息中间件。  \n> \n* Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。\n* Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。\n* Redis支持数据的备份，即master-slave模式的数据备份。\n\n<!--more-->\n## Redis的特点\n\nRedis将其数据库完全保存在内存中，因此性能极高,能读的速度是110000次/s,写的速度是81000次/s 。  \nRedis支持开发人员常用的大多数数据类型，例如列表，集合，排序集和散列等等。这使得Redis很容易被用来解决各种问题，因为我们知道哪些问题可以更好使用地哪些数据类型来处理解决。   \nRedis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行。  \nRedis还支持 publish/subscribe, 通知, key 过期等等特性。\n\n## Redis在项目中的作用\n\n<b>Redis在项目中使用一般作为主要缓存服务。</b>\n\n### 1、会话缓存（Session Cache）\n\n最常用的一种使用Redis的情景是会话缓存（session cache）。用Redis缓存会话比其他存储（如Memcached）的优势在于：Redis提供持久化。\n\n随着 Redis 这些年的改进，很容易找到怎么恰当的使用Redis来缓存会话的文档。甚至广为人知的商业平台Magento也提供Redis的插件。\n\n### 2、全页缓存（FPC）\n\n除基本的会话token之外，Redis还提供很简便的FPC平台。回到一致性问题，即使重启了Redis实例，因为有磁盘的持久化，用户也不会看到页面加载速度的下降，这是一个极大改进，类似PHP本地FPC。\n\n再次以Magento为例，Magento提供一个插件来使用Redis作为全页缓存后端。\n\n此外，对WordPress的用户来说，Pantheon有一个非常好的插件  wp-redis，这个插件能帮助你以最快速度加载你曾浏览过的页面。\n\n### 3、队列\n\nReids在内存存储引擎领域的一大优点是提供 list 和 set 操作，这使得Redis能作为一个很好的消息队列平台来使用。Redis作为队列使用的操作，就类似于本地程序语言（如Python）对 list 的 push/pop 操作。\n\n如果你快速的在Google中搜索“Redis queues”，你马上就能找到大量的开源项目，这些项目的目的就是利用Redis创建非常好的后端工具，以满足各种队列需求。例如，Celery有一个后台就是使用Redis作为broker，你可以从这里去查看。\n\n### 4、排行榜/计数器\n\nRedis在内存中对数字进行递增或递减的操作实现的非常好。集合（Set）和有序集合（Sorted Set）也使得我们在执行这些操作的时候变的非常简单，Redis只是正好提供了这两种数据结构。\n\n### 5、发布/订阅\n\n发布/订阅的使用场景确实非常多。人们在社交网络连接中使用，还可作为基于发布/订阅的脚本触发器，甚至用Redis的发布/订阅功能来建立聊天系统！\n\n## Redis 对比 memcached\n------------------------------\n 对比 |  持久化 | 数据一致性 | 数据类型\n------|---------|------------|---\nredis | 支持持久化 | 无cas命令/有事务| 多种数据结构\nmemcached | 不支持持久化 | 有cas保证数据一致性 | 单一key-value结构  \n\n## Redis安装\n\n### Window 下安装\n下载地址：[https://github.com/MSOpenTech/redis/releases](https://github.com/MSOpenTech/redis/releases)\n\nRedis 支持 32 位和 64 位。这个需要根据你系统平台的实际情况选择，这里我们下载 Redis-x64-xxx.zip压缩包到 C 盘，解压后，将文件夹重新命名为 redis。\n![file.png](https://i.loli.net/2017/09/11/59b6985850bac.png)\n\n打开一个 cmd 窗口 使用cd命令切换目录到 C:\\redis 运行 :\t\t\n``` \nredis-server.exe redis.windows.conf \n```\n如果想方便的话，可以把 redis 的路径加到系统的环境变量里，这样就省得再输路径了，后面的那个 redis.windows.conf 可以省略，如果省略，会启用默认的。输入之后，会显示如下界面：\n![cmd.png](https://i.loli.net/2017/09/11/59b699409e6c5.png)\n\n这时候另启一个cmd窗口，原来的不要关闭，不然就无法访问服务端了。\n切换到redis目录下运行  \n``` \nredis-cli.exe -h 127.0.0.1 -p 6379\n```\n设置键值对: `` set myKey abc`` \n取出键值对: `` get myKey``\n![cli.png](https://i.loli.net/2017/09/11/59b69a1a58b58.png)\n\n### Linux下安装\n下载地址：[http://redis.io/download](http://redis.io/download)，下载最新文档版本。  \n本教程使用的最新文档版本为 2.8.17，下载并安装：  \n``` \n$ wget http://download.redis.io/releases/redis-2.8.17.tar.gz\n$ tar xzf redis-2.8.17.tar.gz\n$ cd redis-2.8.17\n$ make\n```\nmake完后 redis-2.8.17目录下会出现编译后的redis服务程序redis-server, 还有用于测试的客户端程序redis-cli,两个程序位于安装目录 src 目录下：  \n下面启动redis服务.  \n\n``` \n$ cd src\n$ ./redis-server\n```\n\n注意这种方式启动redis 使用的是默认配置。  \n也可以通过启动参数告诉redis使用指定配置文件使用下面命令启动。\n\n``` \n$ cd src\n$ ./redis-server redis.conf\n```\n\nredis.conf是一个默认的配置文件。我们可以根据需要使用自己的配置文件。  \n启动redis服务进程后，就可以使用测试客户端程序redis-cli和redis服务交互了。 比如:\n\n``` \n$ cd src\n$ ./redis-cli\nredis> set foo bar\nOK\nredis> get foo\n\"bar\"\n```\n\n### Ubuntu 下安装\n在 Ubuntu 系统安装 Redi 可以使用以下命令:\n\n``` \n$sudo apt-get update\n$sudo apt-get install redis-server\n```\n\n启动 Redis\n\n``` \n$ redis-server\n```\n\n查看 redis 是否启动？\n\n``` \n$ redis-cli\n```\n\n以上命令将打开以下终端：\n\n``` \nredis 127.0.0.1:6379>  \n```\n\n127.0.0.1 是本机 IP ，6379 是 redis 服务端口。现在我们输入 PING 命令。\n\n``` \nredis 127.0.0.1:6379> ping\nPONG\n```\n\n以上说明我们已经成功安装了redis。\n\n## Redis 配置\n\nRedis 的配置文件位于 Redis 安装目录下，文件名为 redis.conf。\n你可以通过 CONFIG 命令查看或设置配置项。\n### 1.查看配置(GET命令)\n\nRedis CONFIG 命令格式如下：\n\n``` \nredis 127.0.0.1:6379> CONFIG GET CONFIG_SETTING_NAME\n```\n#### 例如\n\n``` \nredis 127.0.0.1:6379> CONFIG GET loglevel\n```\n\n1) \"loglevel\"  \n2) \"notice\"\n\n### 2.配置redis(SET命令)\n\nCONFIG SET 命令基本语法：\n\n``` \nredis 127.0.0.1:6379> CONFIG SET CONFIG_SETTING_NAME NEW_CONFIG_VALUE\n```\n\n#### 例如\n\n``` \nredis 127.0.0.1:6379> CONFIG SET loglevel \"notice\"  \nOK   \nredis 127.0.0.1:6379> CONFIG GET loglevel  \n\n1) \"loglevel\"\n2) \"notice\"\n```\n\n### 3.redis配置文件详解\n查看链接：[redis 配置 参数 详解](http://blog.51yip.com/nosql/1724.html)\n\n## Redis 数据类型\n\nRedis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。\n\n### String（字符串）\nstring是redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value。\nstring类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。\nstring类型是Redis最基本的数据类型，一个键最大能存储512MB。\n\n> 例如\n\n``` \nredis 127.0.0.1:6379> SET name \"hello\"\nOK\nredis 127.0.0.1:6379> GET name\n\"hello\"\n```\n\n在以上实例中我们使用了 Redis 的 SET 和 GET 命令。键为 name，对应的值为 hello。\n\n<i>注意：一个键最大能存储512MB。</i>\n\n### Hash（哈希）\nRedis hash 是一个键名对集合。\nRedis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。\n> 例如\n\n``` \n127.0.0.1:6379> HMSET user:1 username hello password hello points 200\nOK\n127.0.0.1:6379> HGETALL user:1\n1) \"username\"\n2) \"hello\"\n3) \"password\"\n4) \"hello\"\n5) \"points\"\n6) \"200\"\n```\n\n以上实例中 hash 数据类型存储了包含用户脚本信息的用户对象。 实例中我们使用了 ``Redis HMSET``, ``HGETALL``命令，user:1 为键值。\n每个 hash 可以存储 232 -1 键值对（40多亿）。\n\n### List（列表）\n\nRedis表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。\n> 例如：\n``` \nredis 127.0.0.1:6379> lpush hello redis\n(integer) 1\nredis 127.0.0.1:6379> lpush hello mongodb\n(integer) 2\nredis 127.0.0.1:6379> lpush hello rabitmq\n(integer) 3\nredis 127.0.0.1:6379> lrange hello 0 10\n1) \"rabitmq\"\n2) \"mongodb\"\n3) \"redis\"\nredis 127.0.0.1:6379>\n```\n\n列表最多可存储 2^32 - 1 元素 (4294967295, 每个列表可存储40多亿)。\n\n\n### Set（集合）\nRedis的Set是string类型的无序集合。  \n集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。\n\n** sadd命令 **\n添加一个string元素到,key对应的set集合中，成功返回1,如果元素已经在集合中返回0,key对应的set不存在返回错误。\n\n``` \nsadd key member\n```\n\n> 例如：\n\n``` \nredis 127.0.0.1:6379> sadd hello redis\n(integer) 1\nredis 127.0.0.1:6379> sadd hello mongodb\n(integer) 1\nredis 127.0.0.1:6379> sadd hello rabitmq\n(integer) 1\nredis 127.0.0.1:6379> sadd hello rabitmq\n(integer) 0\nredis 127.0.0.1:6379> smembers hello\n\n1) \"rabitmq\"\n2) \"mongodb\"\n3) \"redis\"\n```\n\n注意：以上实例中 rabitmq 添加了两次，但根据集合内元素的唯一性，第二次插入的元素将被忽略。  \n集合中最大的成员数为 232 - 1(4294967295, 每个集合可存储40多亿个成员)。  \n\n### zset(sorted set：有序集合)\n\nRedis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。\n不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。  \n** zset的成员是唯一的,但分数(score)却可以重复。**\n\n** zadd 命令**  \n添加元素到集合，元素在集合中存在则更新对应score  \n`` \nzadd key score member \n``\n> 例如\n``` \nredis 127.0.0.1:6379> zadd hello 0 redis\n(integer) 1\nredis 127.0.0.1:6379> zadd hello 0 mongodb\n(integer) 1\nredis 127.0.0.1:6379> zadd hello 0 rabitmq\n(integer) 1\nredis 127.0.0.1:6379> zadd hello 0 rabitmq\n(integer) 0\nredis 127.0.0.1:6379> ZRANGEBYSCORE hello 0 1000\n\n1) \"redis\"\n2) \"mongodb\"\n3) \"rabitmq\"\n```","source":"_posts/redis非权威指南(基本知识).md","raw":"---\ntitle: Redis非权威指南(基本知识)\ndate: 2017-08-20 20:07:31\ntags:\n  - Redis\n  - 数据库\ndesc: Redis非权威指南(基本知识)\nkeywords: redis 缓存 基础 教程 php \ncategories:\n- 数据库\n\n---\n\n## Redis 简介\n<center>![redis_logo.png](https://i.loli.net/2017/09/11/59b6a42bf239f.png)</center>  \nRedis是完全开源免费的一个高性能的key-value存储系统。\n它可以用作数据库、缓存和消息中间件。  \n> \n* Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。\n* Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。\n* Redis支持数据的备份，即master-slave模式的数据备份。\n\n<!--more-->\n## Redis的特点\n\nRedis将其数据库完全保存在内存中，因此性能极高,能读的速度是110000次/s,写的速度是81000次/s 。  \nRedis支持开发人员常用的大多数数据类型，例如列表，集合，排序集和散列等等。这使得Redis很容易被用来解决各种问题，因为我们知道哪些问题可以更好使用地哪些数据类型来处理解决。   \nRedis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行。  \nRedis还支持 publish/subscribe, 通知, key 过期等等特性。\n\n## Redis在项目中的作用\n\n<b>Redis在项目中使用一般作为主要缓存服务。</b>\n\n### 1、会话缓存（Session Cache）\n\n最常用的一种使用Redis的情景是会话缓存（session cache）。用Redis缓存会话比其他存储（如Memcached）的优势在于：Redis提供持久化。\n\n随着 Redis 这些年的改进，很容易找到怎么恰当的使用Redis来缓存会话的文档。甚至广为人知的商业平台Magento也提供Redis的插件。\n\n### 2、全页缓存（FPC）\n\n除基本的会话token之外，Redis还提供很简便的FPC平台。回到一致性问题，即使重启了Redis实例，因为有磁盘的持久化，用户也不会看到页面加载速度的下降，这是一个极大改进，类似PHP本地FPC。\n\n再次以Magento为例，Magento提供一个插件来使用Redis作为全页缓存后端。\n\n此外，对WordPress的用户来说，Pantheon有一个非常好的插件  wp-redis，这个插件能帮助你以最快速度加载你曾浏览过的页面。\n\n### 3、队列\n\nReids在内存存储引擎领域的一大优点是提供 list 和 set 操作，这使得Redis能作为一个很好的消息队列平台来使用。Redis作为队列使用的操作，就类似于本地程序语言（如Python）对 list 的 push/pop 操作。\n\n如果你快速的在Google中搜索“Redis queues”，你马上就能找到大量的开源项目，这些项目的目的就是利用Redis创建非常好的后端工具，以满足各种队列需求。例如，Celery有一个后台就是使用Redis作为broker，你可以从这里去查看。\n\n### 4、排行榜/计数器\n\nRedis在内存中对数字进行递增或递减的操作实现的非常好。集合（Set）和有序集合（Sorted Set）也使得我们在执行这些操作的时候变的非常简单，Redis只是正好提供了这两种数据结构。\n\n### 5、发布/订阅\n\n发布/订阅的使用场景确实非常多。人们在社交网络连接中使用，还可作为基于发布/订阅的脚本触发器，甚至用Redis的发布/订阅功能来建立聊天系统！\n\n## Redis 对比 memcached\n------------------------------\n 对比 |  持久化 | 数据一致性 | 数据类型\n------|---------|------------|---\nredis | 支持持久化 | 无cas命令/有事务| 多种数据结构\nmemcached | 不支持持久化 | 有cas保证数据一致性 | 单一key-value结构  \n\n## Redis安装\n\n### Window 下安装\n下载地址：[https://github.com/MSOpenTech/redis/releases](https://github.com/MSOpenTech/redis/releases)\n\nRedis 支持 32 位和 64 位。这个需要根据你系统平台的实际情况选择，这里我们下载 Redis-x64-xxx.zip压缩包到 C 盘，解压后，将文件夹重新命名为 redis。\n![file.png](https://i.loli.net/2017/09/11/59b6985850bac.png)\n\n打开一个 cmd 窗口 使用cd命令切换目录到 C:\\redis 运行 :\t\t\n``` \nredis-server.exe redis.windows.conf \n```\n如果想方便的话，可以把 redis 的路径加到系统的环境变量里，这样就省得再输路径了，后面的那个 redis.windows.conf 可以省略，如果省略，会启用默认的。输入之后，会显示如下界面：\n![cmd.png](https://i.loli.net/2017/09/11/59b699409e6c5.png)\n\n这时候另启一个cmd窗口，原来的不要关闭，不然就无法访问服务端了。\n切换到redis目录下运行  \n``` \nredis-cli.exe -h 127.0.0.1 -p 6379\n```\n设置键值对: `` set myKey abc`` \n取出键值对: `` get myKey``\n![cli.png](https://i.loli.net/2017/09/11/59b69a1a58b58.png)\n\n### Linux下安装\n下载地址：[http://redis.io/download](http://redis.io/download)，下载最新文档版本。  \n本教程使用的最新文档版本为 2.8.17，下载并安装：  \n``` \n$ wget http://download.redis.io/releases/redis-2.8.17.tar.gz\n$ tar xzf redis-2.8.17.tar.gz\n$ cd redis-2.8.17\n$ make\n```\nmake完后 redis-2.8.17目录下会出现编译后的redis服务程序redis-server, 还有用于测试的客户端程序redis-cli,两个程序位于安装目录 src 目录下：  \n下面启动redis服务.  \n\n``` \n$ cd src\n$ ./redis-server\n```\n\n注意这种方式启动redis 使用的是默认配置。  \n也可以通过启动参数告诉redis使用指定配置文件使用下面命令启动。\n\n``` \n$ cd src\n$ ./redis-server redis.conf\n```\n\nredis.conf是一个默认的配置文件。我们可以根据需要使用自己的配置文件。  \n启动redis服务进程后，就可以使用测试客户端程序redis-cli和redis服务交互了。 比如:\n\n``` \n$ cd src\n$ ./redis-cli\nredis> set foo bar\nOK\nredis> get foo\n\"bar\"\n```\n\n### Ubuntu 下安装\n在 Ubuntu 系统安装 Redi 可以使用以下命令:\n\n``` \n$sudo apt-get update\n$sudo apt-get install redis-server\n```\n\n启动 Redis\n\n``` \n$ redis-server\n```\n\n查看 redis 是否启动？\n\n``` \n$ redis-cli\n```\n\n以上命令将打开以下终端：\n\n``` \nredis 127.0.0.1:6379>  \n```\n\n127.0.0.1 是本机 IP ，6379 是 redis 服务端口。现在我们输入 PING 命令。\n\n``` \nredis 127.0.0.1:6379> ping\nPONG\n```\n\n以上说明我们已经成功安装了redis。\n\n## Redis 配置\n\nRedis 的配置文件位于 Redis 安装目录下，文件名为 redis.conf。\n你可以通过 CONFIG 命令查看或设置配置项。\n### 1.查看配置(GET命令)\n\nRedis CONFIG 命令格式如下：\n\n``` \nredis 127.0.0.1:6379> CONFIG GET CONFIG_SETTING_NAME\n```\n#### 例如\n\n``` \nredis 127.0.0.1:6379> CONFIG GET loglevel\n```\n\n1) \"loglevel\"  \n2) \"notice\"\n\n### 2.配置redis(SET命令)\n\nCONFIG SET 命令基本语法：\n\n``` \nredis 127.0.0.1:6379> CONFIG SET CONFIG_SETTING_NAME NEW_CONFIG_VALUE\n```\n\n#### 例如\n\n``` \nredis 127.0.0.1:6379> CONFIG SET loglevel \"notice\"  \nOK   \nredis 127.0.0.1:6379> CONFIG GET loglevel  \n\n1) \"loglevel\"\n2) \"notice\"\n```\n\n### 3.redis配置文件详解\n查看链接：[redis 配置 参数 详解](http://blog.51yip.com/nosql/1724.html)\n\n## Redis 数据类型\n\nRedis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。\n\n### String（字符串）\nstring是redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value。\nstring类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。\nstring类型是Redis最基本的数据类型，一个键最大能存储512MB。\n\n> 例如\n\n``` \nredis 127.0.0.1:6379> SET name \"hello\"\nOK\nredis 127.0.0.1:6379> GET name\n\"hello\"\n```\n\n在以上实例中我们使用了 Redis 的 SET 和 GET 命令。键为 name，对应的值为 hello。\n\n<i>注意：一个键最大能存储512MB。</i>\n\n### Hash（哈希）\nRedis hash 是一个键名对集合。\nRedis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。\n> 例如\n\n``` \n127.0.0.1:6379> HMSET user:1 username hello password hello points 200\nOK\n127.0.0.1:6379> HGETALL user:1\n1) \"username\"\n2) \"hello\"\n3) \"password\"\n4) \"hello\"\n5) \"points\"\n6) \"200\"\n```\n\n以上实例中 hash 数据类型存储了包含用户脚本信息的用户对象。 实例中我们使用了 ``Redis HMSET``, ``HGETALL``命令，user:1 为键值。\n每个 hash 可以存储 232 -1 键值对（40多亿）。\n\n### List（列表）\n\nRedis表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。\n> 例如：\n``` \nredis 127.0.0.1:6379> lpush hello redis\n(integer) 1\nredis 127.0.0.1:6379> lpush hello mongodb\n(integer) 2\nredis 127.0.0.1:6379> lpush hello rabitmq\n(integer) 3\nredis 127.0.0.1:6379> lrange hello 0 10\n1) \"rabitmq\"\n2) \"mongodb\"\n3) \"redis\"\nredis 127.0.0.1:6379>\n```\n\n列表最多可存储 2^32 - 1 元素 (4294967295, 每个列表可存储40多亿)。\n\n\n### Set（集合）\nRedis的Set是string类型的无序集合。  \n集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。\n\n** sadd命令 **\n添加一个string元素到,key对应的set集合中，成功返回1,如果元素已经在集合中返回0,key对应的set不存在返回错误。\n\n``` \nsadd key member\n```\n\n> 例如：\n\n``` \nredis 127.0.0.1:6379> sadd hello redis\n(integer) 1\nredis 127.0.0.1:6379> sadd hello mongodb\n(integer) 1\nredis 127.0.0.1:6379> sadd hello rabitmq\n(integer) 1\nredis 127.0.0.1:6379> sadd hello rabitmq\n(integer) 0\nredis 127.0.0.1:6379> smembers hello\n\n1) \"rabitmq\"\n2) \"mongodb\"\n3) \"redis\"\n```\n\n注意：以上实例中 rabitmq 添加了两次，但根据集合内元素的唯一性，第二次插入的元素将被忽略。  \n集合中最大的成员数为 232 - 1(4294967295, 每个集合可存储40多亿个成员)。  \n\n### zset(sorted set：有序集合)\n\nRedis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。\n不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。  \n** zset的成员是唯一的,但分数(score)却可以重复。**\n\n** zadd 命令**  \n添加元素到集合，元素在集合中存在则更新对应score  \n`` \nzadd key score member \n``\n> 例如\n``` \nredis 127.0.0.1:6379> zadd hello 0 redis\n(integer) 1\nredis 127.0.0.1:6379> zadd hello 0 mongodb\n(integer) 1\nredis 127.0.0.1:6379> zadd hello 0 rabitmq\n(integer) 1\nredis 127.0.0.1:6379> zadd hello 0 rabitmq\n(integer) 0\nredis 127.0.0.1:6379> ZRANGEBYSCORE hello 0 1000\n\n1) \"redis\"\n2) \"mongodb\"\n3) \"rabitmq\"\n```","slug":"redis非权威指南(基本知识)","published":1,"updated":"2017-09-12T12:25:31.675Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnom6wqg000vc0fygc54fh7s","content":"<h2 id=\"Redis-简介\"><a href=\"#Redis-简介\" class=\"headerlink\" title=\"Redis 简介\"></a>Redis 简介</h2><p><center><img src=\"https://i.loli.net/2017/09/11/59b6a42bf239f.png\" alt=\"redis_logo.png\"></center><br>Redis是完全开源免费的一个高性能的key-value存储系统。<br>它可以用作数据库、缓存和消息中间件。  </p>\n<blockquote>\n<ul>\n<li>Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。</li>\n<li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li>\n<li>Redis支持数据的备份，即master-slave模式的数据备份。</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"Redis的特点\"><a href=\"#Redis的特点\" class=\"headerlink\" title=\"Redis的特点\"></a>Redis的特点</h2><p>Redis将其数据库完全保存在内存中，因此性能极高,能读的速度是110000次/s,写的速度是81000次/s 。<br>Redis支持开发人员常用的大多数数据类型，例如列表，集合，排序集和散列等等。这使得Redis很容易被用来解决各种问题，因为我们知道哪些问题可以更好使用地哪些数据类型来处理解决。<br>Redis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行。<br>Redis还支持 publish/subscribe, 通知, key 过期等等特性。</p>\n<h2 id=\"Redis在项目中的作用\"><a href=\"#Redis在项目中的作用\" class=\"headerlink\" title=\"Redis在项目中的作用\"></a>Redis在项目中的作用</h2><p><b>Redis在项目中使用一般作为主要缓存服务。</b></p>\n<h3 id=\"1、会话缓存（Session-Cache）\"><a href=\"#1、会话缓存（Session-Cache）\" class=\"headerlink\" title=\"1、会话缓存（Session Cache）\"></a>1、会话缓存（Session Cache）</h3><p>最常用的一种使用Redis的情景是会话缓存（session cache）。用Redis缓存会话比其他存储（如Memcached）的优势在于：Redis提供持久化。</p>\n<p>随着 Redis 这些年的改进，很容易找到怎么恰当的使用Redis来缓存会话的文档。甚至广为人知的商业平台Magento也提供Redis的插件。</p>\n<h3 id=\"2、全页缓存（FPC）\"><a href=\"#2、全页缓存（FPC）\" class=\"headerlink\" title=\"2、全页缓存（FPC）\"></a>2、全页缓存（FPC）</h3><p>除基本的会话token之外，Redis还提供很简便的FPC平台。回到一致性问题，即使重启了Redis实例，因为有磁盘的持久化，用户也不会看到页面加载速度的下降，这是一个极大改进，类似PHP本地FPC。</p>\n<p>再次以Magento为例，Magento提供一个插件来使用Redis作为全页缓存后端。</p>\n<p>此外，对WordPress的用户来说，Pantheon有一个非常好的插件  wp-redis，这个插件能帮助你以最快速度加载你曾浏览过的页面。</p>\n<h3 id=\"3、队列\"><a href=\"#3、队列\" class=\"headerlink\" title=\"3、队列\"></a>3、队列</h3><p>Reids在内存存储引擎领域的一大优点是提供 list 和 set 操作，这使得Redis能作为一个很好的消息队列平台来使用。Redis作为队列使用的操作，就类似于本地程序语言（如Python）对 list 的 push/pop 操作。</p>\n<p>如果你快速的在Google中搜索“Redis queues”，你马上就能找到大量的开源项目，这些项目的目的就是利用Redis创建非常好的后端工具，以满足各种队列需求。例如，Celery有一个后台就是使用Redis作为broker，你可以从这里去查看。</p>\n<h3 id=\"4、排行榜-计数器\"><a href=\"#4、排行榜-计数器\" class=\"headerlink\" title=\"4、排行榜/计数器\"></a>4、排行榜/计数器</h3><p>Redis在内存中对数字进行递增或递减的操作实现的非常好。集合（Set）和有序集合（Sorted Set）也使得我们在执行这些操作的时候变的非常简单，Redis只是正好提供了这两种数据结构。</p>\n<h3 id=\"5、发布-订阅\"><a href=\"#5、发布-订阅\" class=\"headerlink\" title=\"5、发布/订阅\"></a>5、发布/订阅</h3><p>发布/订阅的使用场景确实非常多。人们在社交网络连接中使用，还可作为基于发布/订阅的脚本触发器，甚至用Redis的发布/订阅功能来建立聊天系统！</p>\n<h2 id=\"Redis-对比-memcached\"><a href=\"#Redis-对比-memcached\" class=\"headerlink\" title=\"Redis 对比 memcached\"></a>Redis 对比 memcached</h2><hr>\n<table>\n<thead>\n<tr>\n<th>对比</th>\n<th>持久化</th>\n<th>数据一致性</th>\n<th>数据类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>redis</td>\n<td>支持持久化</td>\n<td>无cas命令/有事务</td>\n<td>多种数据结构</td>\n</tr>\n<tr>\n<td>memcached</td>\n<td>不支持持久化</td>\n<td>有cas保证数据一致性</td>\n<td>单一key-value结构  </td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Redis安装\"><a href=\"#Redis安装\" class=\"headerlink\" title=\"Redis安装\"></a>Redis安装</h2><h3 id=\"Window-下安装\"><a href=\"#Window-下安装\" class=\"headerlink\" title=\"Window 下安装\"></a>Window 下安装</h3><p>下载地址：<a href=\"https://github.com/MSOpenTech/redis/releases\" target=\"_blank\" rel=\"external\">https://github.com/MSOpenTech/redis/releases</a></p>\n<p>Redis 支持 32 位和 64 位。这个需要根据你系统平台的实际情况选择，这里我们下载 Redis-x64-xxx.zip压缩包到 C 盘，解压后，将文件夹重新命名为 redis。<br><img src=\"https://i.loli.net/2017/09/11/59b6985850bac.png\" alt=\"file.png\"></p>\n<p>打开一个 cmd 窗口 使用cd命令切换目录到 C:\\redis 运行 :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis-server.exe redis.windows.conf</div></pre></td></tr></table></figure></p>\n<p>如果想方便的话，可以把 redis 的路径加到系统的环境变量里，这样就省得再输路径了，后面的那个 redis.windows.conf 可以省略，如果省略，会启用默认的。输入之后，会显示如下界面：<br><img src=\"https://i.loli.net/2017/09/11/59b699409e6c5.png\" alt=\"cmd.png\"></p>\n<p>这时候另启一个cmd窗口，原来的不要关闭，不然就无法访问服务端了。<br>切换到redis目录下运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis-cli.exe -h 127.0.0.1 -p 6379</div></pre></td></tr></table></figure></p>\n<p>设置键值对: <code>set myKey abc</code><br>取出键值对: <code>get myKey</code><br><img src=\"https://i.loli.net/2017/09/11/59b69a1a58b58.png\" alt=\"cli.png\"></p>\n<h3 id=\"Linux下安装\"><a href=\"#Linux下安装\" class=\"headerlink\" title=\"Linux下安装\"></a>Linux下安装</h3><p>下载地址：<a href=\"http://redis.io/download\" target=\"_blank\" rel=\"external\">http://redis.io/download</a>，下载最新文档版本。<br>本教程使用的最新文档版本为 2.8.17，下载并安装：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget http://download.redis.io/releases/redis-2.8.17.tar.gz</div><div class=\"line\">$ tar xzf redis-2.8.17.tar.gz</div><div class=\"line\">$ cd redis-2.8.17</div><div class=\"line\">$ make</div></pre></td></tr></table></figure></p>\n<p>make完后 redis-2.8.17目录下会出现编译后的redis服务程序redis-server, 还有用于测试的客户端程序redis-cli,两个程序位于安装目录 src 目录下：<br>下面启动redis服务.  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd src</div><div class=\"line\">$ ./redis-server</div></pre></td></tr></table></figure>\n<p>注意这种方式启动redis 使用的是默认配置。<br>也可以通过启动参数告诉redis使用指定配置文件使用下面命令启动。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd src</div><div class=\"line\">$ ./redis-server redis.conf</div></pre></td></tr></table></figure>\n<p>redis.conf是一个默认的配置文件。我们可以根据需要使用自己的配置文件。<br>启动redis服务进程后，就可以使用测试客户端程序redis-cli和redis服务交互了。 比如:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd src</div><div class=\"line\">$ ./redis-cli</div><div class=\"line\">redis&gt; set foo bar</div><div class=\"line\">OK</div><div class=\"line\">redis&gt; get foo</div><div class=\"line\">&quot;bar&quot;</div></pre></td></tr></table></figure>\n<h3 id=\"Ubuntu-下安装\"><a href=\"#Ubuntu-下安装\" class=\"headerlink\" title=\"Ubuntu 下安装\"></a>Ubuntu 下安装</h3><p>在 Ubuntu 系统安装 Redi 可以使用以下命令:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$sudo apt-get update</div><div class=\"line\">$sudo apt-get install redis-server</div></pre></td></tr></table></figure>\n<p>启动 Redis</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ redis-server</div></pre></td></tr></table></figure>\n<p>查看 redis 是否启动？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ redis-cli</div></pre></td></tr></table></figure>\n<p>以上命令将打开以下终端：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis 127.0.0.1:6379&gt;</div></pre></td></tr></table></figure>\n<p>127.0.0.1 是本机 IP ，6379 是 redis 服务端口。现在我们输入 PING 命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis 127.0.0.1:6379&gt; ping</div><div class=\"line\">PONG</div></pre></td></tr></table></figure>\n<p>以上说明我们已经成功安装了redis。</p>\n<h2 id=\"Redis-配置\"><a href=\"#Redis-配置\" class=\"headerlink\" title=\"Redis 配置\"></a>Redis 配置</h2><p>Redis 的配置文件位于 Redis 安装目录下，文件名为 redis.conf。<br>你可以通过 CONFIG 命令查看或设置配置项。</p>\n<h3 id=\"1-查看配置-GET命令\"><a href=\"#1-查看配置-GET命令\" class=\"headerlink\" title=\"1.查看配置(GET命令)\"></a>1.查看配置(GET命令)</h3><p>Redis CONFIG 命令格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis 127.0.0.1:6379&gt; CONFIG GET CONFIG_SETTING_NAME</div></pre></td></tr></table></figure>\n<h4 id=\"例如\"><a href=\"#例如\" class=\"headerlink\" title=\"例如\"></a>例如</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis 127.0.0.1:6379&gt; CONFIG GET loglevel</div></pre></td></tr></table></figure>\n<p>1) “loglevel”<br>2) “notice”</p>\n<h3 id=\"2-配置redis-SET命令\"><a href=\"#2-配置redis-SET命令\" class=\"headerlink\" title=\"2.配置redis(SET命令)\"></a>2.配置redis(SET命令)</h3><p>CONFIG SET 命令基本语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis 127.0.0.1:6379&gt; CONFIG SET CONFIG_SETTING_NAME NEW_CONFIG_VALUE</div></pre></td></tr></table></figure>\n<h4 id=\"例如-1\"><a href=\"#例如-1\" class=\"headerlink\" title=\"例如\"></a>例如</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis 127.0.0.1:6379&gt; CONFIG SET loglevel &quot;notice&quot;  </div><div class=\"line\">OK   </div><div class=\"line\">redis 127.0.0.1:6379&gt; CONFIG GET loglevel  </div><div class=\"line\"></div><div class=\"line\">1) &quot;loglevel&quot;</div><div class=\"line\">2) &quot;notice&quot;</div></pre></td></tr></table></figure>\n<h3 id=\"3-redis配置文件详解\"><a href=\"#3-redis配置文件详解\" class=\"headerlink\" title=\"3.redis配置文件详解\"></a>3.redis配置文件详解</h3><p>查看链接：<a href=\"http://blog.51yip.com/nosql/1724.html\" target=\"_blank\" rel=\"external\">redis 配置 参数 详解</a></p>\n<h2 id=\"Redis-数据类型\"><a href=\"#Redis-数据类型\" class=\"headerlink\" title=\"Redis 数据类型\"></a>Redis 数据类型</h2><p>Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。</p>\n<h3 id=\"String（字符串）\"><a href=\"#String（字符串）\" class=\"headerlink\" title=\"String（字符串）\"></a>String（字符串）</h3><p>string是redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value。<br>string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。<br>string类型是Redis最基本的数据类型，一个键最大能存储512MB。</p>\n<blockquote>\n<p>例如</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis 127.0.0.1:6379&gt; SET name &quot;hello&quot;</div><div class=\"line\">OK</div><div class=\"line\">redis 127.0.0.1:6379&gt; GET name</div><div class=\"line\">&quot;hello&quot;</div></pre></td></tr></table></figure>\n<p>在以上实例中我们使用了 Redis 的 SET 和 GET 命令。键为 name，对应的值为 hello。</p>\n<p><i>注意：一个键最大能存储512MB。</i></p>\n<h3 id=\"Hash（哈希）\"><a href=\"#Hash（哈希）\" class=\"headerlink\" title=\"Hash（哈希）\"></a>Hash（哈希）</h3><p>Redis hash 是一个键名对集合。<br>Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。</p>\n<blockquote>\n<p>例如</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">127.0.0.1:6379&gt; HMSET user:1 username hello password hello points 200</div><div class=\"line\">OK</div><div class=\"line\">127.0.0.1:6379&gt; HGETALL user:1</div><div class=\"line\">1) &quot;username&quot;</div><div class=\"line\">2) &quot;hello&quot;</div><div class=\"line\">3) &quot;password&quot;</div><div class=\"line\">4) &quot;hello&quot;</div><div class=\"line\">5) &quot;points&quot;</div><div class=\"line\">6) &quot;200&quot;</div></pre></td></tr></table></figure>\n<p>以上实例中 hash 数据类型存储了包含用户脚本信息的用户对象。 实例中我们使用了 <code>Redis HMSET</code>, <code>HGETALL</code>命令，user:1 为键值。<br>每个 hash 可以存储 232 -1 键值对（40多亿）。</p>\n<h3 id=\"List（列表）\"><a href=\"#List（列表）\" class=\"headerlink\" title=\"List（列表）\"></a>List（列表）</h3><p>Redis表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p>\n<blockquote>\n<p>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis 127.0.0.1:6379&gt; lpush hello redis</div><div class=\"line\">(integer) 1</div><div class=\"line\">redis 127.0.0.1:6379&gt; lpush hello mongodb</div><div class=\"line\">(integer) 2</div><div class=\"line\">redis 127.0.0.1:6379&gt; lpush hello rabitmq</div><div class=\"line\">(integer) 3</div><div class=\"line\">redis 127.0.0.1:6379&gt; lrange hello 0 10</div><div class=\"line\">1) &quot;rabitmq&quot;</div><div class=\"line\">2) &quot;mongodb&quot;</div><div class=\"line\">3) &quot;redis&quot;</div><div class=\"line\">redis 127.0.0.1:6379&gt;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>列表最多可存储 2^32 - 1 元素 (4294967295, 每个列表可存储40多亿)。</p>\n<h3 id=\"Set（集合）\"><a href=\"#Set（集合）\" class=\"headerlink\" title=\"Set（集合）\"></a>Set（集合）</h3><p>Redis的Set是string类型的无序集合。<br>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。</p>\n<p><strong> sadd命令 </strong><br>添加一个string元素到,key对应的set集合中，成功返回1,如果元素已经在集合中返回0,key对应的set不存在返回错误。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sadd key member</div></pre></td></tr></table></figure>\n<blockquote>\n<p>例如：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis 127.0.0.1:6379&gt; sadd hello redis</div><div class=\"line\">(integer) 1</div><div class=\"line\">redis 127.0.0.1:6379&gt; sadd hello mongodb</div><div class=\"line\">(integer) 1</div><div class=\"line\">redis 127.0.0.1:6379&gt; sadd hello rabitmq</div><div class=\"line\">(integer) 1</div><div class=\"line\">redis 127.0.0.1:6379&gt; sadd hello rabitmq</div><div class=\"line\">(integer) 0</div><div class=\"line\">redis 127.0.0.1:6379&gt; smembers hello</div><div class=\"line\"></div><div class=\"line\">1) &quot;rabitmq&quot;</div><div class=\"line\">2) &quot;mongodb&quot;</div><div class=\"line\">3) &quot;redis&quot;</div></pre></td></tr></table></figure>\n<p>注意：以上实例中 rabitmq 添加了两次，但根据集合内元素的唯一性，第二次插入的元素将被忽略。<br>集合中最大的成员数为 232 - 1(4294967295, 每个集合可存储40多亿个成员)。  </p>\n<h3 id=\"zset-sorted-set：有序集合\"><a href=\"#zset-sorted-set：有序集合\" class=\"headerlink\" title=\"zset(sorted set：有序集合)\"></a>zset(sorted set：有序集合)</h3><p>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。<br>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。<br><strong> zset的成员是唯一的,但分数(score)却可以重复。</strong></p>\n<p><strong> zadd 命令</strong><br>添加元素到集合，元素在集合中存在则更新对应score<br><code>zadd key score member</code></p>\n<blockquote>\n<p>例如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis 127.0.0.1:6379&gt; zadd hello 0 redis</div><div class=\"line\">(integer) 1</div><div class=\"line\">redis 127.0.0.1:6379&gt; zadd hello 0 mongodb</div><div class=\"line\">(integer) 1</div><div class=\"line\">redis 127.0.0.1:6379&gt; zadd hello 0 rabitmq</div><div class=\"line\">(integer) 1</div><div class=\"line\">redis 127.0.0.1:6379&gt; zadd hello 0 rabitmq</div><div class=\"line\">(integer) 0</div><div class=\"line\">redis 127.0.0.1:6379&gt; ZRANGEBYSCORE hello 0 1000</div><div class=\"line\"></div><div class=\"line\">1) &quot;redis&quot;</div><div class=\"line\">2) &quot;mongodb&quot;</div><div class=\"line\">3) &quot;rabitmq&quot;</div></pre></td></tr></table></figure></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"Redis-简介\"><a href=\"#Redis-简介\" class=\"headerlink\" title=\"Redis 简介\"></a>Redis 简介</h2><p><center><img src=\"https://i.loli.net/2017/09/11/59b6a42bf239f.png\" alt=\"redis_logo.png\"></center><br>Redis是完全开源免费的一个高性能的key-value存储系统。<br>它可以用作数据库、缓存和消息中间件。  </p>\n<blockquote>\n<ul>\n<li>Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。</li>\n<li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li>\n<li>Redis支持数据的备份，即master-slave模式的数据备份。</li>\n</ul>\n</blockquote>","more":"<h2 id=\"Redis的特点\"><a href=\"#Redis的特点\" class=\"headerlink\" title=\"Redis的特点\"></a>Redis的特点</h2><p>Redis将其数据库完全保存在内存中，因此性能极高,能读的速度是110000次/s,写的速度是81000次/s 。<br>Redis支持开发人员常用的大多数数据类型，例如列表，集合，排序集和散列等等。这使得Redis很容易被用来解决各种问题，因为我们知道哪些问题可以更好使用地哪些数据类型来处理解决。<br>Redis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行。<br>Redis还支持 publish/subscribe, 通知, key 过期等等特性。</p>\n<h2 id=\"Redis在项目中的作用\"><a href=\"#Redis在项目中的作用\" class=\"headerlink\" title=\"Redis在项目中的作用\"></a>Redis在项目中的作用</h2><p><b>Redis在项目中使用一般作为主要缓存服务。</b></p>\n<h3 id=\"1、会话缓存（Session-Cache）\"><a href=\"#1、会话缓存（Session-Cache）\" class=\"headerlink\" title=\"1、会话缓存（Session Cache）\"></a>1、会话缓存（Session Cache）</h3><p>最常用的一种使用Redis的情景是会话缓存（session cache）。用Redis缓存会话比其他存储（如Memcached）的优势在于：Redis提供持久化。</p>\n<p>随着 Redis 这些年的改进，很容易找到怎么恰当的使用Redis来缓存会话的文档。甚至广为人知的商业平台Magento也提供Redis的插件。</p>\n<h3 id=\"2、全页缓存（FPC）\"><a href=\"#2、全页缓存（FPC）\" class=\"headerlink\" title=\"2、全页缓存（FPC）\"></a>2、全页缓存（FPC）</h3><p>除基本的会话token之外，Redis还提供很简便的FPC平台。回到一致性问题，即使重启了Redis实例，因为有磁盘的持久化，用户也不会看到页面加载速度的下降，这是一个极大改进，类似PHP本地FPC。</p>\n<p>再次以Magento为例，Magento提供一个插件来使用Redis作为全页缓存后端。</p>\n<p>此外，对WordPress的用户来说，Pantheon有一个非常好的插件  wp-redis，这个插件能帮助你以最快速度加载你曾浏览过的页面。</p>\n<h3 id=\"3、队列\"><a href=\"#3、队列\" class=\"headerlink\" title=\"3、队列\"></a>3、队列</h3><p>Reids在内存存储引擎领域的一大优点是提供 list 和 set 操作，这使得Redis能作为一个很好的消息队列平台来使用。Redis作为队列使用的操作，就类似于本地程序语言（如Python）对 list 的 push/pop 操作。</p>\n<p>如果你快速的在Google中搜索“Redis queues”，你马上就能找到大量的开源项目，这些项目的目的就是利用Redis创建非常好的后端工具，以满足各种队列需求。例如，Celery有一个后台就是使用Redis作为broker，你可以从这里去查看。</p>\n<h3 id=\"4、排行榜-计数器\"><a href=\"#4、排行榜-计数器\" class=\"headerlink\" title=\"4、排行榜/计数器\"></a>4、排行榜/计数器</h3><p>Redis在内存中对数字进行递增或递减的操作实现的非常好。集合（Set）和有序集合（Sorted Set）也使得我们在执行这些操作的时候变的非常简单，Redis只是正好提供了这两种数据结构。</p>\n<h3 id=\"5、发布-订阅\"><a href=\"#5、发布-订阅\" class=\"headerlink\" title=\"5、发布/订阅\"></a>5、发布/订阅</h3><p>发布/订阅的使用场景确实非常多。人们在社交网络连接中使用，还可作为基于发布/订阅的脚本触发器，甚至用Redis的发布/订阅功能来建立聊天系统！</p>\n<h2 id=\"Redis-对比-memcached\"><a href=\"#Redis-对比-memcached\" class=\"headerlink\" title=\"Redis 对比 memcached\"></a>Redis 对比 memcached</h2><hr>\n<table>\n<thead>\n<tr>\n<th>对比</th>\n<th>持久化</th>\n<th>数据一致性</th>\n<th>数据类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>redis</td>\n<td>支持持久化</td>\n<td>无cas命令/有事务</td>\n<td>多种数据结构</td>\n</tr>\n<tr>\n<td>memcached</td>\n<td>不支持持久化</td>\n<td>有cas保证数据一致性</td>\n<td>单一key-value结构  </td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Redis安装\"><a href=\"#Redis安装\" class=\"headerlink\" title=\"Redis安装\"></a>Redis安装</h2><h3 id=\"Window-下安装\"><a href=\"#Window-下安装\" class=\"headerlink\" title=\"Window 下安装\"></a>Window 下安装</h3><p>下载地址：<a href=\"https://github.com/MSOpenTech/redis/releases\" target=\"_blank\" rel=\"external\">https://github.com/MSOpenTech/redis/releases</a></p>\n<p>Redis 支持 32 位和 64 位。这个需要根据你系统平台的实际情况选择，这里我们下载 Redis-x64-xxx.zip压缩包到 C 盘，解压后，将文件夹重新命名为 redis。<br><img src=\"https://i.loli.net/2017/09/11/59b6985850bac.png\" alt=\"file.png\"></p>\n<p>打开一个 cmd 窗口 使用cd命令切换目录到 C:\\redis 运行 :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis-server.exe redis.windows.conf</div></pre></td></tr></table></figure></p>\n<p>如果想方便的话，可以把 redis 的路径加到系统的环境变量里，这样就省得再输路径了，后面的那个 redis.windows.conf 可以省略，如果省略，会启用默认的。输入之后，会显示如下界面：<br><img src=\"https://i.loli.net/2017/09/11/59b699409e6c5.png\" alt=\"cmd.png\"></p>\n<p>这时候另启一个cmd窗口，原来的不要关闭，不然就无法访问服务端了。<br>切换到redis目录下运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis-cli.exe -h 127.0.0.1 -p 6379</div></pre></td></tr></table></figure></p>\n<p>设置键值对: <code>set myKey abc</code><br>取出键值对: <code>get myKey</code><br><img src=\"https://i.loli.net/2017/09/11/59b69a1a58b58.png\" alt=\"cli.png\"></p>\n<h3 id=\"Linux下安装\"><a href=\"#Linux下安装\" class=\"headerlink\" title=\"Linux下安装\"></a>Linux下安装</h3><p>下载地址：<a href=\"http://redis.io/download\" target=\"_blank\" rel=\"external\">http://redis.io/download</a>，下载最新文档版本。<br>本教程使用的最新文档版本为 2.8.17，下载并安装：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget http://download.redis.io/releases/redis-2.8.17.tar.gz</div><div class=\"line\">$ tar xzf redis-2.8.17.tar.gz</div><div class=\"line\">$ cd redis-2.8.17</div><div class=\"line\">$ make</div></pre></td></tr></table></figure></p>\n<p>make完后 redis-2.8.17目录下会出现编译后的redis服务程序redis-server, 还有用于测试的客户端程序redis-cli,两个程序位于安装目录 src 目录下：<br>下面启动redis服务.  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd src</div><div class=\"line\">$ ./redis-server</div></pre></td></tr></table></figure>\n<p>注意这种方式启动redis 使用的是默认配置。<br>也可以通过启动参数告诉redis使用指定配置文件使用下面命令启动。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd src</div><div class=\"line\">$ ./redis-server redis.conf</div></pre></td></tr></table></figure>\n<p>redis.conf是一个默认的配置文件。我们可以根据需要使用自己的配置文件。<br>启动redis服务进程后，就可以使用测试客户端程序redis-cli和redis服务交互了。 比如:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd src</div><div class=\"line\">$ ./redis-cli</div><div class=\"line\">redis&gt; set foo bar</div><div class=\"line\">OK</div><div class=\"line\">redis&gt; get foo</div><div class=\"line\">&quot;bar&quot;</div></pre></td></tr></table></figure>\n<h3 id=\"Ubuntu-下安装\"><a href=\"#Ubuntu-下安装\" class=\"headerlink\" title=\"Ubuntu 下安装\"></a>Ubuntu 下安装</h3><p>在 Ubuntu 系统安装 Redi 可以使用以下命令:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$sudo apt-get update</div><div class=\"line\">$sudo apt-get install redis-server</div></pre></td></tr></table></figure>\n<p>启动 Redis</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ redis-server</div></pre></td></tr></table></figure>\n<p>查看 redis 是否启动？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ redis-cli</div></pre></td></tr></table></figure>\n<p>以上命令将打开以下终端：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis 127.0.0.1:6379&gt;</div></pre></td></tr></table></figure>\n<p>127.0.0.1 是本机 IP ，6379 是 redis 服务端口。现在我们输入 PING 命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis 127.0.0.1:6379&gt; ping</div><div class=\"line\">PONG</div></pre></td></tr></table></figure>\n<p>以上说明我们已经成功安装了redis。</p>\n<h2 id=\"Redis-配置\"><a href=\"#Redis-配置\" class=\"headerlink\" title=\"Redis 配置\"></a>Redis 配置</h2><p>Redis 的配置文件位于 Redis 安装目录下，文件名为 redis.conf。<br>你可以通过 CONFIG 命令查看或设置配置项。</p>\n<h3 id=\"1-查看配置-GET命令\"><a href=\"#1-查看配置-GET命令\" class=\"headerlink\" title=\"1.查看配置(GET命令)\"></a>1.查看配置(GET命令)</h3><p>Redis CONFIG 命令格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis 127.0.0.1:6379&gt; CONFIG GET CONFIG_SETTING_NAME</div></pre></td></tr></table></figure>\n<h4 id=\"例如\"><a href=\"#例如\" class=\"headerlink\" title=\"例如\"></a>例如</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis 127.0.0.1:6379&gt; CONFIG GET loglevel</div></pre></td></tr></table></figure>\n<p>1) “loglevel”<br>2) “notice”</p>\n<h3 id=\"2-配置redis-SET命令\"><a href=\"#2-配置redis-SET命令\" class=\"headerlink\" title=\"2.配置redis(SET命令)\"></a>2.配置redis(SET命令)</h3><p>CONFIG SET 命令基本语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis 127.0.0.1:6379&gt; CONFIG SET CONFIG_SETTING_NAME NEW_CONFIG_VALUE</div></pre></td></tr></table></figure>\n<h4 id=\"例如-1\"><a href=\"#例如-1\" class=\"headerlink\" title=\"例如\"></a>例如</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis 127.0.0.1:6379&gt; CONFIG SET loglevel &quot;notice&quot;  </div><div class=\"line\">OK   </div><div class=\"line\">redis 127.0.0.1:6379&gt; CONFIG GET loglevel  </div><div class=\"line\"></div><div class=\"line\">1) &quot;loglevel&quot;</div><div class=\"line\">2) &quot;notice&quot;</div></pre></td></tr></table></figure>\n<h3 id=\"3-redis配置文件详解\"><a href=\"#3-redis配置文件详解\" class=\"headerlink\" title=\"3.redis配置文件详解\"></a>3.redis配置文件详解</h3><p>查看链接：<a href=\"http://blog.51yip.com/nosql/1724.html\" target=\"_blank\" rel=\"external\">redis 配置 参数 详解</a></p>\n<h2 id=\"Redis-数据类型\"><a href=\"#Redis-数据类型\" class=\"headerlink\" title=\"Redis 数据类型\"></a>Redis 数据类型</h2><p>Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。</p>\n<h3 id=\"String（字符串）\"><a href=\"#String（字符串）\" class=\"headerlink\" title=\"String（字符串）\"></a>String（字符串）</h3><p>string是redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value。<br>string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。<br>string类型是Redis最基本的数据类型，一个键最大能存储512MB。</p>\n<blockquote>\n<p>例如</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis 127.0.0.1:6379&gt; SET name &quot;hello&quot;</div><div class=\"line\">OK</div><div class=\"line\">redis 127.0.0.1:6379&gt; GET name</div><div class=\"line\">&quot;hello&quot;</div></pre></td></tr></table></figure>\n<p>在以上实例中我们使用了 Redis 的 SET 和 GET 命令。键为 name，对应的值为 hello。</p>\n<p><i>注意：一个键最大能存储512MB。</i></p>\n<h3 id=\"Hash（哈希）\"><a href=\"#Hash（哈希）\" class=\"headerlink\" title=\"Hash（哈希）\"></a>Hash（哈希）</h3><p>Redis hash 是一个键名对集合。<br>Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。</p>\n<blockquote>\n<p>例如</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">127.0.0.1:6379&gt; HMSET user:1 username hello password hello points 200</div><div class=\"line\">OK</div><div class=\"line\">127.0.0.1:6379&gt; HGETALL user:1</div><div class=\"line\">1) &quot;username&quot;</div><div class=\"line\">2) &quot;hello&quot;</div><div class=\"line\">3) &quot;password&quot;</div><div class=\"line\">4) &quot;hello&quot;</div><div class=\"line\">5) &quot;points&quot;</div><div class=\"line\">6) &quot;200&quot;</div></pre></td></tr></table></figure>\n<p>以上实例中 hash 数据类型存储了包含用户脚本信息的用户对象。 实例中我们使用了 <code>Redis HMSET</code>, <code>HGETALL</code>命令，user:1 为键值。<br>每个 hash 可以存储 232 -1 键值对（40多亿）。</p>\n<h3 id=\"List（列表）\"><a href=\"#List（列表）\" class=\"headerlink\" title=\"List（列表）\"></a>List（列表）</h3><p>Redis表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p>\n<blockquote>\n<p>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis 127.0.0.1:6379&gt; lpush hello redis</div><div class=\"line\">(integer) 1</div><div class=\"line\">redis 127.0.0.1:6379&gt; lpush hello mongodb</div><div class=\"line\">(integer) 2</div><div class=\"line\">redis 127.0.0.1:6379&gt; lpush hello rabitmq</div><div class=\"line\">(integer) 3</div><div class=\"line\">redis 127.0.0.1:6379&gt; lrange hello 0 10</div><div class=\"line\">1) &quot;rabitmq&quot;</div><div class=\"line\">2) &quot;mongodb&quot;</div><div class=\"line\">3) &quot;redis&quot;</div><div class=\"line\">redis 127.0.0.1:6379&gt;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>列表最多可存储 2^32 - 1 元素 (4294967295, 每个列表可存储40多亿)。</p>\n<h3 id=\"Set（集合）\"><a href=\"#Set（集合）\" class=\"headerlink\" title=\"Set（集合）\"></a>Set（集合）</h3><p>Redis的Set是string类型的无序集合。<br>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。</p>\n<p><strong> sadd命令 </strong><br>添加一个string元素到,key对应的set集合中，成功返回1,如果元素已经在集合中返回0,key对应的set不存在返回错误。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sadd key member</div></pre></td></tr></table></figure>\n<blockquote>\n<p>例如：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis 127.0.0.1:6379&gt; sadd hello redis</div><div class=\"line\">(integer) 1</div><div class=\"line\">redis 127.0.0.1:6379&gt; sadd hello mongodb</div><div class=\"line\">(integer) 1</div><div class=\"line\">redis 127.0.0.1:6379&gt; sadd hello rabitmq</div><div class=\"line\">(integer) 1</div><div class=\"line\">redis 127.0.0.1:6379&gt; sadd hello rabitmq</div><div class=\"line\">(integer) 0</div><div class=\"line\">redis 127.0.0.1:6379&gt; smembers hello</div><div class=\"line\"></div><div class=\"line\">1) &quot;rabitmq&quot;</div><div class=\"line\">2) &quot;mongodb&quot;</div><div class=\"line\">3) &quot;redis&quot;</div></pre></td></tr></table></figure>\n<p>注意：以上实例中 rabitmq 添加了两次，但根据集合内元素的唯一性，第二次插入的元素将被忽略。<br>集合中最大的成员数为 232 - 1(4294967295, 每个集合可存储40多亿个成员)。  </p>\n<h3 id=\"zset-sorted-set：有序集合\"><a href=\"#zset-sorted-set：有序集合\" class=\"headerlink\" title=\"zset(sorted set：有序集合)\"></a>zset(sorted set：有序集合)</h3><p>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。<br>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。<br><strong> zset的成员是唯一的,但分数(score)却可以重复。</strong></p>\n<p><strong> zadd 命令</strong><br>添加元素到集合，元素在集合中存在则更新对应score<br><code>zadd key score member</code></p>\n<blockquote>\n<p>例如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis 127.0.0.1:6379&gt; zadd hello 0 redis</div><div class=\"line\">(integer) 1</div><div class=\"line\">redis 127.0.0.1:6379&gt; zadd hello 0 mongodb</div><div class=\"line\">(integer) 1</div><div class=\"line\">redis 127.0.0.1:6379&gt; zadd hello 0 rabitmq</div><div class=\"line\">(integer) 1</div><div class=\"line\">redis 127.0.0.1:6379&gt; zadd hello 0 rabitmq</div><div class=\"line\">(integer) 0</div><div class=\"line\">redis 127.0.0.1:6379&gt; ZRANGEBYSCORE hello 0 1000</div><div class=\"line\"></div><div class=\"line\">1) &quot;redis&quot;</div><div class=\"line\">2) &quot;mongodb&quot;</div><div class=\"line\">3) &quot;rabitmq&quot;</div></pre></td></tr></table></figure></p>\n</blockquote>"},{"title":"《如何阅读一本书》读书笔记","date":"2017-10-20T12:13:31.000Z","desc":"《如何阅读一本书》的阅读笔记。","keywords":"读书 阅读 如何阅读一本书","_content":"\n《如何阅读一本书》\n## 简介\n每本书的封面之下都有一套自己的骨架，作为一个分析阅读的读者，责任就是要找出这个骨架。  \n\n一本书出现在面前时，肌肉包着骨头，衣服包裹着肌肉，可说是盛装而来。  \n\n读者用不着揭开它的外衣或是撕去它的肌肉来得到在柔软表皮下的那套骨架，但是一定要用一双X光般的透视眼来看这本书，因为那是了解一本书、掌握其骨架的基础。  \n\n\n《如何阅读一本书》初版于1940年，1972年大幅增订改写为新版。  \n\n懂阅读的人，初探阅读的人，读这本书可以少走冤枉路。对阅读有所体会的人，读这本书可以有更深的印证和领悟。  \n\n(来自豆瓣)\n\n\n![如何阅读一本书.jpg](https://i.loli.net/2017/09/08/59b2a3843d8fb.jpg)\n<!--more-->\n## 作者简介 \n\n莫提默·J. 艾德勒（1902－2001）以学者、教育家、编辑人等多重面貌享有盛名。除了写作《如何阅读一本书》外，以主编《西方世界的经典人并担任1974年第十五版《大英百科全书》的编辑相异而闻名于世。  \n\n查尔斯·范多伦（1926－）先曾任美国哥伦比亚大学教授。后因故离任，和艾德勒一起工作。一方面襄助艾德勒编辑《大英百科全书》，一方面将本书1940年初版内容大幅度增补改写。  \n\n## 读书有感\n### 为什么从这本书开始？\n\n工欲善其事，必先利其器。所以读书之前，读一本优秀的教人读书的书，是非常有必要的。《如何阅读一本书》正是一本这样的好书。 \n\n看完这本书后，相信许多人都会像我一样，懊悔自己没有在更早的时候接触到它。  \n认识自己的阅读方式，然后使用更科学和有效的方式去阅读。  \n\n因为本人认为他是一本很好的书（当然，本书的优秀不需要我的肯定），同时他能让我们收获阅读的方法和对阅读的理解。看完这本书后，我真的希望有人能在更早的时候推荐我阅读这本书。所以我打算从这本书开始。  \n\n### 看本书前我是怎么阅读？    \n\n首先，在看本书之前，我应该已经算是一个书中说的“阅读的人”, 但同时我也是一个不太懂得阅读的人。   \n\n我是个小说迷，看小说时整个人都很轻松，正因为这种轻松的感觉，让我很多时候都不能自拔；我很喜欢看一些科普读物，让我的视野更宽广；因为工作需求，我也会看很多技术的书籍充电；因为好奇心很大，所以经常还会翻阅各种各样的‘杂书’；  \n\n但在阅读本书之前，我一直都没有自己的一个很合理的阅读方法，也不了解自己阅读行为的一些理论层的解释。例如：我经常以阅读小说的速度去阅读一些技术书籍，往往不得其解，随之放弃。也很多时候沉迷于简单的小说阅读的快感中，还认为从中收获很多。  \n\n错误的阅读方式让我错过了去体会很多好书的精华，浪费了许多时间在一些不好的书上面。  \n\n### 我的收获是？  \n这本书让我对阅读有了一个更加系统和科学的认识，也纠正了我一些不合适的阅读方式。 \n\n我们阅读书籍的目的在于获得新的资讯，从而让让我们获得成长。毫无疑问，我在这本书中收获了这些。  \n\n在看到本书开始大概三分之一的位置的时候，我有一种与本书相见恨晚的感觉，作者描述的阅读状态和方式，都很契合我的从前总结的阅读感受。随着更加往后的阅读，发现作者所讲的内容越来越难，我阅读的难度也在增加，这个时候，作者告诉我们：当你阅读越是困难，说明与作者的层次相差越大，阅读的收获也是越大。  \n\n随着整本书读完，做完后面的阅读测试题，才感受到作者对阅读的理解至深，有一种再看一遍的冲动。\n也有一种找本新书来应用本书收获的感觉。  \n\n### 这本书该怎么读？\n这本书我是花了近一个月早上早起，每天挤出半个小时来看完的。阅读作者阅读的数量和阅读涉及的领域之广，让我深深的钦佩。也是正是因为作者的博学，所以如果没有一定的知识储备，在阅读本书的时候还是会遇到一些困难的，当遇到这些困难的时候，就要像作者所说的：坚持看下去。  \n这是一本偏向应用的书，所以我们在阅读的时候，更重要的还有要注重实践。在本书结尾的地方也留了一些阅读的测验。当然更多的还是需要在以后的更多的阅读活动中去实践。  \n\n\n### 用简短的话总结？  \n本书从阅读的四个层次，循序深入的为我们解析了各个阅读阶段的技巧和注意事项。是一本指导阅读人阅读的很好的一本书。值得推荐。  \n  \n> ** 阅读的人：**   所谓‘阅读的人’，是指那些今天仍然习惯于从书写文字中汲取大量资讯，以增进对世界了解的人。\n","source":"_posts/《如何阅读一本书》读书笔记.md","raw":"---\ntitle: 《如何阅读一本书》读书笔记\ndate: 2017-10-20 20:13:31\ntags:\n  - 读书笔记 \n  - 生活\ndesc: 《如何阅读一本书》的阅读笔记。\nkeywords: 读书 阅读 如何阅读一本书 \ncategories:\n- read\n\n---\n\n《如何阅读一本书》\n## 简介\n每本书的封面之下都有一套自己的骨架，作为一个分析阅读的读者，责任就是要找出这个骨架。  \n\n一本书出现在面前时，肌肉包着骨头，衣服包裹着肌肉，可说是盛装而来。  \n\n读者用不着揭开它的外衣或是撕去它的肌肉来得到在柔软表皮下的那套骨架，但是一定要用一双X光般的透视眼来看这本书，因为那是了解一本书、掌握其骨架的基础。  \n\n\n《如何阅读一本书》初版于1940年，1972年大幅增订改写为新版。  \n\n懂阅读的人，初探阅读的人，读这本书可以少走冤枉路。对阅读有所体会的人，读这本书可以有更深的印证和领悟。  \n\n(来自豆瓣)\n\n\n![如何阅读一本书.jpg](https://i.loli.net/2017/09/08/59b2a3843d8fb.jpg)\n<!--more-->\n## 作者简介 \n\n莫提默·J. 艾德勒（1902－2001）以学者、教育家、编辑人等多重面貌享有盛名。除了写作《如何阅读一本书》外，以主编《西方世界的经典人并担任1974年第十五版《大英百科全书》的编辑相异而闻名于世。  \n\n查尔斯·范多伦（1926－）先曾任美国哥伦比亚大学教授。后因故离任，和艾德勒一起工作。一方面襄助艾德勒编辑《大英百科全书》，一方面将本书1940年初版内容大幅度增补改写。  \n\n## 读书有感\n### 为什么从这本书开始？\n\n工欲善其事，必先利其器。所以读书之前，读一本优秀的教人读书的书，是非常有必要的。《如何阅读一本书》正是一本这样的好书。 \n\n看完这本书后，相信许多人都会像我一样，懊悔自己没有在更早的时候接触到它。  \n认识自己的阅读方式，然后使用更科学和有效的方式去阅读。  \n\n因为本人认为他是一本很好的书（当然，本书的优秀不需要我的肯定），同时他能让我们收获阅读的方法和对阅读的理解。看完这本书后，我真的希望有人能在更早的时候推荐我阅读这本书。所以我打算从这本书开始。  \n\n### 看本书前我是怎么阅读？    \n\n首先，在看本书之前，我应该已经算是一个书中说的“阅读的人”, 但同时我也是一个不太懂得阅读的人。   \n\n我是个小说迷，看小说时整个人都很轻松，正因为这种轻松的感觉，让我很多时候都不能自拔；我很喜欢看一些科普读物，让我的视野更宽广；因为工作需求，我也会看很多技术的书籍充电；因为好奇心很大，所以经常还会翻阅各种各样的‘杂书’；  \n\n但在阅读本书之前，我一直都没有自己的一个很合理的阅读方法，也不了解自己阅读行为的一些理论层的解释。例如：我经常以阅读小说的速度去阅读一些技术书籍，往往不得其解，随之放弃。也很多时候沉迷于简单的小说阅读的快感中，还认为从中收获很多。  \n\n错误的阅读方式让我错过了去体会很多好书的精华，浪费了许多时间在一些不好的书上面。  \n\n### 我的收获是？  \n这本书让我对阅读有了一个更加系统和科学的认识，也纠正了我一些不合适的阅读方式。 \n\n我们阅读书籍的目的在于获得新的资讯，从而让让我们获得成长。毫无疑问，我在这本书中收获了这些。  \n\n在看到本书开始大概三分之一的位置的时候，我有一种与本书相见恨晚的感觉，作者描述的阅读状态和方式，都很契合我的从前总结的阅读感受。随着更加往后的阅读，发现作者所讲的内容越来越难，我阅读的难度也在增加，这个时候，作者告诉我们：当你阅读越是困难，说明与作者的层次相差越大，阅读的收获也是越大。  \n\n随着整本书读完，做完后面的阅读测试题，才感受到作者对阅读的理解至深，有一种再看一遍的冲动。\n也有一种找本新书来应用本书收获的感觉。  \n\n### 这本书该怎么读？\n这本书我是花了近一个月早上早起，每天挤出半个小时来看完的。阅读作者阅读的数量和阅读涉及的领域之广，让我深深的钦佩。也是正是因为作者的博学，所以如果没有一定的知识储备，在阅读本书的时候还是会遇到一些困难的，当遇到这些困难的时候，就要像作者所说的：坚持看下去。  \n这是一本偏向应用的书，所以我们在阅读的时候，更重要的还有要注重实践。在本书结尾的地方也留了一些阅读的测验。当然更多的还是需要在以后的更多的阅读活动中去实践。  \n\n\n### 用简短的话总结？  \n本书从阅读的四个层次，循序深入的为我们解析了各个阅读阶段的技巧和注意事项。是一本指导阅读人阅读的很好的一本书。值得推荐。  \n  \n> ** 阅读的人：**   所谓‘阅读的人’，是指那些今天仍然习惯于从书写文字中汲取大量资讯，以增进对世界了解的人。\n","slug":"《如何阅读一本书》读书笔记","published":1,"updated":"2018-06-07T13:35:28.373Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnom6wqp000yc0fyg9uyku80","content":"<p>《如何阅读一本书》</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>每本书的封面之下都有一套自己的骨架，作为一个分析阅读的读者，责任就是要找出这个骨架。  </p>\n<p>一本书出现在面前时，肌肉包着骨头，衣服包裹着肌肉，可说是盛装而来。  </p>\n<p>读者用不着揭开它的外衣或是撕去它的肌肉来得到在柔软表皮下的那套骨架，但是一定要用一双X光般的透视眼来看这本书，因为那是了解一本书、掌握其骨架的基础。  </p>\n<p>《如何阅读一本书》初版于1940年，1972年大幅增订改写为新版。  </p>\n<p>懂阅读的人，初探阅读的人，读这本书可以少走冤枉路。对阅读有所体会的人，读这本书可以有更深的印证和领悟。  </p>\n<p>(来自豆瓣)</p>\n<p><img src=\"https://i.loli.net/2017/09/08/59b2a3843d8fb.jpg\" alt=\"如何阅读一本书.jpg\"><br><a id=\"more\"></a></p>\n<h2 id=\"作者简介\"><a href=\"#作者简介\" class=\"headerlink\" title=\"作者简介\"></a>作者简介</h2><p>莫提默·J. 艾德勒（1902－2001）以学者、教育家、编辑人等多重面貌享有盛名。除了写作《如何阅读一本书》外，以主编《西方世界的经典人并担任1974年第十五版《大英百科全书》的编辑相异而闻名于世。  </p>\n<p>查尔斯·范多伦（1926－）先曾任美国哥伦比亚大学教授。后因故离任，和艾德勒一起工作。一方面襄助艾德勒编辑《大英百科全书》，一方面将本书1940年初版内容大幅度增补改写。  </p>\n<h2 id=\"读书有感\"><a href=\"#读书有感\" class=\"headerlink\" title=\"读书有感\"></a>读书有感</h2><h3 id=\"为什么从这本书开始？\"><a href=\"#为什么从这本书开始？\" class=\"headerlink\" title=\"为什么从这本书开始？\"></a>为什么从这本书开始？</h3><p>工欲善其事，必先利其器。所以读书之前，读一本优秀的教人读书的书，是非常有必要的。《如何阅读一本书》正是一本这样的好书。 </p>\n<p>看完这本书后，相信许多人都会像我一样，懊悔自己没有在更早的时候接触到它。<br>认识自己的阅读方式，然后使用更科学和有效的方式去阅读。  </p>\n<p>因为本人认为他是一本很好的书（当然，本书的优秀不需要我的肯定），同时他能让我们收获阅读的方法和对阅读的理解。看完这本书后，我真的希望有人能在更早的时候推荐我阅读这本书。所以我打算从这本书开始。  </p>\n<h3 id=\"看本书前我是怎么阅读？\"><a href=\"#看本书前我是怎么阅读？\" class=\"headerlink\" title=\"看本书前我是怎么阅读？\"></a>看本书前我是怎么阅读？</h3><p>首先，在看本书之前，我应该已经算是一个书中说的“阅读的人”, 但同时我也是一个不太懂得阅读的人。   </p>\n<p>我是个小说迷，看小说时整个人都很轻松，正因为这种轻松的感觉，让我很多时候都不能自拔；我很喜欢看一些科普读物，让我的视野更宽广；因为工作需求，我也会看很多技术的书籍充电；因为好奇心很大，所以经常还会翻阅各种各样的‘杂书’；  </p>\n<p>但在阅读本书之前，我一直都没有自己的一个很合理的阅读方法，也不了解自己阅读行为的一些理论层的解释。例如：我经常以阅读小说的速度去阅读一些技术书籍，往往不得其解，随之放弃。也很多时候沉迷于简单的小说阅读的快感中，还认为从中收获很多。  </p>\n<p>错误的阅读方式让我错过了去体会很多好书的精华，浪费了许多时间在一些不好的书上面。  </p>\n<h3 id=\"我的收获是？\"><a href=\"#我的收获是？\" class=\"headerlink\" title=\"我的收获是？\"></a>我的收获是？</h3><p>这本书让我对阅读有了一个更加系统和科学的认识，也纠正了我一些不合适的阅读方式。 </p>\n<p>我们阅读书籍的目的在于获得新的资讯，从而让让我们获得成长。毫无疑问，我在这本书中收获了这些。  </p>\n<p>在看到本书开始大概三分之一的位置的时候，我有一种与本书相见恨晚的感觉，作者描述的阅读状态和方式，都很契合我的从前总结的阅读感受。随着更加往后的阅读，发现作者所讲的内容越来越难，我阅读的难度也在增加，这个时候，作者告诉我们：当你阅读越是困难，说明与作者的层次相差越大，阅读的收获也是越大。  </p>\n<p>随着整本书读完，做完后面的阅读测试题，才感受到作者对阅读的理解至深，有一种再看一遍的冲动。<br>也有一种找本新书来应用本书收获的感觉。  </p>\n<h3 id=\"这本书该怎么读？\"><a href=\"#这本书该怎么读？\" class=\"headerlink\" title=\"这本书该怎么读？\"></a>这本书该怎么读？</h3><p>这本书我是花了近一个月早上早起，每天挤出半个小时来看完的。阅读作者阅读的数量和阅读涉及的领域之广，让我深深的钦佩。也是正是因为作者的博学，所以如果没有一定的知识储备，在阅读本书的时候还是会遇到一些困难的，当遇到这些困难的时候，就要像作者所说的：坚持看下去。<br>这是一本偏向应用的书，所以我们在阅读的时候，更重要的还有要注重实践。在本书结尾的地方也留了一些阅读的测验。当然更多的还是需要在以后的更多的阅读活动中去实践。  </p>\n<h3 id=\"用简短的话总结？\"><a href=\"#用简短的话总结？\" class=\"headerlink\" title=\"用简短的话总结？\"></a>用简短的话总结？</h3><p>本书从阅读的四个层次，循序深入的为我们解析了各个阅读阶段的技巧和注意事项。是一本指导阅读人阅读的很好的一本书。值得推荐。  </p>\n<blockquote>\n<p><strong> 阅读的人：</strong>   所谓‘阅读的人’，是指那些今天仍然习惯于从书写文字中汲取大量资讯，以增进对世界了解的人。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>《如何阅读一本书》</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>每本书的封面之下都有一套自己的骨架，作为一个分析阅读的读者，责任就是要找出这个骨架。  </p>\n<p>一本书出现在面前时，肌肉包着骨头，衣服包裹着肌肉，可说是盛装而来。  </p>\n<p>读者用不着揭开它的外衣或是撕去它的肌肉来得到在柔软表皮下的那套骨架，但是一定要用一双X光般的透视眼来看这本书，因为那是了解一本书、掌握其骨架的基础。  </p>\n<p>《如何阅读一本书》初版于1940年，1972年大幅增订改写为新版。  </p>\n<p>懂阅读的人，初探阅读的人，读这本书可以少走冤枉路。对阅读有所体会的人，读这本书可以有更深的印证和领悟。  </p>\n<p>(来自豆瓣)</p>\n<p><img src=\"https://i.loli.net/2017/09/08/59b2a3843d8fb.jpg\" alt=\"如何阅读一本书.jpg\"><br>","more":"</p>\n<h2 id=\"作者简介\"><a href=\"#作者简介\" class=\"headerlink\" title=\"作者简介\"></a>作者简介</h2><p>莫提默·J. 艾德勒（1902－2001）以学者、教育家、编辑人等多重面貌享有盛名。除了写作《如何阅读一本书》外，以主编《西方世界的经典人并担任1974年第十五版《大英百科全书》的编辑相异而闻名于世。  </p>\n<p>查尔斯·范多伦（1926－）先曾任美国哥伦比亚大学教授。后因故离任，和艾德勒一起工作。一方面襄助艾德勒编辑《大英百科全书》，一方面将本书1940年初版内容大幅度增补改写。  </p>\n<h2 id=\"读书有感\"><a href=\"#读书有感\" class=\"headerlink\" title=\"读书有感\"></a>读书有感</h2><h3 id=\"为什么从这本书开始？\"><a href=\"#为什么从这本书开始？\" class=\"headerlink\" title=\"为什么从这本书开始？\"></a>为什么从这本书开始？</h3><p>工欲善其事，必先利其器。所以读书之前，读一本优秀的教人读书的书，是非常有必要的。《如何阅读一本书》正是一本这样的好书。 </p>\n<p>看完这本书后，相信许多人都会像我一样，懊悔自己没有在更早的时候接触到它。<br>认识自己的阅读方式，然后使用更科学和有效的方式去阅读。  </p>\n<p>因为本人认为他是一本很好的书（当然，本书的优秀不需要我的肯定），同时他能让我们收获阅读的方法和对阅读的理解。看完这本书后，我真的希望有人能在更早的时候推荐我阅读这本书。所以我打算从这本书开始。  </p>\n<h3 id=\"看本书前我是怎么阅读？\"><a href=\"#看本书前我是怎么阅读？\" class=\"headerlink\" title=\"看本书前我是怎么阅读？\"></a>看本书前我是怎么阅读？</h3><p>首先，在看本书之前，我应该已经算是一个书中说的“阅读的人”, 但同时我也是一个不太懂得阅读的人。   </p>\n<p>我是个小说迷，看小说时整个人都很轻松，正因为这种轻松的感觉，让我很多时候都不能自拔；我很喜欢看一些科普读物，让我的视野更宽广；因为工作需求，我也会看很多技术的书籍充电；因为好奇心很大，所以经常还会翻阅各种各样的‘杂书’；  </p>\n<p>但在阅读本书之前，我一直都没有自己的一个很合理的阅读方法，也不了解自己阅读行为的一些理论层的解释。例如：我经常以阅读小说的速度去阅读一些技术书籍，往往不得其解，随之放弃。也很多时候沉迷于简单的小说阅读的快感中，还认为从中收获很多。  </p>\n<p>错误的阅读方式让我错过了去体会很多好书的精华，浪费了许多时间在一些不好的书上面。  </p>\n<h3 id=\"我的收获是？\"><a href=\"#我的收获是？\" class=\"headerlink\" title=\"我的收获是？\"></a>我的收获是？</h3><p>这本书让我对阅读有了一个更加系统和科学的认识，也纠正了我一些不合适的阅读方式。 </p>\n<p>我们阅读书籍的目的在于获得新的资讯，从而让让我们获得成长。毫无疑问，我在这本书中收获了这些。  </p>\n<p>在看到本书开始大概三分之一的位置的时候，我有一种与本书相见恨晚的感觉，作者描述的阅读状态和方式，都很契合我的从前总结的阅读感受。随着更加往后的阅读，发现作者所讲的内容越来越难，我阅读的难度也在增加，这个时候，作者告诉我们：当你阅读越是困难，说明与作者的层次相差越大，阅读的收获也是越大。  </p>\n<p>随着整本书读完，做完后面的阅读测试题，才感受到作者对阅读的理解至深，有一种再看一遍的冲动。<br>也有一种找本新书来应用本书收获的感觉。  </p>\n<h3 id=\"这本书该怎么读？\"><a href=\"#这本书该怎么读？\" class=\"headerlink\" title=\"这本书该怎么读？\"></a>这本书该怎么读？</h3><p>这本书我是花了近一个月早上早起，每天挤出半个小时来看完的。阅读作者阅读的数量和阅读涉及的领域之广，让我深深的钦佩。也是正是因为作者的博学，所以如果没有一定的知识储备，在阅读本书的时候还是会遇到一些困难的，当遇到这些困难的时候，就要像作者所说的：坚持看下去。<br>这是一本偏向应用的书，所以我们在阅读的时候，更重要的还有要注重实践。在本书结尾的地方也留了一些阅读的测验。当然更多的还是需要在以后的更多的阅读活动中去实践。  </p>\n<h3 id=\"用简短的话总结？\"><a href=\"#用简短的话总结？\" class=\"headerlink\" title=\"用简短的话总结？\"></a>用简短的话总结？</h3><p>本书从阅读的四个层次，循序深入的为我们解析了各个阅读阶段的技巧和注意事项。是一本指导阅读人阅读的很好的一本书。值得推荐。  </p>\n<blockquote>\n<p><strong> 阅读的人：</strong>   所谓‘阅读的人’，是指那些今天仍然习惯于从书写文字中汲取大量资讯，以增进对世界了解的人。</p>\n</blockquote>"},{"title":"Elasticsearch非权威指南，写在开始的话","date":"2017-05-20T12:07:31.000Z","desc":"Elasticsearch非权威指南，写在开始的话","keywords":"elasticsearch 学习笔记 大数据 非权威指南","_content":"\n打算了好久，《elasticsearch非权威指南》今天终于开始写了。\n\n距离开始接触elasticsearch到今天开始写这个笔记有半年多了。从开始的完全蒙圈到现在的懵懵懂懂。踩过N多的坑。开始写这个《指南》主要有下面几个原因：\n<!--more-->\n##一、能帮到一些开始学习ES的人\n\n首先，我自己是一个人独自的百度、google学习过来的。es是一个比较新的东西，网上的中文资料很有限。而且本人是做php开发的，es是基于lucene的，是用java开发的，所以php的资料就更少了。\n\n在学习的过程中我真的是爬过超多的坑，所以希望记录下这些“坑”，能帮助一些开始学习ES的人，后面的人少跳一些坑，我自己也希望有个人能在我跳坑之前提醒我，虽然都已经过去了。\n\n##二、希望帮助自己理清学到的东西\n\n我开始写这个《指南》并不是说我现在玩ES玩得多好，相反，我的对ES的了解才刚刚开始。**我希望通过写下笔记的形式理清自己的知识节点。**将之前学到的东西串起来，看自己哪有漏洞，再去边补边写。所以，这个《指南》肯定有很多的错误的和不足，希望发现的朋友能帮忙指出，不胜感激。\n\n也是因为本人目前技术有限的原因，本笔记的内容也写不了很深入，我自己yy的认为，这可能会让这个《指南》更加”亲民易懂“，更适合新人。\n\n##三、感谢在我学习过程中帮助过我的朋友。\n\n学习过程中我遇到许多的问题，很多问题度娘和gg都找不到，所以只能求助万能的群有和论坛的朋友。过程中，很多朋友帮我解答过很多的问题。\n\n每次我的问题得到解答的时候，我都暗暗的告诉自己，**这是一种”接力“，当我得到答案的时候，就是我拿到“接力棒”的时候，我有义务将“它”，传下去。**所以遇到我能解决的问题，我一定乐意去帮别人解决。我将这当做感谢那些帮助过我的人的方式。\n***\n>**关于笔记的几点说明：**\n\n* 由于本人对php比较熟悉，但在学习es的过程中顺便学了点java，所以关于涉及到代码的地方，我会用curl、php和java三种方式实现（特殊情况特殊说明）。\n\n* 对于ES本人也是新手，所以笔记会不断的完善。\n\n* 整个《指南》肯定会涉及到一些其他地方找到的资料，我会尽量的表明出处，如果有遗漏，有侵权的，请提醒，一定及时删改。\n\n*[《elasticsearch非权威指南》目录](http://www.jianshu.com/p/ede55b4110b1)*\n*本笔记欢迎转载，欢迎分享，转载分享不用通知作者。不过，如果可以的话希望能注明出处，看完文章还能点个赞。*","source":"_posts/写在开始的话.md","raw":"---\ntitle: Elasticsearch非权威指南，写在开始的话\ndate: 2017-05-20 20:07:31\ntags:\n  - Elasticsearch\ndesc: Elasticsearch非权威指南，写在开始的话\nkeywords:  elasticsearch 学习笔记 大数据 非权威指南 \ncategories:\n- Elasticsearch非权威指南\n\n---\n\n打算了好久，《elasticsearch非权威指南》今天终于开始写了。\n\n距离开始接触elasticsearch到今天开始写这个笔记有半年多了。从开始的完全蒙圈到现在的懵懵懂懂。踩过N多的坑。开始写这个《指南》主要有下面几个原因：\n<!--more-->\n##一、能帮到一些开始学习ES的人\n\n首先，我自己是一个人独自的百度、google学习过来的。es是一个比较新的东西，网上的中文资料很有限。而且本人是做php开发的，es是基于lucene的，是用java开发的，所以php的资料就更少了。\n\n在学习的过程中我真的是爬过超多的坑，所以希望记录下这些“坑”，能帮助一些开始学习ES的人，后面的人少跳一些坑，我自己也希望有个人能在我跳坑之前提醒我，虽然都已经过去了。\n\n##二、希望帮助自己理清学到的东西\n\n我开始写这个《指南》并不是说我现在玩ES玩得多好，相反，我的对ES的了解才刚刚开始。**我希望通过写下笔记的形式理清自己的知识节点。**将之前学到的东西串起来，看自己哪有漏洞，再去边补边写。所以，这个《指南》肯定有很多的错误的和不足，希望发现的朋友能帮忙指出，不胜感激。\n\n也是因为本人目前技术有限的原因，本笔记的内容也写不了很深入，我自己yy的认为，这可能会让这个《指南》更加”亲民易懂“，更适合新人。\n\n##三、感谢在我学习过程中帮助过我的朋友。\n\n学习过程中我遇到许多的问题，很多问题度娘和gg都找不到，所以只能求助万能的群有和论坛的朋友。过程中，很多朋友帮我解答过很多的问题。\n\n每次我的问题得到解答的时候，我都暗暗的告诉自己，**这是一种”接力“，当我得到答案的时候，就是我拿到“接力棒”的时候，我有义务将“它”，传下去。**所以遇到我能解决的问题，我一定乐意去帮别人解决。我将这当做感谢那些帮助过我的人的方式。\n***\n>**关于笔记的几点说明：**\n\n* 由于本人对php比较熟悉，但在学习es的过程中顺便学了点java，所以关于涉及到代码的地方，我会用curl、php和java三种方式实现（特殊情况特殊说明）。\n\n* 对于ES本人也是新手，所以笔记会不断的完善。\n\n* 整个《指南》肯定会涉及到一些其他地方找到的资料，我会尽量的表明出处，如果有遗漏，有侵权的，请提醒，一定及时删改。\n\n*[《elasticsearch非权威指南》目录](http://www.jianshu.com/p/ede55b4110b1)*\n*本笔记欢迎转载，欢迎分享，转载分享不用通知作者。不过，如果可以的话希望能注明出处，看完文章还能点个赞。*","slug":"写在开始的话","published":1,"updated":"2017-06-25T10:20:59.462Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnom6wqs0012c0fy5f05ta1r","content":"<p>打算了好久，《elasticsearch非权威指南》今天终于开始写了。</p>\n<p>距离开始接触elasticsearch到今天开始写这个笔记有半年多了。从开始的完全蒙圈到现在的懵懵懂懂。踩过N多的坑。开始写这个《指南》主要有下面几个原因：<br><a id=\"more\"></a></p>\n<p>##一、能帮到一些开始学习ES的人</p>\n<p>首先，我自己是一个人独自的百度、google学习过来的。es是一个比较新的东西，网上的中文资料很有限。而且本人是做php开发的，es是基于lucene的，是用java开发的，所以php的资料就更少了。</p>\n<p>在学习的过程中我真的是爬过超多的坑，所以希望记录下这些“坑”，能帮助一些开始学习ES的人，后面的人少跳一些坑，我自己也希望有个人能在我跳坑之前提醒我，虽然都已经过去了。</p>\n<p>##二、希望帮助自己理清学到的东西</p>\n<p>我开始写这个《指南》并不是说我现在玩ES玩得多好，相反，我的对ES的了解才刚刚开始。<strong>我希望通过写下笔记的形式理清自己的知识节点。</strong>将之前学到的东西串起来，看自己哪有漏洞，再去边补边写。所以，这个《指南》肯定有很多的错误的和不足，希望发现的朋友能帮忙指出，不胜感激。</p>\n<p>也是因为本人目前技术有限的原因，本笔记的内容也写不了很深入，我自己yy的认为，这可能会让这个《指南》更加”亲民易懂“，更适合新人。</p>\n<p>##三、感谢在我学习过程中帮助过我的朋友。</p>\n<p>学习过程中我遇到许多的问题，很多问题度娘和gg都找不到，所以只能求助万能的群有和论坛的朋友。过程中，很多朋友帮我解答过很多的问题。</p>\n<p>每次我的问题得到解答的时候，我都暗暗的告诉自己，<strong>这是一种”接力“，当我得到答案的时候，就是我拿到“接力棒”的时候，我有义务将“它”，传下去。</strong>所以遇到我能解决的问题，我一定乐意去帮别人解决。我将这当做感谢那些帮助过我的人的方式。</p>\n<hr>\n<blockquote>\n<p><strong>关于笔记的几点说明：</strong></p>\n</blockquote>\n<ul>\n<li><p>由于本人对php比较熟悉，但在学习es的过程中顺便学了点java，所以关于涉及到代码的地方，我会用curl、php和java三种方式实现（特殊情况特殊说明）。</p>\n</li>\n<li><p>对于ES本人也是新手，所以笔记会不断的完善。</p>\n</li>\n<li><p>整个《指南》肯定会涉及到一些其他地方找到的资料，我会尽量的表明出处，如果有遗漏，有侵权的，请提醒，一定及时删改。</p>\n</li>\n</ul>\n<p><em><a href=\"http://www.jianshu.com/p/ede55b4110b1\" target=\"_blank\" rel=\"external\">《elasticsearch非权威指南》目录</a></em><br><em>本笔记欢迎转载，欢迎分享，转载分享不用通知作者。不过，如果可以的话希望能注明出处，看完文章还能点个赞。</em></p>\n","site":{"data":{}},"excerpt":"<p>打算了好久，《elasticsearch非权威指南》今天终于开始写了。</p>\n<p>距离开始接触elasticsearch到今天开始写这个笔记有半年多了。从开始的完全蒙圈到现在的懵懵懂懂。踩过N多的坑。开始写这个《指南》主要有下面几个原因：<br>","more":"</p>\n<p>##一、能帮到一些开始学习ES的人</p>\n<p>首先，我自己是一个人独自的百度、google学习过来的。es是一个比较新的东西，网上的中文资料很有限。而且本人是做php开发的，es是基于lucene的，是用java开发的，所以php的资料就更少了。</p>\n<p>在学习的过程中我真的是爬过超多的坑，所以希望记录下这些“坑”，能帮助一些开始学习ES的人，后面的人少跳一些坑，我自己也希望有个人能在我跳坑之前提醒我，虽然都已经过去了。</p>\n<p>##二、希望帮助自己理清学到的东西</p>\n<p>我开始写这个《指南》并不是说我现在玩ES玩得多好，相反，我的对ES的了解才刚刚开始。<strong>我希望通过写下笔记的形式理清自己的知识节点。</strong>将之前学到的东西串起来，看自己哪有漏洞，再去边补边写。所以，这个《指南》肯定有很多的错误的和不足，希望发现的朋友能帮忙指出，不胜感激。</p>\n<p>也是因为本人目前技术有限的原因，本笔记的内容也写不了很深入，我自己yy的认为，这可能会让这个《指南》更加”亲民易懂“，更适合新人。</p>\n<p>##三、感谢在我学习过程中帮助过我的朋友。</p>\n<p>学习过程中我遇到许多的问题，很多问题度娘和gg都找不到，所以只能求助万能的群有和论坛的朋友。过程中，很多朋友帮我解答过很多的问题。</p>\n<p>每次我的问题得到解答的时候，我都暗暗的告诉自己，<strong>这是一种”接力“，当我得到答案的时候，就是我拿到“接力棒”的时候，我有义务将“它”，传下去。</strong>所以遇到我能解决的问题，我一定乐意去帮别人解决。我将这当做感谢那些帮助过我的人的方式。</p>\n<hr>\n<blockquote>\n<p><strong>关于笔记的几点说明：</strong></p>\n</blockquote>\n<ul>\n<li><p>由于本人对php比较熟悉，但在学习es的过程中顺便学了点java，所以关于涉及到代码的地方，我会用curl、php和java三种方式实现（特殊情况特殊说明）。</p>\n</li>\n<li><p>对于ES本人也是新手，所以笔记会不断的完善。</p>\n</li>\n<li><p>整个《指南》肯定会涉及到一些其他地方找到的资料，我会尽量的表明出处，如果有遗漏，有侵权的，请提醒，一定及时删改。</p>\n</li>\n</ul>\n<p><em><a href=\"http://www.jianshu.com/p/ede55b4110b1\" target=\"_blank\" rel=\"external\">《elasticsearch非权威指南》目录</a></em><br><em>本笔记欢迎转载，欢迎分享，转载分享不用通知作者。不过，如果可以的话希望能注明出处，看完文章还能点个赞。</em></p>"},{"title":"前端分页逻辑的思考","comments":1,"date":"2017-06-01T14:59:42.000Z","keywords":"分页 前端 逻辑","from":"http://www.jianshu.com/p/01cd6b0aca06","_content":"/* \n  * 今天偶有空闲，于是便想把之前随意放上的一段代码做个解释。\n  * 其实以现在的角度（过去了两三个月）来看这个标题，明显感觉有点装逼了。\n  * 主要原因是这个简单的问题还算不上思考\n  * 不过既然都写了，就继续装下去吧。\n  \n*/\n<!--more-->\n先上代码,项目里抽取的一段,基于tp的.主要看思路.\n## 代码\n```\n      <div class=\"pages\">\n            \t\t<if condition=\"$totalPage eq 1\"> <!-- 只用一页的情况 -->\n            \t\t<a href=\"/page/1\">1</a>\n            \t\t<elseif condition=\"($totalPage gt 1) AND ($totalPage elt 8)\"/><!-- 总页数是2到8也的情况 -->\n            \t\t\t<if condition=\"$page eq 1\">    <!-- 当前页是1的情况   -->      \t\t\t\t\t\n                                <for start=\"1\" end=\"$totalPage+1\">\n\t\t\t\t\t\t\t\t<a href=\"/page/{$i}\">{$i}</a>\t  \n\t\t\t\t\t\t\t\t</for>                         \n                                <a href=\"/page/{$page+1}\">下一页</a>\n                        <elseif condition=\"$page eq $totalPage \"/><!-- 当前页是最后一页的情况   --> \n                        \t\t<a href=\"/page/{$page-1}\">上一页</a>\n                                <for start=\"1\" end=\"$totalPage+1\">\n\t\t\t\t\t\t\t\t<a href=\"/page/{$i}\">{$i}</a>\t\n\t\t\t\t\t\t\t\t</for>                           \n      \t\t\t\t\t<else /><!-- 其他(不等于第一和最后一页的)情况   --> \n                              <a href=\"/page/{$page-1}\">上一页</a>\n                                <for start=\"1\" end=\"$totalPage+1\">\n\t\t\t\t\t\t\t\t<a href=\"/page/{$i}\">{$i}</a>\t\n\t\t\t\t\t\t\t\t</for>\n\t\t\t\t\t\t\t\t<a href=\"/page/{$page+1}\">下一页</a>\n                        </if>\n                    <elseif condition=\"$totalPage egt 8\"/>\n                    \t<if condition=\"$page eq 1\">    <!-- 当前页是1的情况   -->      \t\t\t\t\t\n                                <for start=\"1\" end=\"9\">\n\t\t\t\t\t\t\t\t<a href=\"/page/{$i}\">{$i}</a>\t  \n\t\t\t\t\t\t\t\t</for>                         \n                                <a href=\"/page/{$page+1}\">下一页</a>\n                    \t<elseif condition=\"($page gt 1) AND ($page lt 5)\"/> <!-- 当前页是2-4的情况   -->   \n            \t\t\t\t\t<a href=\"/page/{$page-1}\">上一页</a>\n                                <for start=\"1\" end=\"9\">\n\t\t\t\t\t\t\t\t<a href=\"/page/{$i}\">{$i}</a>\t\n\t\t\t\t\t\t\t\t</for>                           \n                                <a href=\"/page/{$page+1}\">下一页</a>\n                        <elseif condition=\"($page egt 5) AND ($page elt ($totalPage-3))\"/><!-- 当前页是5-倒数第4的情况   -->  \n                        \t\t<a href=\"/page/{$page-1}\">上一页</a>\n                                <for start=\"(-4)\" end=\"4\">\n\t\t\t\t\t\t\t\t<a href=\"/page/{$page+$i}\">{$page+$i}</a>\t\n\t\t\t\t\t\t\t\t</for>                           \n                                <a href=\"/page/{$page+1}\">下一页</a>\n                        <elseif condition=\"$page eq $totalPage\"/> <!-- 当前页是最后一页情况   -->\n\t\t\t\t\t\t\t\t<a href=\"/page/{$page-1}\">上一页</a>\n                                <for start=\"-7\" end=\"1\">\n\t\t\t\t\t\t\t\t<a href=\"/page/{$page+$i}\">{$page+$i}</a>\t\n\t\t\t\t\t\t\t\t</for>   \n                        <elseif condition=\"$page gt ($totalPage-3)\"/><!--当前页大于最大页数-3且不等于最大页数的情况。-->\n\t\t\t\t\t\t\t\t<a  href=\"/page/{$page-1}\">上一页</a>\n                                <for start=\"($totalPage-$page)-7\" end=\"($totalPage-$page)+1\">\n\t\t\t\t\t\t\t\t<a href=\"/page/{$page+$i}\">{$page+$i}</a>\t\n\t\t\t\t\t\t\t\t</for>                           \n                                <a href=\"/page/{$page+1}\">下一页</a>\n                        </if>        \n            \t\t</if>\n             </div>\n\n```\n其实在备注中已经很明显了。\n分为以下几种情况，总页面数：\n## 1.总页数只有一页的情况\n> 假设总页数只有1页的话，当前页肯定是1，且没有上一页或下一页\n\n## 2.总页数2页到8页的情况（假设共显示八页）\n> 首先，总页数小于8的话，所有的页面都应该显示。直接用for循环到最大页数。\n这种情况下，假设当前页是1的话，就没有上一页，有下一页。\n假设当前页是最后一页的话，有上一页，但是没有下一页。\n其他情况下就是上一页和下一页都有。\n\n## 3.总页数大于8页的情况\n> 这种情况稍微复杂，因为需要控制页面的输出\n假设当前页是1到5页的情况，显示的是1-8页。并且，当前页是1的情况没有上一页。\n分离出来就是：\n当前页为1的情况：没有上一页，有下一页，显示1-8页，\n当前页为2-5的情况，有上一页和下一页，显示1-8页，\n那么当页码大于5页的时候呢？？这个时候就需要考虑到三种种情况，\n一种是：①当前页小于最大页数-3的情况，这个情况下，就显示当前页-4页到当前页+3页，\n另一种是：②当前页大于最大页数-3且不等于最大页数的情况。\n最后就是：③当前页是最大页数的情况。\n这三种情况总结一下就是：\n情况①：显示上一页和下一页，页码是当前页-4页到当前页+3页\n情况②：显示上一页和下一页，显示当前（页总页数-当前页）-7 到（总页数-当前页）+1 ps：这种情况稍微要奇怪\n情况③：显示上一页，不显示下一页，（显示当前页-8）到 当前页。","source":"_posts/前端分页逻辑的思考.md","raw":"---\ntitle: 前端分页逻辑的思考\ncomments: true\ndate: 2017-06-01 22:59:42\nkeywords: 分页 前端 逻辑 \ntags: \n- 前端\n- PHP\n- 分页\nfrom: http://www.jianshu.com/p/01cd6b0aca06\n---\n/* \n  * 今天偶有空闲，于是便想把之前随意放上的一段代码做个解释。\n  * 其实以现在的角度（过去了两三个月）来看这个标题，明显感觉有点装逼了。\n  * 主要原因是这个简单的问题还算不上思考\n  * 不过既然都写了，就继续装下去吧。\n  \n*/\n<!--more-->\n先上代码,项目里抽取的一段,基于tp的.主要看思路.\n## 代码\n```\n      <div class=\"pages\">\n            \t\t<if condition=\"$totalPage eq 1\"> <!-- 只用一页的情况 -->\n            \t\t<a href=\"/page/1\">1</a>\n            \t\t<elseif condition=\"($totalPage gt 1) AND ($totalPage elt 8)\"/><!-- 总页数是2到8也的情况 -->\n            \t\t\t<if condition=\"$page eq 1\">    <!-- 当前页是1的情况   -->      \t\t\t\t\t\n                                <for start=\"1\" end=\"$totalPage+1\">\n\t\t\t\t\t\t\t\t<a href=\"/page/{$i}\">{$i}</a>\t  \n\t\t\t\t\t\t\t\t</for>                         \n                                <a href=\"/page/{$page+1}\">下一页</a>\n                        <elseif condition=\"$page eq $totalPage \"/><!-- 当前页是最后一页的情况   --> \n                        \t\t<a href=\"/page/{$page-1}\">上一页</a>\n                                <for start=\"1\" end=\"$totalPage+1\">\n\t\t\t\t\t\t\t\t<a href=\"/page/{$i}\">{$i}</a>\t\n\t\t\t\t\t\t\t\t</for>                           \n      \t\t\t\t\t<else /><!-- 其他(不等于第一和最后一页的)情况   --> \n                              <a href=\"/page/{$page-1}\">上一页</a>\n                                <for start=\"1\" end=\"$totalPage+1\">\n\t\t\t\t\t\t\t\t<a href=\"/page/{$i}\">{$i}</a>\t\n\t\t\t\t\t\t\t\t</for>\n\t\t\t\t\t\t\t\t<a href=\"/page/{$page+1}\">下一页</a>\n                        </if>\n                    <elseif condition=\"$totalPage egt 8\"/>\n                    \t<if condition=\"$page eq 1\">    <!-- 当前页是1的情况   -->      \t\t\t\t\t\n                                <for start=\"1\" end=\"9\">\n\t\t\t\t\t\t\t\t<a href=\"/page/{$i}\">{$i}</a>\t  \n\t\t\t\t\t\t\t\t</for>                         \n                                <a href=\"/page/{$page+1}\">下一页</a>\n                    \t<elseif condition=\"($page gt 1) AND ($page lt 5)\"/> <!-- 当前页是2-4的情况   -->   \n            \t\t\t\t\t<a href=\"/page/{$page-1}\">上一页</a>\n                                <for start=\"1\" end=\"9\">\n\t\t\t\t\t\t\t\t<a href=\"/page/{$i}\">{$i}</a>\t\n\t\t\t\t\t\t\t\t</for>                           \n                                <a href=\"/page/{$page+1}\">下一页</a>\n                        <elseif condition=\"($page egt 5) AND ($page elt ($totalPage-3))\"/><!-- 当前页是5-倒数第4的情况   -->  \n                        \t\t<a href=\"/page/{$page-1}\">上一页</a>\n                                <for start=\"(-4)\" end=\"4\">\n\t\t\t\t\t\t\t\t<a href=\"/page/{$page+$i}\">{$page+$i}</a>\t\n\t\t\t\t\t\t\t\t</for>                           \n                                <a href=\"/page/{$page+1}\">下一页</a>\n                        <elseif condition=\"$page eq $totalPage\"/> <!-- 当前页是最后一页情况   -->\n\t\t\t\t\t\t\t\t<a href=\"/page/{$page-1}\">上一页</a>\n                                <for start=\"-7\" end=\"1\">\n\t\t\t\t\t\t\t\t<a href=\"/page/{$page+$i}\">{$page+$i}</a>\t\n\t\t\t\t\t\t\t\t</for>   \n                        <elseif condition=\"$page gt ($totalPage-3)\"/><!--当前页大于最大页数-3且不等于最大页数的情况。-->\n\t\t\t\t\t\t\t\t<a  href=\"/page/{$page-1}\">上一页</a>\n                                <for start=\"($totalPage-$page)-7\" end=\"($totalPage-$page)+1\">\n\t\t\t\t\t\t\t\t<a href=\"/page/{$page+$i}\">{$page+$i}</a>\t\n\t\t\t\t\t\t\t\t</for>                           \n                                <a href=\"/page/{$page+1}\">下一页</a>\n                        </if>        \n            \t\t</if>\n             </div>\n\n```\n其实在备注中已经很明显了。\n分为以下几种情况，总页面数：\n## 1.总页数只有一页的情况\n> 假设总页数只有1页的话，当前页肯定是1，且没有上一页或下一页\n\n## 2.总页数2页到8页的情况（假设共显示八页）\n> 首先，总页数小于8的话，所有的页面都应该显示。直接用for循环到最大页数。\n这种情况下，假设当前页是1的话，就没有上一页，有下一页。\n假设当前页是最后一页的话，有上一页，但是没有下一页。\n其他情况下就是上一页和下一页都有。\n\n## 3.总页数大于8页的情况\n> 这种情况稍微复杂，因为需要控制页面的输出\n假设当前页是1到5页的情况，显示的是1-8页。并且，当前页是1的情况没有上一页。\n分离出来就是：\n当前页为1的情况：没有上一页，有下一页，显示1-8页，\n当前页为2-5的情况，有上一页和下一页，显示1-8页，\n那么当页码大于5页的时候呢？？这个时候就需要考虑到三种种情况，\n一种是：①当前页小于最大页数-3的情况，这个情况下，就显示当前页-4页到当前页+3页，\n另一种是：②当前页大于最大页数-3且不等于最大页数的情况。\n最后就是：③当前页是最大页数的情况。\n这三种情况总结一下就是：\n情况①：显示上一页和下一页，页码是当前页-4页到当前页+3页\n情况②：显示上一页和下一页，显示当前（页总页数-当前页）-7 到（总页数-当前页）+1 ps：这种情况稍微要奇怪\n情况③：显示上一页，不显示下一页，（显示当前页-8）到 当前页。","slug":"前端分页逻辑的思考","published":1,"updated":"2018-10-23T16:43:50.454Z","layout":"post","photos":[],"link":"","_id":"cjnom6wqz0014c0fy2rwhsh25","content":"<p>/* </p>\n<ul>\n<li>今天偶有空闲，于是便想把之前随意放上的一段代码做个解释。</li>\n<li>其实以现在的角度（过去了两三个月）来看这个标题，明显感觉有点装逼了。</li>\n<li>主要原因是这个简单的问题还算不上思考</li>\n<li>不过既然都写了，就继续装下去吧。</li>\n</ul>\n<p>*/<br><a id=\"more\"></a><br>先上代码,项目里抽取的一段,基于tp的.主要看思路.</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;pages&quot;&gt;</div><div class=\"line\">      \t\t&lt;if condition=&quot;$totalPage eq 1&quot;&gt; &lt;!-- 只用一页的情况 --&gt;</div><div class=\"line\">      \t\t&lt;a href=&quot;/page/1&quot;&gt;1&lt;/a&gt;</div><div class=\"line\">      \t\t&lt;elseif condition=&quot;($totalPage gt 1) AND ($totalPage elt 8)&quot;/&gt;&lt;!-- 总页数是2到8也的情况 --&gt;</div><div class=\"line\">      \t\t\t&lt;if condition=&quot;$page eq 1&quot;&gt;    &lt;!-- 当前页是1的情况   --&gt;      \t\t\t\t\t</div><div class=\"line\">                          &lt;for start=&quot;1&quot; end=&quot;$totalPage+1&quot;&gt;</div><div class=\"line\">\t\t&lt;a href=&quot;/page/&#123;$i&#125;&quot;&gt;&#123;$i&#125;&lt;/a&gt;\t  </div><div class=\"line\">\t\t&lt;/for&gt;                         </div><div class=\"line\">                          &lt;a href=&quot;/page/&#123;$page+1&#125;&quot;&gt;下一页&lt;/a&gt;</div><div class=\"line\">                  &lt;elseif condition=&quot;$page eq $totalPage &quot;/&gt;&lt;!-- 当前页是最后一页的情况   --&gt; </div><div class=\"line\">                  \t\t&lt;a href=&quot;/page/&#123;$page-1&#125;&quot;&gt;上一页&lt;/a&gt;</div><div class=\"line\">                          &lt;for start=&quot;1&quot; end=&quot;$totalPage+1&quot;&gt;</div><div class=\"line\">\t\t&lt;a href=&quot;/page/&#123;$i&#125;&quot;&gt;&#123;$i&#125;&lt;/a&gt;\t</div><div class=\"line\">\t\t&lt;/for&gt;                           </div><div class=\"line\">\t\t\t\t\t&lt;else /&gt;&lt;!-- 其他(不等于第一和最后一页的)情况   --&gt; </div><div class=\"line\">                        &lt;a href=&quot;/page/&#123;$page-1&#125;&quot;&gt;上一页&lt;/a&gt;</div><div class=\"line\">                          &lt;for start=&quot;1&quot; end=&quot;$totalPage+1&quot;&gt;</div><div class=\"line\">\t\t&lt;a href=&quot;/page/&#123;$i&#125;&quot;&gt;&#123;$i&#125;&lt;/a&gt;\t</div><div class=\"line\">\t\t&lt;/for&gt;</div><div class=\"line\">\t\t&lt;a href=&quot;/page/&#123;$page+1&#125;&quot;&gt;下一页&lt;/a&gt;</div><div class=\"line\">                  &lt;/if&gt;</div><div class=\"line\">              &lt;elseif condition=&quot;$totalPage egt 8&quot;/&gt;</div><div class=\"line\">              \t&lt;if condition=&quot;$page eq 1&quot;&gt;    &lt;!-- 当前页是1的情况   --&gt;      \t\t\t\t\t</div><div class=\"line\">                          &lt;for start=&quot;1&quot; end=&quot;9&quot;&gt;</div><div class=\"line\">\t\t&lt;a href=&quot;/page/&#123;$i&#125;&quot;&gt;&#123;$i&#125;&lt;/a&gt;\t  </div><div class=\"line\">\t\t&lt;/for&gt;                         </div><div class=\"line\">                          &lt;a href=&quot;/page/&#123;$page+1&#125;&quot;&gt;下一页&lt;/a&gt;</div><div class=\"line\">              \t&lt;elseif condition=&quot;($page gt 1) AND ($page lt 5)&quot;/&gt; &lt;!-- 当前页是2-4的情况   --&gt;   </div><div class=\"line\">      \t\t\t\t\t&lt;a href=&quot;/page/&#123;$page-1&#125;&quot;&gt;上一页&lt;/a&gt;</div><div class=\"line\">                          &lt;for start=&quot;1&quot; end=&quot;9&quot;&gt;</div><div class=\"line\">\t\t&lt;a href=&quot;/page/&#123;$i&#125;&quot;&gt;&#123;$i&#125;&lt;/a&gt;\t</div><div class=\"line\">\t\t&lt;/for&gt;                           </div><div class=\"line\">                          &lt;a href=&quot;/page/&#123;$page+1&#125;&quot;&gt;下一页&lt;/a&gt;</div><div class=\"line\">                  &lt;elseif condition=&quot;($page egt 5) AND ($page elt ($totalPage-3))&quot;/&gt;&lt;!-- 当前页是5-倒数第4的情况   --&gt;  </div><div class=\"line\">                  \t\t&lt;a href=&quot;/page/&#123;$page-1&#125;&quot;&gt;上一页&lt;/a&gt;</div><div class=\"line\">                          &lt;for start=&quot;(-4)&quot; end=&quot;4&quot;&gt;</div><div class=\"line\">\t\t&lt;a href=&quot;/page/&#123;$page+$i&#125;&quot;&gt;&#123;$page+$i&#125;&lt;/a&gt;\t</div><div class=\"line\">\t\t&lt;/for&gt;                           </div><div class=\"line\">                          &lt;a href=&quot;/page/&#123;$page+1&#125;&quot;&gt;下一页&lt;/a&gt;</div><div class=\"line\">                  &lt;elseif condition=&quot;$page eq $totalPage&quot;/&gt; &lt;!-- 当前页是最后一页情况   --&gt;</div><div class=\"line\">\t\t&lt;a href=&quot;/page/&#123;$page-1&#125;&quot;&gt;上一页&lt;/a&gt;</div><div class=\"line\">                          &lt;for start=&quot;-7&quot; end=&quot;1&quot;&gt;</div><div class=\"line\">\t\t&lt;a href=&quot;/page/&#123;$page+$i&#125;&quot;&gt;&#123;$page+$i&#125;&lt;/a&gt;\t</div><div class=\"line\">\t\t&lt;/for&gt;   </div><div class=\"line\">                  &lt;elseif condition=&quot;$page gt ($totalPage-3)&quot;/&gt;&lt;!--当前页大于最大页数-3且不等于最大页数的情况。--&gt;</div><div class=\"line\">\t\t&lt;a  href=&quot;/page/&#123;$page-1&#125;&quot;&gt;上一页&lt;/a&gt;</div><div class=\"line\">                          &lt;for start=&quot;($totalPage-$page)-7&quot; end=&quot;($totalPage-$page)+1&quot;&gt;</div><div class=\"line\">\t\t&lt;a href=&quot;/page/&#123;$page+$i&#125;&quot;&gt;&#123;$page+$i&#125;&lt;/a&gt;\t</div><div class=\"line\">\t\t&lt;/for&gt;                           </div><div class=\"line\">                          &lt;a href=&quot;/page/&#123;$page+1&#125;&quot;&gt;下一页&lt;/a&gt;</div><div class=\"line\">                  &lt;/if&gt;        </div><div class=\"line\">      \t\t&lt;/if&gt;</div><div class=\"line\">       &lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>其实在备注中已经很明显了。<br>分为以下几种情况，总页面数：</p>\n<h2 id=\"1-总页数只有一页的情况\"><a href=\"#1-总页数只有一页的情况\" class=\"headerlink\" title=\"1.总页数只有一页的情况\"></a>1.总页数只有一页的情况</h2><blockquote>\n<p>假设总页数只有1页的话，当前页肯定是1，且没有上一页或下一页</p>\n</blockquote>\n<h2 id=\"2-总页数2页到8页的情况（假设共显示八页）\"><a href=\"#2-总页数2页到8页的情况（假设共显示八页）\" class=\"headerlink\" title=\"2.总页数2页到8页的情况（假设共显示八页）\"></a>2.总页数2页到8页的情况（假设共显示八页）</h2><blockquote>\n<p>首先，总页数小于8的话，所有的页面都应该显示。直接用for循环到最大页数。<br>这种情况下，假设当前页是1的话，就没有上一页，有下一页。<br>假设当前页是最后一页的话，有上一页，但是没有下一页。<br>其他情况下就是上一页和下一页都有。</p>\n</blockquote>\n<h2 id=\"3-总页数大于8页的情况\"><a href=\"#3-总页数大于8页的情况\" class=\"headerlink\" title=\"3.总页数大于8页的情况\"></a>3.总页数大于8页的情况</h2><blockquote>\n<p>这种情况稍微复杂，因为需要控制页面的输出<br>假设当前页是1到5页的情况，显示的是1-8页。并且，当前页是1的情况没有上一页。<br>分离出来就是：<br>当前页为1的情况：没有上一页，有下一页，显示1-8页，<br>当前页为2-5的情况，有上一页和下一页，显示1-8页，<br>那么当页码大于5页的时候呢？？这个时候就需要考虑到三种种情况，<br>一种是：①当前页小于最大页数-3的情况，这个情况下，就显示当前页-4页到当前页+3页，<br>另一种是：②当前页大于最大页数-3且不等于最大页数的情况。<br>最后就是：③当前页是最大页数的情况。<br>这三种情况总结一下就是：<br>情况①：显示上一页和下一页，页码是当前页-4页到当前页+3页<br>情况②：显示上一页和下一页，显示当前（页总页数-当前页）-7 到（总页数-当前页）+1 ps：这种情况稍微要奇怪<br>情况③：显示上一页，不显示下一页，（显示当前页-8）到 当前页。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>/* </p>\n<ul>\n<li>今天偶有空闲，于是便想把之前随意放上的一段代码做个解释。</li>\n<li>其实以现在的角度（过去了两三个月）来看这个标题，明显感觉有点装逼了。</li>\n<li>主要原因是这个简单的问题还算不上思考</li>\n<li>不过既然都写了，就继续装下去吧。</li>\n</ul>\n<p>*/<br>","more":"<br>先上代码,项目里抽取的一段,基于tp的.主要看思路.</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;pages&quot;&gt;</div><div class=\"line\">      \t\t&lt;if condition=&quot;$totalPage eq 1&quot;&gt; &lt;!-- 只用一页的情况 --&gt;</div><div class=\"line\">      \t\t&lt;a href=&quot;/page/1&quot;&gt;1&lt;/a&gt;</div><div class=\"line\">      \t\t&lt;elseif condition=&quot;($totalPage gt 1) AND ($totalPage elt 8)&quot;/&gt;&lt;!-- 总页数是2到8也的情况 --&gt;</div><div class=\"line\">      \t\t\t&lt;if condition=&quot;$page eq 1&quot;&gt;    &lt;!-- 当前页是1的情况   --&gt;      \t\t\t\t\t</div><div class=\"line\">                          &lt;for start=&quot;1&quot; end=&quot;$totalPage+1&quot;&gt;</div><div class=\"line\">\t\t&lt;a href=&quot;/page/&#123;$i&#125;&quot;&gt;&#123;$i&#125;&lt;/a&gt;\t  </div><div class=\"line\">\t\t&lt;/for&gt;                         </div><div class=\"line\">                          &lt;a href=&quot;/page/&#123;$page+1&#125;&quot;&gt;下一页&lt;/a&gt;</div><div class=\"line\">                  &lt;elseif condition=&quot;$page eq $totalPage &quot;/&gt;&lt;!-- 当前页是最后一页的情况   --&gt; </div><div class=\"line\">                  \t\t&lt;a href=&quot;/page/&#123;$page-1&#125;&quot;&gt;上一页&lt;/a&gt;</div><div class=\"line\">                          &lt;for start=&quot;1&quot; end=&quot;$totalPage+1&quot;&gt;</div><div class=\"line\">\t\t&lt;a href=&quot;/page/&#123;$i&#125;&quot;&gt;&#123;$i&#125;&lt;/a&gt;\t</div><div class=\"line\">\t\t&lt;/for&gt;                           </div><div class=\"line\">\t\t\t\t\t&lt;else /&gt;&lt;!-- 其他(不等于第一和最后一页的)情况   --&gt; </div><div class=\"line\">                        &lt;a href=&quot;/page/&#123;$page-1&#125;&quot;&gt;上一页&lt;/a&gt;</div><div class=\"line\">                          &lt;for start=&quot;1&quot; end=&quot;$totalPage+1&quot;&gt;</div><div class=\"line\">\t\t&lt;a href=&quot;/page/&#123;$i&#125;&quot;&gt;&#123;$i&#125;&lt;/a&gt;\t</div><div class=\"line\">\t\t&lt;/for&gt;</div><div class=\"line\">\t\t&lt;a href=&quot;/page/&#123;$page+1&#125;&quot;&gt;下一页&lt;/a&gt;</div><div class=\"line\">                  &lt;/if&gt;</div><div class=\"line\">              &lt;elseif condition=&quot;$totalPage egt 8&quot;/&gt;</div><div class=\"line\">              \t&lt;if condition=&quot;$page eq 1&quot;&gt;    &lt;!-- 当前页是1的情况   --&gt;      \t\t\t\t\t</div><div class=\"line\">                          &lt;for start=&quot;1&quot; end=&quot;9&quot;&gt;</div><div class=\"line\">\t\t&lt;a href=&quot;/page/&#123;$i&#125;&quot;&gt;&#123;$i&#125;&lt;/a&gt;\t  </div><div class=\"line\">\t\t&lt;/for&gt;                         </div><div class=\"line\">                          &lt;a href=&quot;/page/&#123;$page+1&#125;&quot;&gt;下一页&lt;/a&gt;</div><div class=\"line\">              \t&lt;elseif condition=&quot;($page gt 1) AND ($page lt 5)&quot;/&gt; &lt;!-- 当前页是2-4的情况   --&gt;   </div><div class=\"line\">      \t\t\t\t\t&lt;a href=&quot;/page/&#123;$page-1&#125;&quot;&gt;上一页&lt;/a&gt;</div><div class=\"line\">                          &lt;for start=&quot;1&quot; end=&quot;9&quot;&gt;</div><div class=\"line\">\t\t&lt;a href=&quot;/page/&#123;$i&#125;&quot;&gt;&#123;$i&#125;&lt;/a&gt;\t</div><div class=\"line\">\t\t&lt;/for&gt;                           </div><div class=\"line\">                          &lt;a href=&quot;/page/&#123;$page+1&#125;&quot;&gt;下一页&lt;/a&gt;</div><div class=\"line\">                  &lt;elseif condition=&quot;($page egt 5) AND ($page elt ($totalPage-3))&quot;/&gt;&lt;!-- 当前页是5-倒数第4的情况   --&gt;  </div><div class=\"line\">                  \t\t&lt;a href=&quot;/page/&#123;$page-1&#125;&quot;&gt;上一页&lt;/a&gt;</div><div class=\"line\">                          &lt;for start=&quot;(-4)&quot; end=&quot;4&quot;&gt;</div><div class=\"line\">\t\t&lt;a href=&quot;/page/&#123;$page+$i&#125;&quot;&gt;&#123;$page+$i&#125;&lt;/a&gt;\t</div><div class=\"line\">\t\t&lt;/for&gt;                           </div><div class=\"line\">                          &lt;a href=&quot;/page/&#123;$page+1&#125;&quot;&gt;下一页&lt;/a&gt;</div><div class=\"line\">                  &lt;elseif condition=&quot;$page eq $totalPage&quot;/&gt; &lt;!-- 当前页是最后一页情况   --&gt;</div><div class=\"line\">\t\t&lt;a href=&quot;/page/&#123;$page-1&#125;&quot;&gt;上一页&lt;/a&gt;</div><div class=\"line\">                          &lt;for start=&quot;-7&quot; end=&quot;1&quot;&gt;</div><div class=\"line\">\t\t&lt;a href=&quot;/page/&#123;$page+$i&#125;&quot;&gt;&#123;$page+$i&#125;&lt;/a&gt;\t</div><div class=\"line\">\t\t&lt;/for&gt;   </div><div class=\"line\">                  &lt;elseif condition=&quot;$page gt ($totalPage-3)&quot;/&gt;&lt;!--当前页大于最大页数-3且不等于最大页数的情况。--&gt;</div><div class=\"line\">\t\t&lt;a  href=&quot;/page/&#123;$page-1&#125;&quot;&gt;上一页&lt;/a&gt;</div><div class=\"line\">                          &lt;for start=&quot;($totalPage-$page)-7&quot; end=&quot;($totalPage-$page)+1&quot;&gt;</div><div class=\"line\">\t\t&lt;a href=&quot;/page/&#123;$page+$i&#125;&quot;&gt;&#123;$page+$i&#125;&lt;/a&gt;\t</div><div class=\"line\">\t\t&lt;/for&gt;                           </div><div class=\"line\">                          &lt;a href=&quot;/page/&#123;$page+1&#125;&quot;&gt;下一页&lt;/a&gt;</div><div class=\"line\">                  &lt;/if&gt;        </div><div class=\"line\">      \t\t&lt;/if&gt;</div><div class=\"line\">       &lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>其实在备注中已经很明显了。<br>分为以下几种情况，总页面数：</p>\n<h2 id=\"1-总页数只有一页的情况\"><a href=\"#1-总页数只有一页的情况\" class=\"headerlink\" title=\"1.总页数只有一页的情况\"></a>1.总页数只有一页的情况</h2><blockquote>\n<p>假设总页数只有1页的话，当前页肯定是1，且没有上一页或下一页</p>\n</blockquote>\n<h2 id=\"2-总页数2页到8页的情况（假设共显示八页）\"><a href=\"#2-总页数2页到8页的情况（假设共显示八页）\" class=\"headerlink\" title=\"2.总页数2页到8页的情况（假设共显示八页）\"></a>2.总页数2页到8页的情况（假设共显示八页）</h2><blockquote>\n<p>首先，总页数小于8的话，所有的页面都应该显示。直接用for循环到最大页数。<br>这种情况下，假设当前页是1的话，就没有上一页，有下一页。<br>假设当前页是最后一页的话，有上一页，但是没有下一页。<br>其他情况下就是上一页和下一页都有。</p>\n</blockquote>\n<h2 id=\"3-总页数大于8页的情况\"><a href=\"#3-总页数大于8页的情况\" class=\"headerlink\" title=\"3.总页数大于8页的情况\"></a>3.总页数大于8页的情况</h2><blockquote>\n<p>这种情况稍微复杂，因为需要控制页面的输出<br>假设当前页是1到5页的情况，显示的是1-8页。并且，当前页是1的情况没有上一页。<br>分离出来就是：<br>当前页为1的情况：没有上一页，有下一页，显示1-8页，<br>当前页为2-5的情况，有上一页和下一页，显示1-8页，<br>那么当页码大于5页的时候呢？？这个时候就需要考虑到三种种情况，<br>一种是：①当前页小于最大页数-3的情况，这个情况下，就显示当前页-4页到当前页+3页，<br>另一种是：②当前页大于最大页数-3且不等于最大页数的情况。<br>最后就是：③当前页是最大页数的情况。<br>这三种情况总结一下就是：<br>情况①：显示上一页和下一页，页码是当前页-4页到当前页+3页<br>情况②：显示上一页和下一页，显示当前（页总页数-当前页）-7 到（总页数-当前页）+1 ps：这种情况稍微要奇怪<br>情况③：显示上一页，不显示下一页，（显示当前页-8）到 当前页。</p>\n</blockquote>"},{"title":"基本的shell操作HBase","date":"2017-05-20T12:07:31.000Z","desc":"基本的shell操作HBase","keywords":"HBase Hadoop 大数据 数据库","_content":"## **1.进入hbase shell console**\n> ```$HBASE_HOME/bin/hbase shell```如果有kerberos认证，需要事先使用相应的keytab进行一下认证（使用kinit命令），认证成功之后再使用hbase shell进入可以使用``whoami``命令可查看当前用户\n```\nhbase(main) > whoami\n```\n\n<!--more-->\n## **2表的管理**\n> 1）查看有哪些表hbase(main)> list\n\n> 2）创建表\n*语法*：\n```create <table>, {NAME => <family>, VERSIONS => <VERSIONS>}```\n例如：创建表t1，有两个family name：f1，f2，且版本数均为2\n```\nhbase(main)> create 't1',\n{NAME =>'f1', VERSIONS => 2},\n{NAME =>'f2' , VERSIONS => 2}\n```\n> 3）删除表\n分两步：首先disable，然后drop\n例如：删除表t1\n```\nhbase(main)> disable 't1'\nhbase(main)> drop 't1'\n```\n> 4）查看表的结构\n*语法*：``describe <table>``\n例如：查看表t1的结构\n```\nhbase(main)> describe 't1'\n```\n> 5）修改表结构修改表结构必须先disable\n*语法*：``alter 't1', {NAME => 'f1'}, {NAME => 'f2', METHOD => 'delete'}``\n例如：修改表test1的cf的TTL为180天\n```\nhbase(main)> disable 'test1'\nhbase(main)> alter 'test1'\n,{NAME=>'body' ,TTL=>'15552000'}\n,{NAME=>'meta', TTL=>'15552000'}\nhbase(main)>enable 'test1'\n```\n\n## **3.权限管理**\n> 1）分配权限# 语法 : grant <user> <permissions> <table> <column family> <column qualifier> 参数后面用逗号分隔\n**权限**用五个字母表示： \"RWXCA\".\n```READ('R'), WRITE('W'), EXEC('X'), CREATE('C'), ADMIN('A')```\n例如，给用户‘test'分配对表t1有读写的权限，\n```hbase(main)> grant 'test' , 'RW' , 't1' ```\n> 2）查看权限\n*语法*：``user_permission <table>``\n例如，查看表t1的权限列表\n```hbase(main)> user_permission 't1'```\n> 3）收回权限\n与分配权限类似,\n*语法*：```revoke <user> <table> <column family> <column qualifier>```\n例如，收回test用户在表t1上的权限\n```\nhbase(main)> revoke 'test' , 't1'\n```\n\n## **4.表数据的增删改查**\n> 1）添加数据\n语法：``put <table>,<rowkey>,<family:column>,<value>,<timestamp>``\n例如：给表t1的添加一行记录：rowkey是rowkey001，family name：f1，column name：col1，value：value01，timestamp：系统默认\n```\nhbase(main)> put 't1' ,\n 'rowkey001' ,\n 'f1:col1', 'value01'\n```\n用法比较单一。\n> 2）查询数据\na）查询某行记录\n*语法*：``get <table>,<rowkey>,[<family:column>,....]``\n例如：查询表t1，rowkey001中的f1下的col1的值\n```\nhbase(main)> get 't1',\n'rowkey001' , 'f1:col1'\n```\n 或者：\n```\nhbase(main)> get 't1' , 'rowkey001' ,\n{COLUMN=>'f1:col1'}\n```\n查询表t1，rowke002中的f1下的所有列值\n```\nhbase(main)> get 't1','rowkey001'\n```\nb）扫描表\n*语法*：``scan <table>, {COLUMNS => [ <family:column>,.... ], LIMIT => num}``\n另外，还可以添加STARTROW、TIMERANGE和FITLER等高级功能\n例如：扫描表t1的前5条数据\n```\nhbase(main)> scan 't1' , {LIMIT=>5}\n```\nc）查询表中的数据行数\n*语法*：```count <table>, {INTERVAL => intervalNum, CACHE => cacheNum}```\nINTERVAL设置多少行显示一次及对应的rowkey，默认1000；CACHE每次去取的缓存区大小，默认是10，调整该参数可提高查询速度.\n例如，查询表t1中的行数，每100条显示一次，缓存区为500\n```\nhbase(main)> count 't1',\n{INTERVAL => 100, CACHE => 500}\n```\n> 3）删除数据\na )删除行中的某个列值\n*语法*：``delete <table>, <rowkey>,  <family:column> , <timestamp>``,必须指定列名\n例如：删除表t1，rowkey001中的f1:col1的数据\n```\nhbase(main)> delete 't1' ,\n'rowkey001' ,'f1:col1'\n```\n注：将删除改行f1:col1列所有版本的数据\nb )删除行\n*语法*：```deleteall <table>, <rowkey>,  <family:column> , <timestamp>```，可以不指定列名，删除整行数据\n例如：删除表t1，rowk001的数据\n```\nhbase(main)> deleteall 't1','rowkey001'\n```\nc）删除表中的所有数据\n*语法*： ``truncate <table>``\n其具体过程是：``disable table -> drop table -> create table``\n例如：删除表t1的所有数据\n```\nhbase(main)> truncate 't1'\n```\n\n## **5.Region管理**\n> 1）移动region\n*语法*:``move 'encodeRegionName', 'ServerName'``\n``encodeRegionName``指的``regioName``后面的编码，``ServerName``指的是``master-status``的``Region Servers``列表\n示例\n```\nhbase(main)>move \n'4343995a58be8e5bbc739af1e91cd72d' ,\n'db-41.xxx.xxx.org,60020,1390274516739'\n```\n> 2）开启/关闭region\n*语法*：``balance_switch true|false``\n```\nhbase(main)> balance_switch\n```\n> 3）手动split\n*语法*：``split 'regionName', 'splitKey'``\n\n> 4）手动触发major compaction\n*语法*：``Compact all regions in a table:``\n```\nhbase> major_compact 't1'\nCompact an entire region:\nhbase> major_compact 'r1'\nCompact a single column family within a region:\nhbase> major_compact 'r1', 'c1'\nCompact a single column family within a table:\nhbase> major_compact 't1', 'c1'\n```\n## **6.配置管理及节点重启**\n> 1）修改hdfs配置hdfs配置位置：\n```\n/etc/hadoop/conf\n```\n 同步hdfs配置\n``\ncat /home/hadoop/slaves | xargs -i -t scp /etc/hadoop/conf/hdfs-site.xml hadoop@{}: /etc/hadoop/conf/hdfs-site.xml``\n关闭：\n``\ncat /home/hadoop/slaves | xargs -i -t ssh hadoop@{} \"sudo /home/hadoop/cdh4/hadoop-2.0.0-cdh4.2.1/sbin/hadoop-daemon.sh --config /etc/hadoop/conf stop datanode\"\n``\n启动：\n``cat /home/hadoop/slaves | xargs -i -t ssh hadoop@{} \"sudo /home/hadoop/cdh4/hadoop-2.0.0-cdh4.2.1/sbin/hadoop-daemon.sh --config /etc/hadoop/conf start datanode\"\n``\n> 2）修改hbase配置hbase配置位置：\n同步hbase配置\n``cat /home/hadoop/hbase/conf/regionservers | xargs -i -t scp /home/hadoop/hbase/conf/hbase-site.xml hadoop@{}:/home/hadoop/hbase/conf/hbase-site.xml\n``\ngraceful重启\n``\ncd ~/hbase\nbin/graceful_stop.sh --restart --reload --debug inspurXXX.xxx.xxx.org \n``","source":"_posts/基本的shell操作HBase.md","raw":"---\ntitle: 基本的shell操作HBase\ndate: 2017-05-20 20:07:31\ntags:\n  - HBase\n  - Hadoop\n  - 大数据\n  - shell\n  - 数据库\ndesc: 基本的shell操作HBase\nkeywords: HBase Hadoop 大数据 数据库 \ncategories:\n- 数据库\n\n---\n## **1.进入hbase shell console**\n> ```$HBASE_HOME/bin/hbase shell```如果有kerberos认证，需要事先使用相应的keytab进行一下认证（使用kinit命令），认证成功之后再使用hbase shell进入可以使用``whoami``命令可查看当前用户\n```\nhbase(main) > whoami\n```\n\n<!--more-->\n## **2表的管理**\n> 1）查看有哪些表hbase(main)> list\n\n> 2）创建表\n*语法*：\n```create <table>, {NAME => <family>, VERSIONS => <VERSIONS>}```\n例如：创建表t1，有两个family name：f1，f2，且版本数均为2\n```\nhbase(main)> create 't1',\n{NAME =>'f1', VERSIONS => 2},\n{NAME =>'f2' , VERSIONS => 2}\n```\n> 3）删除表\n分两步：首先disable，然后drop\n例如：删除表t1\n```\nhbase(main)> disable 't1'\nhbase(main)> drop 't1'\n```\n> 4）查看表的结构\n*语法*：``describe <table>``\n例如：查看表t1的结构\n```\nhbase(main)> describe 't1'\n```\n> 5）修改表结构修改表结构必须先disable\n*语法*：``alter 't1', {NAME => 'f1'}, {NAME => 'f2', METHOD => 'delete'}``\n例如：修改表test1的cf的TTL为180天\n```\nhbase(main)> disable 'test1'\nhbase(main)> alter 'test1'\n,{NAME=>'body' ,TTL=>'15552000'}\n,{NAME=>'meta', TTL=>'15552000'}\nhbase(main)>enable 'test1'\n```\n\n## **3.权限管理**\n> 1）分配权限# 语法 : grant <user> <permissions> <table> <column family> <column qualifier> 参数后面用逗号分隔\n**权限**用五个字母表示： \"RWXCA\".\n```READ('R'), WRITE('W'), EXEC('X'), CREATE('C'), ADMIN('A')```\n例如，给用户‘test'分配对表t1有读写的权限，\n```hbase(main)> grant 'test' , 'RW' , 't1' ```\n> 2）查看权限\n*语法*：``user_permission <table>``\n例如，查看表t1的权限列表\n```hbase(main)> user_permission 't1'```\n> 3）收回权限\n与分配权限类似,\n*语法*：```revoke <user> <table> <column family> <column qualifier>```\n例如，收回test用户在表t1上的权限\n```\nhbase(main)> revoke 'test' , 't1'\n```\n\n## **4.表数据的增删改查**\n> 1）添加数据\n语法：``put <table>,<rowkey>,<family:column>,<value>,<timestamp>``\n例如：给表t1的添加一行记录：rowkey是rowkey001，family name：f1，column name：col1，value：value01，timestamp：系统默认\n```\nhbase(main)> put 't1' ,\n 'rowkey001' ,\n 'f1:col1', 'value01'\n```\n用法比较单一。\n> 2）查询数据\na）查询某行记录\n*语法*：``get <table>,<rowkey>,[<family:column>,....]``\n例如：查询表t1，rowkey001中的f1下的col1的值\n```\nhbase(main)> get 't1',\n'rowkey001' , 'f1:col1'\n```\n 或者：\n```\nhbase(main)> get 't1' , 'rowkey001' ,\n{COLUMN=>'f1:col1'}\n```\n查询表t1，rowke002中的f1下的所有列值\n```\nhbase(main)> get 't1','rowkey001'\n```\nb）扫描表\n*语法*：``scan <table>, {COLUMNS => [ <family:column>,.... ], LIMIT => num}``\n另外，还可以添加STARTROW、TIMERANGE和FITLER等高级功能\n例如：扫描表t1的前5条数据\n```\nhbase(main)> scan 't1' , {LIMIT=>5}\n```\nc）查询表中的数据行数\n*语法*：```count <table>, {INTERVAL => intervalNum, CACHE => cacheNum}```\nINTERVAL设置多少行显示一次及对应的rowkey，默认1000；CACHE每次去取的缓存区大小，默认是10，调整该参数可提高查询速度.\n例如，查询表t1中的行数，每100条显示一次，缓存区为500\n```\nhbase(main)> count 't1',\n{INTERVAL => 100, CACHE => 500}\n```\n> 3）删除数据\na )删除行中的某个列值\n*语法*：``delete <table>, <rowkey>,  <family:column> , <timestamp>``,必须指定列名\n例如：删除表t1，rowkey001中的f1:col1的数据\n```\nhbase(main)> delete 't1' ,\n'rowkey001' ,'f1:col1'\n```\n注：将删除改行f1:col1列所有版本的数据\nb )删除行\n*语法*：```deleteall <table>, <rowkey>,  <family:column> , <timestamp>```，可以不指定列名，删除整行数据\n例如：删除表t1，rowk001的数据\n```\nhbase(main)> deleteall 't1','rowkey001'\n```\nc）删除表中的所有数据\n*语法*： ``truncate <table>``\n其具体过程是：``disable table -> drop table -> create table``\n例如：删除表t1的所有数据\n```\nhbase(main)> truncate 't1'\n```\n\n## **5.Region管理**\n> 1）移动region\n*语法*:``move 'encodeRegionName', 'ServerName'``\n``encodeRegionName``指的``regioName``后面的编码，``ServerName``指的是``master-status``的``Region Servers``列表\n示例\n```\nhbase(main)>move \n'4343995a58be8e5bbc739af1e91cd72d' ,\n'db-41.xxx.xxx.org,60020,1390274516739'\n```\n> 2）开启/关闭region\n*语法*：``balance_switch true|false``\n```\nhbase(main)> balance_switch\n```\n> 3）手动split\n*语法*：``split 'regionName', 'splitKey'``\n\n> 4）手动触发major compaction\n*语法*：``Compact all regions in a table:``\n```\nhbase> major_compact 't1'\nCompact an entire region:\nhbase> major_compact 'r1'\nCompact a single column family within a region:\nhbase> major_compact 'r1', 'c1'\nCompact a single column family within a table:\nhbase> major_compact 't1', 'c1'\n```\n## **6.配置管理及节点重启**\n> 1）修改hdfs配置hdfs配置位置：\n```\n/etc/hadoop/conf\n```\n 同步hdfs配置\n``\ncat /home/hadoop/slaves | xargs -i -t scp /etc/hadoop/conf/hdfs-site.xml hadoop@{}: /etc/hadoop/conf/hdfs-site.xml``\n关闭：\n``\ncat /home/hadoop/slaves | xargs -i -t ssh hadoop@{} \"sudo /home/hadoop/cdh4/hadoop-2.0.0-cdh4.2.1/sbin/hadoop-daemon.sh --config /etc/hadoop/conf stop datanode\"\n``\n启动：\n``cat /home/hadoop/slaves | xargs -i -t ssh hadoop@{} \"sudo /home/hadoop/cdh4/hadoop-2.0.0-cdh4.2.1/sbin/hadoop-daemon.sh --config /etc/hadoop/conf start datanode\"\n``\n> 2）修改hbase配置hbase配置位置：\n同步hbase配置\n``cat /home/hadoop/hbase/conf/regionservers | xargs -i -t scp /home/hadoop/hbase/conf/hbase-site.xml hadoop@{}:/home/hadoop/hbase/conf/hbase-site.xml\n``\ngraceful重启\n``\ncd ~/hbase\nbin/graceful_stop.sh --restart --reload --debug inspurXXX.xxx.xxx.org \n``","slug":"基本的shell操作HBase","published":1,"updated":"2017-06-25T10:28:18.566Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnom6wr50019c0fyy7kknjyp","content":"<h2 id=\"1-进入hbase-shell-console\"><a href=\"#1-进入hbase-shell-console\" class=\"headerlink\" title=\"1.进入hbase shell console\"></a><strong>1.进入hbase shell console</strong></h2><blockquote>\n<figure class=\"highlight plain\"><figcaption><span>shell```如果有kerberos认证，需要事先使用相应的keytab进行一下认证（使用kinit命令），认证成功之后再使用hbase shell进入可以使用``whoami``命令可查看当前用户</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">```</div><div class=\"line\">hbase(main) &gt; whoami</div></pre></td></tr></table></figure>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"2表的管理\"><a href=\"#2表的管理\" class=\"headerlink\" title=\"2表的管理\"></a><strong>2表的管理</strong></h2><blockquote>\n<p>1）查看有哪些表hbase(main)&gt; list</p>\n<p>2）创建表<br><em>语法</em>：<br><figure class=\"highlight plain\"><figcaption><span><table>, &#123;NAME => <family>, VERSIONS => <versions>&#125;```</versions></family></table></span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">例如：创建表t1，有两个family name：f1，f2，且版本数均为2</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>hbase(main)&gt; create ‘t1’,<br>{NAME =&gt;’f1’, VERSIONS =&gt; 2},<br>{NAME =&gt;’f2’ , VERSIONS =&gt; 2}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; 3）删除表</div><div class=\"line\">分两步：首先disable，然后drop</div><div class=\"line\">例如：删除表t1</div></pre></td></tr></table></figure></p>\n<p>hbase(main)&gt; disable ‘t1’<br>hbase(main)&gt; drop ‘t1’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; 4）查看表的结构</div><div class=\"line\">*语法*：``describe &lt;table&gt;``</div><div class=\"line\">例如：查看表t1的结构</div></pre></td></tr></table></figure></p>\n<p>hbase(main)&gt; describe ‘t1’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; 5）修改表结构修改表结构必须先disable</div><div class=\"line\">*语法*：``alter &apos;t1&apos;, &#123;NAME =&gt; &apos;f1&apos;&#125;, &#123;NAME =&gt; &apos;f2&apos;, METHOD =&gt; &apos;delete&apos;&#125;``</div><div class=\"line\">例如：修改表test1的cf的TTL为180天</div></pre></td></tr></table></figure></p>\n<p>hbase(main)&gt; disable ‘test1’<br>hbase(main)&gt; alter ‘test1’<br>,{NAME=&gt;’body’ ,TTL=&gt;’15552000’}<br>,{NAME=&gt;’meta’, TTL=&gt;’15552000’}<br>hbase(main)&gt;enable ‘test1’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">## **3.权限管理**</div><div class=\"line\">&gt; 1）分配权限# 语法 : grant &lt;user&gt; &lt;permissions&gt; &lt;table&gt; &lt;column family&gt; &lt;column qualifier&gt; 参数后面用逗号分隔</div><div class=\"line\">**权限**用五个字母表示： &quot;RWXCA&quot;.</div><div class=\"line\">```READ(&apos;R&apos;), WRITE(&apos;W&apos;), EXEC(&apos;X&apos;), CREATE(&apos;C&apos;), ADMIN(&apos;A&apos;)</div></pre></td></tr></table></figure></p>\n<p>例如，给用户‘test’分配对表t1有读写的权限，<br><figure class=\"highlight plain\"><figcaption><span>grant 'test' , 'RW' , 't1' ```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; 2）查看权限</div><div class=\"line\">*语法*：``user_permission &lt;table&gt;``</div><div class=\"line\">例如，查看表t1的权限列表</div><div class=\"line\">```hbase(main)&gt; user_permission &apos;t1&apos;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>3）收回权限<br>与分配权限类似,<br><em>语法</em>：<figure class=\"highlight plain\"><figcaption><span><user> <table> <column family=\"\"> <column qualifier=\"\">```</column></column></table></user></span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">例如，收回test用户在表t1上的权限</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>hbase(main)&gt; revoke ‘test’ , ‘t1’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">## **4.表数据的增删改查**</div><div class=\"line\">&gt; 1）添加数据</div><div class=\"line\">语法：``put &lt;table&gt;,&lt;rowkey&gt;,&lt;family:column&gt;,&lt;value&gt;,&lt;timestamp&gt;``</div><div class=\"line\">例如：给表t1的添加一行记录：rowkey是rowkey001，family name：f1，column name：col1，value：value01，timestamp：系统默认</div></pre></td></tr></table></figure></p>\n<p>hbase(main)&gt; put ‘t1’ ,<br> ‘rowkey001’ ,<br> ‘f1:col1’, ‘value01’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">用法比较单一。</div><div class=\"line\">&gt; 2）查询数据</div><div class=\"line\">a）查询某行记录</div><div class=\"line\">*语法*：``get &lt;table&gt;,&lt;rowkey&gt;,[&lt;family:column&gt;,....]``</div><div class=\"line\">例如：查询表t1，rowkey001中的f1下的col1的值</div></pre></td></tr></table></figure></p>\n<p>hbase(main)&gt; get ‘t1’,<br>‘rowkey001’ , ‘f1:col1’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">或者：</div></pre></td></tr></table></figure></p>\n<p>hbase(main)&gt; get ‘t1’ , ‘rowkey001’ ,<br>{COLUMN=&gt;’f1:col1’}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">查询表t1，rowke002中的f1下的所有列值</div></pre></td></tr></table></figure></p>\n<p>hbase(main)&gt; get ‘t1’,’rowkey001’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">b）扫描表</div><div class=\"line\">*语法*：``scan &lt;table&gt;, &#123;COLUMNS =&gt; [ &lt;family:column&gt;,.... ], LIMIT =&gt; num&#125;``</div><div class=\"line\">另外，还可以添加STARTROW、TIMERANGE和FITLER等高级功能</div><div class=\"line\">例如：扫描表t1的前5条数据</div></pre></td></tr></table></figure></p>\n<p>hbase(main)&gt; scan ‘t1’ , {LIMIT=&gt;5}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">c）查询表中的数据行数</div><div class=\"line\">*语法*：```count &lt;table&gt;, &#123;INTERVAL =&gt; intervalNum, CACHE =&gt; cacheNum&#125;</div></pre></td></tr></table></figure></p>\n<p>INTERVAL设置多少行显示一次及对应的rowkey，默认1000；CACHE每次去取的缓存区大小，默认是10，调整该参数可提高查询速度.<br>例如，查询表t1中的行数，每100条显示一次，缓存区为500<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbase(main)&gt; count &apos;t1&apos;,</div><div class=\"line\">&#123;INTERVAL =&gt; 100, CACHE =&gt; 500&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>3）删除数据<br>a )删除行中的某个列值<br><em>语法</em>：<code>delete &lt;table&gt;, &lt;rowkey&gt;,  &lt;family:column&gt; , &lt;timestamp&gt;</code>,必须指定列名<br>例如：删除表t1，rowkey001中的f1:col1的数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbase(main)&gt; delete &apos;t1&apos; ,</div><div class=\"line\">&apos;rowkey001&apos; ,&apos;f1:col1&apos;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>注：将删除改行f1:col1列所有版本的数据<br>b )删除行<br><em>语法</em>：<figure class=\"highlight plain\"><figcaption><span><table>, <rowkey>,  <family:column> , <timestamp>```，可以不指定列名，删除整行数据</timestamp></family:column></rowkey></table></span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">例如：删除表t1，rowk001的数据</div></pre></td></tr></table></figure></p>\n<p>hbase(main)&gt; deleteall ‘t1’,’rowkey001’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">c）删除表中的所有数据</div><div class=\"line\">*语法*： ``truncate &lt;table&gt;``</div><div class=\"line\">其具体过程是：``disable table -&gt; drop table -&gt; create table``</div><div class=\"line\">例如：删除表t1的所有数据</div></pre></td></tr></table></figure></p>\n<p>hbase(main)&gt; truncate ‘t1’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">## **5.Region管理**</div><div class=\"line\">&gt; 1）移动region</div><div class=\"line\">*语法*:``move &apos;encodeRegionName&apos;, &apos;ServerName&apos;``</div><div class=\"line\">``encodeRegionName``指的``regioName``后面的编码，``ServerName``指的是``master-status``的``Region Servers``列表</div><div class=\"line\">示例</div></pre></td></tr></table></figure></p>\n<p>hbase(main)&gt;move<br>‘4343995a58be8e5bbc739af1e91cd72d’ ,<br>‘db-41.xxx.xxx.org,60020,1390274516739’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; 2）开启/关闭region</div><div class=\"line\">*语法*：``balance_switch true|false``</div></pre></td></tr></table></figure></p>\n<p>hbase(main)&gt; balance_switch<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; 3）手动split</div><div class=\"line\">*语法*：``split &apos;regionName&apos;, &apos;splitKey&apos;``</div><div class=\"line\"></div><div class=\"line\">&gt; 4）手动触发major compaction</div><div class=\"line\">*语法*：``Compact all regions in a table:``</div></pre></td></tr></table></figure></p>\n<p>hbase&gt; major_compact ‘t1’<br>Compact an entire region:<br>hbase&gt; major_compact ‘r1’<br>Compact a single column family within a region:<br>hbase&gt; major_compact ‘r1’, ‘c1’<br>Compact a single column family within a table:<br>hbase&gt; major_compact ‘t1’, ‘c1’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">## **6.配置管理及节点重启**</div><div class=\"line\">&gt; 1）修改hdfs配置hdfs配置位置：</div></pre></td></tr></table></figure></p>\n<p>/etc/hadoop/conf<br><code>`\n 同步hdfs配置</code><br>cat /home/hadoop/slaves | xargs -i -t scp /etc/hadoop/conf/hdfs-site.xml hadoop@{}: /etc/hadoop/conf/hdfs-site.xml<code>关闭：</code><br>cat /home/hadoop/slaves | xargs -i -t ssh hadoop@{} “sudo /home/hadoop/cdh4/hadoop-2.0.0-cdh4.2.1/sbin/hadoop-daemon.sh –config /etc/hadoop/conf stop datanode”<br><code>启动：</code>cat /home/hadoop/slaves | xargs -i -t ssh hadoop@{} “sudo /home/hadoop/cdh4/hadoop-2.0.0-cdh4.2.1/sbin/hadoop-daemon.sh –config /etc/hadoop/conf start datanode”<br>``</p>\n<blockquote>\n<p>2）修改hbase配置hbase配置位置：<br>同步hbase配置<br><code>cat /home/hadoop/hbase/conf/regionservers | xargs -i -t scp /home/hadoop/hbase/conf/hbase-site.xml hadoop@{}:/home/hadoop/hbase/conf/hbase-site.xml</code><br>graceful重启<br><code>cd ~/hbase\nbin/graceful_stop.sh --restart --reload --debug inspurXXX.xxx.xxx.org</code></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"1-进入hbase-shell-console\"><a href=\"#1-进入hbase-shell-console\" class=\"headerlink\" title=\"1.进入hbase shell console\"></a><strong>1.进入hbase shell console</strong></h2><blockquote>\n<figure class=\"highlight plain\"><figcaption><span>shell```如果有kerberos认证，需要事先使用相应的keytab进行一下认证（使用kinit命令），认证成功之后再使用hbase shell进入可以使用``whoami``命令可查看当前用户</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">```</div><div class=\"line\">hbase(main) &gt; whoami</div></pre></td></tr></table></figure>\n</blockquote>","more":"<h2 id=\"2表的管理\"><a href=\"#2表的管理\" class=\"headerlink\" title=\"2表的管理\"></a><strong>2表的管理</strong></h2><blockquote>\n<p>1）查看有哪些表hbase(main)&gt; list</p>\n<p>2）创建表<br><em>语法</em>：<br><figure class=\"highlight plain\"><figcaption><span><table>, &#123;NAME => <family>, VERSIONS => <versions>&#125;```</versions></family></table></span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">例如：创建表t1，有两个family name：f1，f2，且版本数均为2</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>hbase(main)&gt; create ‘t1’,<br>{NAME =&gt;’f1’, VERSIONS =&gt; 2},<br>{NAME =&gt;’f2’ , VERSIONS =&gt; 2}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; 3）删除表</div><div class=\"line\">分两步：首先disable，然后drop</div><div class=\"line\">例如：删除表t1</div></pre></td></tr></table></figure></p>\n<p>hbase(main)&gt; disable ‘t1’<br>hbase(main)&gt; drop ‘t1’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; 4）查看表的结构</div><div class=\"line\">*语法*：``describe &lt;table&gt;``</div><div class=\"line\">例如：查看表t1的结构</div></pre></td></tr></table></figure></p>\n<p>hbase(main)&gt; describe ‘t1’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; 5）修改表结构修改表结构必须先disable</div><div class=\"line\">*语法*：``alter &apos;t1&apos;, &#123;NAME =&gt; &apos;f1&apos;&#125;, &#123;NAME =&gt; &apos;f2&apos;, METHOD =&gt; &apos;delete&apos;&#125;``</div><div class=\"line\">例如：修改表test1的cf的TTL为180天</div></pre></td></tr></table></figure></p>\n<p>hbase(main)&gt; disable ‘test1’<br>hbase(main)&gt; alter ‘test1’<br>,{NAME=&gt;’body’ ,TTL=&gt;’15552000’}<br>,{NAME=&gt;’meta’, TTL=&gt;’15552000’}<br>hbase(main)&gt;enable ‘test1’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">## **3.权限管理**</div><div class=\"line\">&gt; 1）分配权限# 语法 : grant &lt;user&gt; &lt;permissions&gt; &lt;table&gt; &lt;column family&gt; &lt;column qualifier&gt; 参数后面用逗号分隔</div><div class=\"line\">**权限**用五个字母表示： &quot;RWXCA&quot;.</div><div class=\"line\">```READ(&apos;R&apos;), WRITE(&apos;W&apos;), EXEC(&apos;X&apos;), CREATE(&apos;C&apos;), ADMIN(&apos;A&apos;)</div></pre></td></tr></table></figure></p>\n<p>例如，给用户‘test’分配对表t1有读写的权限，<br><figure class=\"highlight plain\"><figcaption><span>grant 'test' , 'RW' , 't1' ```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; 2）查看权限</div><div class=\"line\">*语法*：``user_permission &lt;table&gt;``</div><div class=\"line\">例如，查看表t1的权限列表</div><div class=\"line\">```hbase(main)&gt; user_permission &apos;t1&apos;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>3）收回权限<br>与分配权限类似,<br><em>语法</em>：<figure class=\"highlight plain\"><figcaption><span><user> <table> <column family=\"\"> <column qualifier=\"\">```</column></column></table></user></span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">例如，收回test用户在表t1上的权限</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>hbase(main)&gt; revoke ‘test’ , ‘t1’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">## **4.表数据的增删改查**</div><div class=\"line\">&gt; 1）添加数据</div><div class=\"line\">语法：``put &lt;table&gt;,&lt;rowkey&gt;,&lt;family:column&gt;,&lt;value&gt;,&lt;timestamp&gt;``</div><div class=\"line\">例如：给表t1的添加一行记录：rowkey是rowkey001，family name：f1，column name：col1，value：value01，timestamp：系统默认</div></pre></td></tr></table></figure></p>\n<p>hbase(main)&gt; put ‘t1’ ,<br> ‘rowkey001’ ,<br> ‘f1:col1’, ‘value01’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">用法比较单一。</div><div class=\"line\">&gt; 2）查询数据</div><div class=\"line\">a）查询某行记录</div><div class=\"line\">*语法*：``get &lt;table&gt;,&lt;rowkey&gt;,[&lt;family:column&gt;,....]``</div><div class=\"line\">例如：查询表t1，rowkey001中的f1下的col1的值</div></pre></td></tr></table></figure></p>\n<p>hbase(main)&gt; get ‘t1’,<br>‘rowkey001’ , ‘f1:col1’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">或者：</div></pre></td></tr></table></figure></p>\n<p>hbase(main)&gt; get ‘t1’ , ‘rowkey001’ ,<br>{COLUMN=&gt;’f1:col1’}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">查询表t1，rowke002中的f1下的所有列值</div></pre></td></tr></table></figure></p>\n<p>hbase(main)&gt; get ‘t1’,’rowkey001’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">b）扫描表</div><div class=\"line\">*语法*：``scan &lt;table&gt;, &#123;COLUMNS =&gt; [ &lt;family:column&gt;,.... ], LIMIT =&gt; num&#125;``</div><div class=\"line\">另外，还可以添加STARTROW、TIMERANGE和FITLER等高级功能</div><div class=\"line\">例如：扫描表t1的前5条数据</div></pre></td></tr></table></figure></p>\n<p>hbase(main)&gt; scan ‘t1’ , {LIMIT=&gt;5}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">c）查询表中的数据行数</div><div class=\"line\">*语法*：```count &lt;table&gt;, &#123;INTERVAL =&gt; intervalNum, CACHE =&gt; cacheNum&#125;</div></pre></td></tr></table></figure></p>\n<p>INTERVAL设置多少行显示一次及对应的rowkey，默认1000；CACHE每次去取的缓存区大小，默认是10，调整该参数可提高查询速度.<br>例如，查询表t1中的行数，每100条显示一次，缓存区为500<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbase(main)&gt; count &apos;t1&apos;,</div><div class=\"line\">&#123;INTERVAL =&gt; 100, CACHE =&gt; 500&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>3）删除数据<br>a )删除行中的某个列值<br><em>语法</em>：<code>delete &lt;table&gt;, &lt;rowkey&gt;,  &lt;family:column&gt; , &lt;timestamp&gt;</code>,必须指定列名<br>例如：删除表t1，rowkey001中的f1:col1的数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hbase(main)&gt; delete &apos;t1&apos; ,</div><div class=\"line\">&apos;rowkey001&apos; ,&apos;f1:col1&apos;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>注：将删除改行f1:col1列所有版本的数据<br>b )删除行<br><em>语法</em>：<figure class=\"highlight plain\"><figcaption><span><table>, <rowkey>,  <family:column> , <timestamp>```，可以不指定列名，删除整行数据</timestamp></family:column></rowkey></table></span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">例如：删除表t1，rowk001的数据</div></pre></td></tr></table></figure></p>\n<p>hbase(main)&gt; deleteall ‘t1’,’rowkey001’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">c）删除表中的所有数据</div><div class=\"line\">*语法*： ``truncate &lt;table&gt;``</div><div class=\"line\">其具体过程是：``disable table -&gt; drop table -&gt; create table``</div><div class=\"line\">例如：删除表t1的所有数据</div></pre></td></tr></table></figure></p>\n<p>hbase(main)&gt; truncate ‘t1’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">## **5.Region管理**</div><div class=\"line\">&gt; 1）移动region</div><div class=\"line\">*语法*:``move &apos;encodeRegionName&apos;, &apos;ServerName&apos;``</div><div class=\"line\">``encodeRegionName``指的``regioName``后面的编码，``ServerName``指的是``master-status``的``Region Servers``列表</div><div class=\"line\">示例</div></pre></td></tr></table></figure></p>\n<p>hbase(main)&gt;move<br>‘4343995a58be8e5bbc739af1e91cd72d’ ,<br>‘db-41.xxx.xxx.org,60020,1390274516739’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; 2）开启/关闭region</div><div class=\"line\">*语法*：``balance_switch true|false``</div></pre></td></tr></table></figure></p>\n<p>hbase(main)&gt; balance_switch<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; 3）手动split</div><div class=\"line\">*语法*：``split &apos;regionName&apos;, &apos;splitKey&apos;``</div><div class=\"line\"></div><div class=\"line\">&gt; 4）手动触发major compaction</div><div class=\"line\">*语法*：``Compact all regions in a table:``</div></pre></td></tr></table></figure></p>\n<p>hbase&gt; major_compact ‘t1’<br>Compact an entire region:<br>hbase&gt; major_compact ‘r1’<br>Compact a single column family within a region:<br>hbase&gt; major_compact ‘r1’, ‘c1’<br>Compact a single column family within a table:<br>hbase&gt; major_compact ‘t1’, ‘c1’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">## **6.配置管理及节点重启**</div><div class=\"line\">&gt; 1）修改hdfs配置hdfs配置位置：</div></pre></td></tr></table></figure></p>\n<p>/etc/hadoop/conf<br><code>`\n 同步hdfs配置</code><br>cat /home/hadoop/slaves | xargs -i -t scp /etc/hadoop/conf/hdfs-site.xml hadoop@{}: /etc/hadoop/conf/hdfs-site.xml<code>关闭：</code><br>cat /home/hadoop/slaves | xargs -i -t ssh hadoop@{} “sudo /home/hadoop/cdh4/hadoop-2.0.0-cdh4.2.1/sbin/hadoop-daemon.sh –config /etc/hadoop/conf stop datanode”<br><code>启动：</code>cat /home/hadoop/slaves | xargs -i -t ssh hadoop@{} “sudo /home/hadoop/cdh4/hadoop-2.0.0-cdh4.2.1/sbin/hadoop-daemon.sh –config /etc/hadoop/conf start datanode”<br>``</p>\n<blockquote>\n<p>2）修改hbase配置hbase配置位置：<br>同步hbase配置<br><code>cat /home/hadoop/hbase/conf/regionservers | xargs -i -t scp /home/hadoop/hbase/conf/hbase-site.xml hadoop@{}:/home/hadoop/hbase/conf/hbase-site.xml</code><br>graceful重启<br><code>cd ~/hbase\nbin/graceful_stop.sh --restart --reload --debug inspurXXX.xxx.xxx.org</code></p>\n</blockquote>"},{"title":"《楚门的世界》，关于选择和自由","comments":1,"date":"2018-01-22T02:54:04.000Z","keywords":"电影 感想 生活 随笔 周末电影","_content":"\n## 电影相关\n### 楚门的世界（The Truman Show）\n<center>![tumen.jpg](https://i.loli.net/2018/04/08/5aca1c7d5b30d.jpg)</center>\n### 内容简介\n楚门是一个平凡得不能再平凡的人，除了一些有些稀奇的经历之外——初恋女友突然失踪、溺水身亡的父亲忽然似乎又出现在眼前，他和绝大多数30多岁的美国男人绝无异样。这令他倍感失落。他也曾试过离开自己生活了多年的地方，但总因种种理由而不能成行。   \n　　直到有一天，他忽然发觉自己似乎一直在被人跟踪，无论他走到哪里，干什么事情。这种感觉愈来愈强烈。楚门决定不惜一切代价逃离这个他生活了30多年的地方，去寻找他的初恋女友。\n\n### 关于金·凯瑞(Jim Carrey)\n在看这部电影之前，我看到的金凯瑞的作品都还是《变相怪杰》、神探飞机头之类的无厘头喜剧电影。\t\t\n通过这部电影，重新认识了他。电影中塑造的“楚门”形象让人映像深刻。\n\n<!--more-->\n## 观影后感\n### 关于电影  \n站在电影拍摄年代看，这部电影的想法大胆，某种程度还“预言”了现在的直播行业。楚门算是直播界的鼻祖吧？  \n电影中很多重复的镜头和场景，但电影情节设计合理，所以在观看的时候注意力也一直比较集中，不会有疲劳。  \n关于电影中的人物：楚门。他积极乐观，从小到大的几十年的生活直播，鼓舞了电影中很多“电视机前的观众”。最后选择离开“楚门的世界”的勇敢，也鼓舞了很多我这个看电影的观众。  \n\n### 我的感受\n\n#### 我们世界，楚门的世界\n看完电影的时候，我会有一个疑惑：我是不是也处在一“XX的世界”？转瞬又会笑自己想多了。\t\t\n但再认真的思考一下又会发现事情并不简单（细思极恐）：我真的处在一个真实的世界里么？我们看楚门，会不会也有人正在看着我们？（想得有点多啊，哈哈）\t\t\n电影中，我们看得到的是：楚门走出了他的世界。  \n生活中，我们看不到的是：我们走不出自己的世界。  \n虽然我们不会真的在一场直播中，但我们的确被困在了自己的世界中。很多时候，我们都会计较生活中的点滴得失。我们会恐惧去改变。身体虽然没有被禁锢，但灵魂却甘心在“楚门的世界”中安逸。  \n\n#### 关于自由和选择\n电影中，楚门走出了“直播世界”，获得了自由，看起来是如此。可是我认为楚门在出门之前就已经获得了自由。  \n我认为，自由的概念不是“无拘无束”，而是“有得选”，也就是有选择的权利。楚门在出门前的那一刻，他是有选择走出去还是留下的权利，所以在这一刻，他是自由的。他知道了真相后，无论是留在电影世界，还是走出去，这件事情上，他都已经获得了“自由”。\n我对自由最直观感受到的是在第一次搭上梯子翻出去的那一刻，一瞬间，我好像获得了某种自由。因为我终于可以选择是选用百度还是google，我是选择优酷还是youtube。有点不可思议，但就是这么简单。\n自由好像就是这样，在你有选择的那一刻，你就有自由。你可以选择去旅行还是宅家里，监狱里的囚徒不行。\n这么想，好像是有点道理。\n\n\n最后：\n>* 如果我再也见不到你，我会祝你早安、午安还有晚安。\n","source":"_posts/《楚门的世界》，关于选择和自由.md","raw":"---\ntitle: 《楚门的世界》，关于选择和自由\ncomments: true\ndate: 2018-01-22 10:54:04\nkeywords: 电影 感想 生活 随笔 周末电影\ntags:\n- 电影\ncategories:\n- live\n---\n\n## 电影相关\n### 楚门的世界（The Truman Show）\n<center>![tumen.jpg](https://i.loli.net/2018/04/08/5aca1c7d5b30d.jpg)</center>\n### 内容简介\n楚门是一个平凡得不能再平凡的人，除了一些有些稀奇的经历之外——初恋女友突然失踪、溺水身亡的父亲忽然似乎又出现在眼前，他和绝大多数30多岁的美国男人绝无异样。这令他倍感失落。他也曾试过离开自己生活了多年的地方，但总因种种理由而不能成行。   \n　　直到有一天，他忽然发觉自己似乎一直在被人跟踪，无论他走到哪里，干什么事情。这种感觉愈来愈强烈。楚门决定不惜一切代价逃离这个他生活了30多年的地方，去寻找他的初恋女友。\n\n### 关于金·凯瑞(Jim Carrey)\n在看这部电影之前，我看到的金凯瑞的作品都还是《变相怪杰》、神探飞机头之类的无厘头喜剧电影。\t\t\n通过这部电影，重新认识了他。电影中塑造的“楚门”形象让人映像深刻。\n\n<!--more-->\n## 观影后感\n### 关于电影  \n站在电影拍摄年代看，这部电影的想法大胆，某种程度还“预言”了现在的直播行业。楚门算是直播界的鼻祖吧？  \n电影中很多重复的镜头和场景，但电影情节设计合理，所以在观看的时候注意力也一直比较集中，不会有疲劳。  \n关于电影中的人物：楚门。他积极乐观，从小到大的几十年的生活直播，鼓舞了电影中很多“电视机前的观众”。最后选择离开“楚门的世界”的勇敢，也鼓舞了很多我这个看电影的观众。  \n\n### 我的感受\n\n#### 我们世界，楚门的世界\n看完电影的时候，我会有一个疑惑：我是不是也处在一“XX的世界”？转瞬又会笑自己想多了。\t\t\n但再认真的思考一下又会发现事情并不简单（细思极恐）：我真的处在一个真实的世界里么？我们看楚门，会不会也有人正在看着我们？（想得有点多啊，哈哈）\t\t\n电影中，我们看得到的是：楚门走出了他的世界。  \n生活中，我们看不到的是：我们走不出自己的世界。  \n虽然我们不会真的在一场直播中，但我们的确被困在了自己的世界中。很多时候，我们都会计较生活中的点滴得失。我们会恐惧去改变。身体虽然没有被禁锢，但灵魂却甘心在“楚门的世界”中安逸。  \n\n#### 关于自由和选择\n电影中，楚门走出了“直播世界”，获得了自由，看起来是如此。可是我认为楚门在出门之前就已经获得了自由。  \n我认为，自由的概念不是“无拘无束”，而是“有得选”，也就是有选择的权利。楚门在出门前的那一刻，他是有选择走出去还是留下的权利，所以在这一刻，他是自由的。他知道了真相后，无论是留在电影世界，还是走出去，这件事情上，他都已经获得了“自由”。\n我对自由最直观感受到的是在第一次搭上梯子翻出去的那一刻，一瞬间，我好像获得了某种自由。因为我终于可以选择是选用百度还是google，我是选择优酷还是youtube。有点不可思议，但就是这么简单。\n自由好像就是这样，在你有选择的那一刻，你就有自由。你可以选择去旅行还是宅家里，监狱里的囚徒不行。\n这么想，好像是有点道理。\n\n\n最后：\n>* 如果我再也见不到你，我会祝你早安、午安还有晚安。\n","slug":"《楚门的世界》，关于选择和自由","published":1,"updated":"2018-04-08T13:51:36.575Z","layout":"post","photos":[],"link":"","_id":"cjnom6wr8001bc0fywgrp0fl1","content":"<h2 id=\"电影相关\"><a href=\"#电影相关\" class=\"headerlink\" title=\"电影相关\"></a>电影相关</h2><h3 id=\"楚门的世界（The-Truman-Show）\"><a href=\"#楚门的世界（The-Truman-Show）\" class=\"headerlink\" title=\"楚门的世界（The Truman Show）\"></a>楚门的世界（The Truman Show）</h3><p><center><img src=\"https://i.loli.net/2018/04/08/5aca1c7d5b30d.jpg\" alt=\"tumen.jpg\"></center></p>\n<h3 id=\"内容简介\"><a href=\"#内容简介\" class=\"headerlink\" title=\"内容简介\"></a>内容简介</h3><p>楚门是一个平凡得不能再平凡的人，除了一些有些稀奇的经历之外——初恋女友突然失踪、溺水身亡的父亲忽然似乎又出现在眼前，他和绝大多数30多岁的美国男人绝无异样。这令他倍感失落。他也曾试过离开自己生活了多年的地方，但总因种种理由而不能成行。<br>　　直到有一天，他忽然发觉自己似乎一直在被人跟踪，无论他走到哪里，干什么事情。这种感觉愈来愈强烈。楚门决定不惜一切代价逃离这个他生活了30多年的地方，去寻找他的初恋女友。</p>\n<h3 id=\"关于金·凯瑞-Jim-Carrey\"><a href=\"#关于金·凯瑞-Jim-Carrey\" class=\"headerlink\" title=\"关于金·凯瑞(Jim Carrey)\"></a>关于金·凯瑞(Jim Carrey)</h3><p>在看这部电影之前，我看到的金凯瑞的作品都还是《变相怪杰》、神探飞机头之类的无厘头喜剧电影。<br>通过这部电影，重新认识了他。电影中塑造的“楚门”形象让人映像深刻。</p>\n<a id=\"more\"></a>\n<h2 id=\"观影后感\"><a href=\"#观影后感\" class=\"headerlink\" title=\"观影后感\"></a>观影后感</h2><h3 id=\"关于电影\"><a href=\"#关于电影\" class=\"headerlink\" title=\"关于电影\"></a>关于电影</h3><p>站在电影拍摄年代看，这部电影的想法大胆，某种程度还“预言”了现在的直播行业。楚门算是直播界的鼻祖吧？<br>电影中很多重复的镜头和场景，但电影情节设计合理，所以在观看的时候注意力也一直比较集中，不会有疲劳。<br>关于电影中的人物：楚门。他积极乐观，从小到大的几十年的生活直播，鼓舞了电影中很多“电视机前的观众”。最后选择离开“楚门的世界”的勇敢，也鼓舞了很多我这个看电影的观众。  </p>\n<h3 id=\"我的感受\"><a href=\"#我的感受\" class=\"headerlink\" title=\"我的感受\"></a>我的感受</h3><h4 id=\"我们世界，楚门的世界\"><a href=\"#我们世界，楚门的世界\" class=\"headerlink\" title=\"我们世界，楚门的世界\"></a>我们世界，楚门的世界</h4><p>看完电影的时候，我会有一个疑惑：我是不是也处在一“XX的世界”？转瞬又会笑自己想多了。<br>但再认真的思考一下又会发现事情并不简单（细思极恐）：我真的处在一个真实的世界里么？我们看楚门，会不会也有人正在看着我们？（想得有点多啊，哈哈）<br>电影中，我们看得到的是：楚门走出了他的世界。<br>生活中，我们看不到的是：我们走不出自己的世界。<br>虽然我们不会真的在一场直播中，但我们的确被困在了自己的世界中。很多时候，我们都会计较生活中的点滴得失。我们会恐惧去改变。身体虽然没有被禁锢，但灵魂却甘心在“楚门的世界”中安逸。  </p>\n<h4 id=\"关于自由和选择\"><a href=\"#关于自由和选择\" class=\"headerlink\" title=\"关于自由和选择\"></a>关于自由和选择</h4><p>电影中，楚门走出了“直播世界”，获得了自由，看起来是如此。可是我认为楚门在出门之前就已经获得了自由。<br>我认为，自由的概念不是“无拘无束”，而是“有得选”，也就是有选择的权利。楚门在出门前的那一刻，他是有选择走出去还是留下的权利，所以在这一刻，他是自由的。他知道了真相后，无论是留在电影世界，还是走出去，这件事情上，他都已经获得了“自由”。<br>我对自由最直观感受到的是在第一次搭上梯子翻出去的那一刻，一瞬间，我好像获得了某种自由。因为我终于可以选择是选用百度还是google，我是选择优酷还是youtube。有点不可思议，但就是这么简单。<br>自由好像就是这样，在你有选择的那一刻，你就有自由。你可以选择去旅行还是宅家里，监狱里的囚徒不行。<br>这么想，好像是有点道理。</p>\n<p>最后：</p>\n<blockquote>\n<ul>\n<li>如果我再也见不到你，我会祝你早安、午安还有晚安。</li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"电影相关\"><a href=\"#电影相关\" class=\"headerlink\" title=\"电影相关\"></a>电影相关</h2><h3 id=\"楚门的世界（The-Truman-Show）\"><a href=\"#楚门的世界（The-Truman-Show）\" class=\"headerlink\" title=\"楚门的世界（The Truman Show）\"></a>楚门的世界（The Truman Show）</h3><p><center><img src=\"https://i.loli.net/2018/04/08/5aca1c7d5b30d.jpg\" alt=\"tumen.jpg\"></center></p>\n<h3 id=\"内容简介\"><a href=\"#内容简介\" class=\"headerlink\" title=\"内容简介\"></a>内容简介</h3><p>楚门是一个平凡得不能再平凡的人，除了一些有些稀奇的经历之外——初恋女友突然失踪、溺水身亡的父亲忽然似乎又出现在眼前，他和绝大多数30多岁的美国男人绝无异样。这令他倍感失落。他也曾试过离开自己生活了多年的地方，但总因种种理由而不能成行。<br>　　直到有一天，他忽然发觉自己似乎一直在被人跟踪，无论他走到哪里，干什么事情。这种感觉愈来愈强烈。楚门决定不惜一切代价逃离这个他生活了30多年的地方，去寻找他的初恋女友。</p>\n<h3 id=\"关于金·凯瑞-Jim-Carrey\"><a href=\"#关于金·凯瑞-Jim-Carrey\" class=\"headerlink\" title=\"关于金·凯瑞(Jim Carrey)\"></a>关于金·凯瑞(Jim Carrey)</h3><p>在看这部电影之前，我看到的金凯瑞的作品都还是《变相怪杰》、神探飞机头之类的无厘头喜剧电影。<br>通过这部电影，重新认识了他。电影中塑造的“楚门”形象让人映像深刻。</p>","more":"<h2 id=\"观影后感\"><a href=\"#观影后感\" class=\"headerlink\" title=\"观影后感\"></a>观影后感</h2><h3 id=\"关于电影\"><a href=\"#关于电影\" class=\"headerlink\" title=\"关于电影\"></a>关于电影</h3><p>站在电影拍摄年代看，这部电影的想法大胆，某种程度还“预言”了现在的直播行业。楚门算是直播界的鼻祖吧？<br>电影中很多重复的镜头和场景，但电影情节设计合理，所以在观看的时候注意力也一直比较集中，不会有疲劳。<br>关于电影中的人物：楚门。他积极乐观，从小到大的几十年的生活直播，鼓舞了电影中很多“电视机前的观众”。最后选择离开“楚门的世界”的勇敢，也鼓舞了很多我这个看电影的观众。  </p>\n<h3 id=\"我的感受\"><a href=\"#我的感受\" class=\"headerlink\" title=\"我的感受\"></a>我的感受</h3><h4 id=\"我们世界，楚门的世界\"><a href=\"#我们世界，楚门的世界\" class=\"headerlink\" title=\"我们世界，楚门的世界\"></a>我们世界，楚门的世界</h4><p>看完电影的时候，我会有一个疑惑：我是不是也处在一“XX的世界”？转瞬又会笑自己想多了。<br>但再认真的思考一下又会发现事情并不简单（细思极恐）：我真的处在一个真实的世界里么？我们看楚门，会不会也有人正在看着我们？（想得有点多啊，哈哈）<br>电影中，我们看得到的是：楚门走出了他的世界。<br>生活中，我们看不到的是：我们走不出自己的世界。<br>虽然我们不会真的在一场直播中，但我们的确被困在了自己的世界中。很多时候，我们都会计较生活中的点滴得失。我们会恐惧去改变。身体虽然没有被禁锢，但灵魂却甘心在“楚门的世界”中安逸。  </p>\n<h4 id=\"关于自由和选择\"><a href=\"#关于自由和选择\" class=\"headerlink\" title=\"关于自由和选择\"></a>关于自由和选择</h4><p>电影中，楚门走出了“直播世界”，获得了自由，看起来是如此。可是我认为楚门在出门之前就已经获得了自由。<br>我认为，自由的概念不是“无拘无束”，而是“有得选”，也就是有选择的权利。楚门在出门前的那一刻，他是有选择走出去还是留下的权利，所以在这一刻，他是自由的。他知道了真相后，无论是留在电影世界，还是走出去，这件事情上，他都已经获得了“自由”。<br>我对自由最直观感受到的是在第一次搭上梯子翻出去的那一刻，一瞬间，我好像获得了某种自由。因为我终于可以选择是选用百度还是google，我是选择优酷还是youtube。有点不可思议，但就是这么简单。<br>自由好像就是这样，在你有选择的那一刻，你就有自由。你可以选择去旅行还是宅家里，监狱里的囚徒不行。<br>这么想，好像是有点道理。</p>\n<p>最后：</p>\n<blockquote>\n<ul>\n<li>如果我再也见不到你，我会祝你早安、午安还有晚安。</li>\n</ul>\n</blockquote>"},{"title":"用python分析了wh的药店","date":"2017-10-20T12:13:31.000Z","desc":"python数据分析，武汉全部的药店数据","keywords":"数据分析 python 药店","_content":"\n\n## 起因  \n其实打算分析药店这个事情，与看完《我不是药神》没啥关系，取这个标题，只是为了蹭一波电影的热度。  \n主要起因是，在世界杯期间看到一条段子：  \n  \n> 美国500米就有一个篮球场，巴西每个小区一个足球场，而中国500米就有个大药房。  \n\n开始只是当成一个段子，觉得有夸张的嫌疑。但某天逛完超市回家，刻意的数了一下药店数量。  \n\n** 震惊! 不到1km的路上居然有6，7个药店！真可怕。 **   \n\n正好我最近刚开始学习python数据分析，于是，就决心以“超一线城市大武汉”为例，好好看看中国的药店到底多不多。  \n\n## 数据获取\n\n### 通过地图WebAPI  \n\n我尝试着找了一下，好像网上没有现成的数据。   \t\t\n只能自己动手，搞点数据了。  \n\n首先想到的是通过百度地图来获取数据，找了找，果然有相关的WebAPI。  \n\n> 地点检索服务（又名Place API）是一类Web API接口服务；\t \n> 服务提供多种场景的地点（POI）检索功能，包括城市检索、圆形区域检索、矩形区域检索。开发者可通过接口获取地点（POI）基础或详细地理信息。\t\n\n能直接通过WebAPI获取数据，连解析页面都省了，简直太爽了有木有？\n\n本以为可以直接通过城市的检索的接口直接获取到我想要的数据。\n然鹅，我错了，事情没我想的那么简单，这个api居然最多返回400条数据。大武汉的药店明显不止400个。我试着找了一下高德，高德更抠门，就200个结果。只能想想其他办法了。\n\n### 切割地图\n\n继续找其他的解决办法，忽然发现了地点检索api后面还有一个矩形区域检索功能。灵机一动，我可以把大武汉分成很多个小矩形，分块检索啊，这样也不会有数据丢失。\t\t\n\n想法很好，可当我看到武汉这长得像块‘三鲜豆皮’的地图的时候，问题又来了，我该怎么切割这个地图。  \n\n![wh_map.jpg](https://i.loli.net/2018/07/30/5b5f15caa7de8.jpg)  \n\n抱着不能错过一个，也不能浪费api资源的态度，我打算先找到武汉东南西北之最，也就是找到一个可以将武汉包裹的最小矩形。\n\n想到了通过城市边界点筛选的方式获取武汉的最东，最南，最西，最北。结果找了半天没发现百度webapi里有这个，只有一个javascriptAPI有这个功能，比较麻烦。反倒是高德有个“行政区域查询”的api可以直接获取到城市边界。\n```\nhttp://restapi.amap.com/v3/config/district?key=您的key&keywords=武汉&subdistrict=0&extensions=all\n```\n接下来的事情就简单了，分析获取到的城市边界点列表，找到经纬度的最大最小值，即城市的最东南西北。然后从东到西切20刀，从南到北均匀切20刀。武汉一下就被切成400块了。  \n\n我们就可以分块的去调用地点检索的API，如果有超过400个的，就调整参数，多切几刀。  \n\n当然，这样切肯定有误伤周边城市的情况。这种情况就通过POI的“city”属性去筛选掉。\n\n至此，我们就成功的获取到了我们想要的比较完整的药店的数据了。\n\n### 其他数据  \n\n有了药店的数据，我们还需要一些其他的数据，例如：行政区域面积啊，人口数量等。\n像这类的数据，一般在当地的统计局网站都能下载到。 \n\n## 数据分析\n\n### 药店位置分布\n\n我猜想，药店的数量应该与人口密度和地方经济情况有所关系。\t\t\n\n首先，我们通过图表看看武汉的人口密度：  \n![武汉人口密度.png](https://i.loli.net/2018/08/01/5b61bd5f1e4d0.png)\n\n从图像可以看出，人口密度最大的是江汉区，硚口区和武昌区，这些都是武汉的老城区。\t\t\n黄陂区，江夏，汉南这些都算是郊区，人口密度低，也情有可原。\t\n意外的是：主城区洪山区人口密度居然也不高。（可能统计面积的时候几个大湖也算进去了？）\t\t\n\n再看看，我们收集的药店的数据，我爬取的百度地图上能找到的武汉所有药店，一共爬到了1936个，估计还有一些没有收录到的遗漏了。在武汉药监局官网查到的药品零售企业有4317个，但这里可能又很多过期可但未注销的企业。所以这次我们以百度地图爬取到的数据为准。\n\n首先我们看看各个区人数和药店数量的基本情况：\t\t\n![武汉各区人数和药店数.png](https://i.loli.net/2018/08/02/5b631261e4971.png)  \n\n基本大多数的区药店数量都超过了1万人一个药店。\t \n\n再看看武汉每个区的药店数量情况，武汉各个区域药店的数量占比：\t\t\n![武汉药店各区域占比.png](https://i.loli.net/2018/08/02/5b62d5e88df71.png)   \n\n武昌、江岸、洪山、江汉这几个主城区果然还是占了大多的数的药店。\n\n药店密度和人口密度是否有关呢？\n![武汉各区多少人一个药店.png](https://i.loli.net/2018/08/01/5b61c3933b99d.png)\n\n药店最密集的是江岸区，3408个人就有一个药店。而药店比较稀缺的新洲区居然平均26317个人才有一个药店，新洲区的朋友会不会有买药难的问题？\n\n经济状况好的主城区人均药店数明显比郊区高。\n\n光在表格上我们没办法形象的看到药店的分布，所以做成热力图更形象了。\n![武汉药店热力分布图.png](https://i.loli.net/2018/08/01/5b61c590c5ae0.png)\n\n### 药店店名分析\n\n\n","source":"_posts/看完《我不是药神》后我用python分析了中国的药店.md","raw":"---\ntitle: 用python分析了wh的药店\ndate: 2017-10-20 20:13:31\ntags:\n  - Python \ndesc: python数据分析，武汉全部的药店数据\nkeywords: 数据分析 python 药店  \ncategories:\n- Python\n\n---\n\n\n## 起因  \n其实打算分析药店这个事情，与看完《我不是药神》没啥关系，取这个标题，只是为了蹭一波电影的热度。  \n主要起因是，在世界杯期间看到一条段子：  \n  \n> 美国500米就有一个篮球场，巴西每个小区一个足球场，而中国500米就有个大药房。  \n\n开始只是当成一个段子，觉得有夸张的嫌疑。但某天逛完超市回家，刻意的数了一下药店数量。  \n\n** 震惊! 不到1km的路上居然有6，7个药店！真可怕。 **   \n\n正好我最近刚开始学习python数据分析，于是，就决心以“超一线城市大武汉”为例，好好看看中国的药店到底多不多。  \n\n## 数据获取\n\n### 通过地图WebAPI  \n\n我尝试着找了一下，好像网上没有现成的数据。   \t\t\n只能自己动手，搞点数据了。  \n\n首先想到的是通过百度地图来获取数据，找了找，果然有相关的WebAPI。  \n\n> 地点检索服务（又名Place API）是一类Web API接口服务；\t \n> 服务提供多种场景的地点（POI）检索功能，包括城市检索、圆形区域检索、矩形区域检索。开发者可通过接口获取地点（POI）基础或详细地理信息。\t\n\n能直接通过WebAPI获取数据，连解析页面都省了，简直太爽了有木有？\n\n本以为可以直接通过城市的检索的接口直接获取到我想要的数据。\n然鹅，我错了，事情没我想的那么简单，这个api居然最多返回400条数据。大武汉的药店明显不止400个。我试着找了一下高德，高德更抠门，就200个结果。只能想想其他办法了。\n\n### 切割地图\n\n继续找其他的解决办法，忽然发现了地点检索api后面还有一个矩形区域检索功能。灵机一动，我可以把大武汉分成很多个小矩形，分块检索啊，这样也不会有数据丢失。\t\t\n\n想法很好，可当我看到武汉这长得像块‘三鲜豆皮’的地图的时候，问题又来了，我该怎么切割这个地图。  \n\n![wh_map.jpg](https://i.loli.net/2018/07/30/5b5f15caa7de8.jpg)  \n\n抱着不能错过一个，也不能浪费api资源的态度，我打算先找到武汉东南西北之最，也就是找到一个可以将武汉包裹的最小矩形。\n\n想到了通过城市边界点筛选的方式获取武汉的最东，最南，最西，最北。结果找了半天没发现百度webapi里有这个，只有一个javascriptAPI有这个功能，比较麻烦。反倒是高德有个“行政区域查询”的api可以直接获取到城市边界。\n```\nhttp://restapi.amap.com/v3/config/district?key=您的key&keywords=武汉&subdistrict=0&extensions=all\n```\n接下来的事情就简单了，分析获取到的城市边界点列表，找到经纬度的最大最小值，即城市的最东南西北。然后从东到西切20刀，从南到北均匀切20刀。武汉一下就被切成400块了。  \n\n我们就可以分块的去调用地点检索的API，如果有超过400个的，就调整参数，多切几刀。  \n\n当然，这样切肯定有误伤周边城市的情况。这种情况就通过POI的“city”属性去筛选掉。\n\n至此，我们就成功的获取到了我们想要的比较完整的药店的数据了。\n\n### 其他数据  \n\n有了药店的数据，我们还需要一些其他的数据，例如：行政区域面积啊，人口数量等。\n像这类的数据，一般在当地的统计局网站都能下载到。 \n\n## 数据分析\n\n### 药店位置分布\n\n我猜想，药店的数量应该与人口密度和地方经济情况有所关系。\t\t\n\n首先，我们通过图表看看武汉的人口密度：  \n![武汉人口密度.png](https://i.loli.net/2018/08/01/5b61bd5f1e4d0.png)\n\n从图像可以看出，人口密度最大的是江汉区，硚口区和武昌区，这些都是武汉的老城区。\t\t\n黄陂区，江夏，汉南这些都算是郊区，人口密度低，也情有可原。\t\n意外的是：主城区洪山区人口密度居然也不高。（可能统计面积的时候几个大湖也算进去了？）\t\t\n\n再看看，我们收集的药店的数据，我爬取的百度地图上能找到的武汉所有药店，一共爬到了1936个，估计还有一些没有收录到的遗漏了。在武汉药监局官网查到的药品零售企业有4317个，但这里可能又很多过期可但未注销的企业。所以这次我们以百度地图爬取到的数据为准。\n\n首先我们看看各个区人数和药店数量的基本情况：\t\t\n![武汉各区人数和药店数.png](https://i.loli.net/2018/08/02/5b631261e4971.png)  \n\n基本大多数的区药店数量都超过了1万人一个药店。\t \n\n再看看武汉每个区的药店数量情况，武汉各个区域药店的数量占比：\t\t\n![武汉药店各区域占比.png](https://i.loli.net/2018/08/02/5b62d5e88df71.png)   \n\n武昌、江岸、洪山、江汉这几个主城区果然还是占了大多的数的药店。\n\n药店密度和人口密度是否有关呢？\n![武汉各区多少人一个药店.png](https://i.loli.net/2018/08/01/5b61c3933b99d.png)\n\n药店最密集的是江岸区，3408个人就有一个药店。而药店比较稀缺的新洲区居然平均26317个人才有一个药店，新洲区的朋友会不会有买药难的问题？\n\n经济状况好的主城区人均药店数明显比郊区高。\n\n光在表格上我们没办法形象的看到药店的分布，所以做成热力图更形象了。\n![武汉药店热力分布图.png](https://i.loli.net/2018/08/01/5b61c590c5ae0.png)\n\n### 药店店名分析\n\n\n","slug":"看完《我不是药神》后我用python分析了中国的药店","published":1,"updated":"2018-10-23T15:52:31.175Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnom6xoy002vc0fyplv42t7p","content":"<h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><p>其实打算分析药店这个事情，与看完《我不是药神》没啥关系，取这个标题，只是为了蹭一波电影的热度。<br>主要起因是，在世界杯期间看到一条段子：  </p>\n<blockquote>\n<p>美国500米就有一个篮球场，巴西每个小区一个足球场，而中国500米就有个大药房。  </p>\n</blockquote>\n<p>开始只是当成一个段子，觉得有夸张的嫌疑。但某天逛完超市回家，刻意的数了一下药店数量。  </p>\n<p><strong> 震惊! 不到1km的路上居然有6，7个药店！真可怕。 </strong>   </p>\n<p>正好我最近刚开始学习python数据分析，于是，就决心以“超一线城市大武汉”为例，好好看看中国的药店到底多不多。  </p>\n<h2 id=\"数据获取\"><a href=\"#数据获取\" class=\"headerlink\" title=\"数据获取\"></a>数据获取</h2><h3 id=\"通过地图WebAPI\"><a href=\"#通过地图WebAPI\" class=\"headerlink\" title=\"通过地图WebAPI\"></a>通过地图WebAPI</h3><p>我尝试着找了一下，好像网上没有现成的数据。<br>只能自己动手，搞点数据了。  </p>\n<p>首先想到的是通过百度地图来获取数据，找了找，果然有相关的WebAPI。  </p>\n<blockquote>\n<p>地点检索服务（又名Place API）是一类Web API接口服务；<br>服务提供多种场景的地点（POI）检索功能，包括城市检索、圆形区域检索、矩形区域检索。开发者可通过接口获取地点（POI）基础或详细地理信息。    </p>\n</blockquote>\n<p>能直接通过WebAPI获取数据，连解析页面都省了，简直太爽了有木有？</p>\n<p>本以为可以直接通过城市的检索的接口直接获取到我想要的数据。<br>然鹅，我错了，事情没我想的那么简单，这个api居然最多返回400条数据。大武汉的药店明显不止400个。我试着找了一下高德，高德更抠门，就200个结果。只能想想其他办法了。</p>\n<h3 id=\"切割地图\"><a href=\"#切割地图\" class=\"headerlink\" title=\"切割地图\"></a>切割地图</h3><p>继续找其他的解决办法，忽然发现了地点检索api后面还有一个矩形区域检索功能。灵机一动，我可以把大武汉分成很多个小矩形，分块检索啊，这样也不会有数据丢失。        </p>\n<p>想法很好，可当我看到武汉这长得像块‘三鲜豆皮’的地图的时候，问题又来了，我该怎么切割这个地图。  </p>\n<p><img src=\"https://i.loli.net/2018/07/30/5b5f15caa7de8.jpg\" alt=\"wh_map.jpg\">  </p>\n<p>抱着不能错过一个，也不能浪费api资源的态度，我打算先找到武汉东南西北之最，也就是找到一个可以将武汉包裹的最小矩形。</p>\n<p>想到了通过城市边界点筛选的方式获取武汉的最东，最南，最西，最北。结果找了半天没发现百度webapi里有这个，只有一个javascriptAPI有这个功能，比较麻烦。反倒是高德有个“行政区域查询”的api可以直接获取到城市边界。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://restapi.amap.com/v3/config/district?key=您的key&amp;keywords=武汉&amp;subdistrict=0&amp;extensions=all</div></pre></td></tr></table></figure></p>\n<p>接下来的事情就简单了，分析获取到的城市边界点列表，找到经纬度的最大最小值，即城市的最东南西北。然后从东到西切20刀，从南到北均匀切20刀。武汉一下就被切成400块了。  </p>\n<p>我们就可以分块的去调用地点检索的API，如果有超过400个的，就调整参数，多切几刀。  </p>\n<p>当然，这样切肯定有误伤周边城市的情况。这种情况就通过POI的“city”属性去筛选掉。</p>\n<p>至此，我们就成功的获取到了我们想要的比较完整的药店的数据了。</p>\n<h3 id=\"其他数据\"><a href=\"#其他数据\" class=\"headerlink\" title=\"其他数据\"></a>其他数据</h3><p>有了药店的数据，我们还需要一些其他的数据，例如：行政区域面积啊，人口数量等。<br>像这类的数据，一般在当地的统计局网站都能下载到。 </p>\n<h2 id=\"数据分析\"><a href=\"#数据分析\" class=\"headerlink\" title=\"数据分析\"></a>数据分析</h2><h3 id=\"药店位置分布\"><a href=\"#药店位置分布\" class=\"headerlink\" title=\"药店位置分布\"></a>药店位置分布</h3><p>我猜想，药店的数量应该与人口密度和地方经济情况有所关系。        </p>\n<p>首先，我们通过图表看看武汉的人口密度：<br><img src=\"https://i.loli.net/2018/08/01/5b61bd5f1e4d0.png\" alt=\"武汉人口密度.png\"></p>\n<p>从图像可以看出，人口密度最大的是江汉区，硚口区和武昌区，这些都是武汉的老城区。<br>黄陂区，江夏，汉南这些都算是郊区，人口密度低，也情有可原。<br>意外的是：主城区洪山区人口密度居然也不高。（可能统计面积的时候几个大湖也算进去了？）        </p>\n<p>再看看，我们收集的药店的数据，我爬取的百度地图上能找到的武汉所有药店，一共爬到了1936个，估计还有一些没有收录到的遗漏了。在武汉药监局官网查到的药品零售企业有4317个，但这里可能又很多过期可但未注销的企业。所以这次我们以百度地图爬取到的数据为准。</p>\n<p>首先我们看看各个区人数和药店数量的基本情况：<br><img src=\"https://i.loli.net/2018/08/02/5b631261e4971.png\" alt=\"武汉各区人数和药店数.png\">  </p>\n<p>基本大多数的区药店数量都超过了1万人一个药店。     </p>\n<p>再看看武汉每个区的药店数量情况，武汉各个区域药店的数量占比：<br><img src=\"https://i.loli.net/2018/08/02/5b62d5e88df71.png\" alt=\"武汉药店各区域占比.png\">   </p>\n<p>武昌、江岸、洪山、江汉这几个主城区果然还是占了大多的数的药店。</p>\n<p>药店密度和人口密度是否有关呢？<br><img src=\"https://i.loli.net/2018/08/01/5b61c3933b99d.png\" alt=\"武汉各区多少人一个药店.png\"></p>\n<p>药店最密集的是江岸区，3408个人就有一个药店。而药店比较稀缺的新洲区居然平均26317个人才有一个药店，新洲区的朋友会不会有买药难的问题？</p>\n<p>经济状况好的主城区人均药店数明显比郊区高。</p>\n<p>光在表格上我们没办法形象的看到药店的分布，所以做成热力图更形象了。<br><img src=\"https://i.loli.net/2018/08/01/5b61c590c5ae0.png\" alt=\"武汉药店热力分布图.png\"></p>\n<h3 id=\"药店店名分析\"><a href=\"#药店店名分析\" class=\"headerlink\" title=\"药店店名分析\"></a>药店店名分析</h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><p>其实打算分析药店这个事情，与看完《我不是药神》没啥关系，取这个标题，只是为了蹭一波电影的热度。<br>主要起因是，在世界杯期间看到一条段子：  </p>\n<blockquote>\n<p>美国500米就有一个篮球场，巴西每个小区一个足球场，而中国500米就有个大药房。  </p>\n</blockquote>\n<p>开始只是当成一个段子，觉得有夸张的嫌疑。但某天逛完超市回家，刻意的数了一下药店数量。  </p>\n<p><strong> 震惊! 不到1km的路上居然有6，7个药店！真可怕。 </strong>   </p>\n<p>正好我最近刚开始学习python数据分析，于是，就决心以“超一线城市大武汉”为例，好好看看中国的药店到底多不多。  </p>\n<h2 id=\"数据获取\"><a href=\"#数据获取\" class=\"headerlink\" title=\"数据获取\"></a>数据获取</h2><h3 id=\"通过地图WebAPI\"><a href=\"#通过地图WebAPI\" class=\"headerlink\" title=\"通过地图WebAPI\"></a>通过地图WebAPI</h3><p>我尝试着找了一下，好像网上没有现成的数据。<br>只能自己动手，搞点数据了。  </p>\n<p>首先想到的是通过百度地图来获取数据，找了找，果然有相关的WebAPI。  </p>\n<blockquote>\n<p>地点检索服务（又名Place API）是一类Web API接口服务；<br>服务提供多种场景的地点（POI）检索功能，包括城市检索、圆形区域检索、矩形区域检索。开发者可通过接口获取地点（POI）基础或详细地理信息。    </p>\n</blockquote>\n<p>能直接通过WebAPI获取数据，连解析页面都省了，简直太爽了有木有？</p>\n<p>本以为可以直接通过城市的检索的接口直接获取到我想要的数据。<br>然鹅，我错了，事情没我想的那么简单，这个api居然最多返回400条数据。大武汉的药店明显不止400个。我试着找了一下高德，高德更抠门，就200个结果。只能想想其他办法了。</p>\n<h3 id=\"切割地图\"><a href=\"#切割地图\" class=\"headerlink\" title=\"切割地图\"></a>切割地图</h3><p>继续找其他的解决办法，忽然发现了地点检索api后面还有一个矩形区域检索功能。灵机一动，我可以把大武汉分成很多个小矩形，分块检索啊，这样也不会有数据丢失。        </p>\n<p>想法很好，可当我看到武汉这长得像块‘三鲜豆皮’的地图的时候，问题又来了，我该怎么切割这个地图。  </p>\n<p><img src=\"https://i.loli.net/2018/07/30/5b5f15caa7de8.jpg\" alt=\"wh_map.jpg\">  </p>\n<p>抱着不能错过一个，也不能浪费api资源的态度，我打算先找到武汉东南西北之最，也就是找到一个可以将武汉包裹的最小矩形。</p>\n<p>想到了通过城市边界点筛选的方式获取武汉的最东，最南，最西，最北。结果找了半天没发现百度webapi里有这个，只有一个javascriptAPI有这个功能，比较麻烦。反倒是高德有个“行政区域查询”的api可以直接获取到城市边界。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://restapi.amap.com/v3/config/district?key=您的key&amp;keywords=武汉&amp;subdistrict=0&amp;extensions=all</div></pre></td></tr></table></figure></p>\n<p>接下来的事情就简单了，分析获取到的城市边界点列表，找到经纬度的最大最小值，即城市的最东南西北。然后从东到西切20刀，从南到北均匀切20刀。武汉一下就被切成400块了。  </p>\n<p>我们就可以分块的去调用地点检索的API，如果有超过400个的，就调整参数，多切几刀。  </p>\n<p>当然，这样切肯定有误伤周边城市的情况。这种情况就通过POI的“city”属性去筛选掉。</p>\n<p>至此，我们就成功的获取到了我们想要的比较完整的药店的数据了。</p>\n<h3 id=\"其他数据\"><a href=\"#其他数据\" class=\"headerlink\" title=\"其他数据\"></a>其他数据</h3><p>有了药店的数据，我们还需要一些其他的数据，例如：行政区域面积啊，人口数量等。<br>像这类的数据，一般在当地的统计局网站都能下载到。 </p>\n<h2 id=\"数据分析\"><a href=\"#数据分析\" class=\"headerlink\" title=\"数据分析\"></a>数据分析</h2><h3 id=\"药店位置分布\"><a href=\"#药店位置分布\" class=\"headerlink\" title=\"药店位置分布\"></a>药店位置分布</h3><p>我猜想，药店的数量应该与人口密度和地方经济情况有所关系。        </p>\n<p>首先，我们通过图表看看武汉的人口密度：<br><img src=\"https://i.loli.net/2018/08/01/5b61bd5f1e4d0.png\" alt=\"武汉人口密度.png\"></p>\n<p>从图像可以看出，人口密度最大的是江汉区，硚口区和武昌区，这些都是武汉的老城区。<br>黄陂区，江夏，汉南这些都算是郊区，人口密度低，也情有可原。<br>意外的是：主城区洪山区人口密度居然也不高。（可能统计面积的时候几个大湖也算进去了？）        </p>\n<p>再看看，我们收集的药店的数据，我爬取的百度地图上能找到的武汉所有药店，一共爬到了1936个，估计还有一些没有收录到的遗漏了。在武汉药监局官网查到的药品零售企业有4317个，但这里可能又很多过期可但未注销的企业。所以这次我们以百度地图爬取到的数据为准。</p>\n<p>首先我们看看各个区人数和药店数量的基本情况：<br><img src=\"https://i.loli.net/2018/08/02/5b631261e4971.png\" alt=\"武汉各区人数和药店数.png\">  </p>\n<p>基本大多数的区药店数量都超过了1万人一个药店。     </p>\n<p>再看看武汉每个区的药店数量情况，武汉各个区域药店的数量占比：<br><img src=\"https://i.loli.net/2018/08/02/5b62d5e88df71.png\" alt=\"武汉药店各区域占比.png\">   </p>\n<p>武昌、江岸、洪山、江汉这几个主城区果然还是占了大多的数的药店。</p>\n<p>药店密度和人口密度是否有关呢？<br><img src=\"https://i.loli.net/2018/08/01/5b61c3933b99d.png\" alt=\"武汉各区多少人一个药店.png\"></p>\n<p>药店最密集的是江岸区，3408个人就有一个药店。而药店比较稀缺的新洲区居然平均26317个人才有一个药店，新洲区的朋友会不会有买药难的问题？</p>\n<p>经济状况好的主城区人均药店数明显比郊区高。</p>\n<p>光在表格上我们没办法形象的看到药店的分布，所以做成热力图更形象了。<br><img src=\"https://i.loli.net/2018/08/01/5b61c590c5ae0.png\" alt=\"武汉药店热力分布图.png\"></p>\n<h3 id=\"药店店名分析\"><a href=\"#药店店名分析\" class=\"headerlink\" title=\"药店店名分析\"></a>药店店名分析</h3>"},{"title":"看电影《十二怒汉》","comments":1,"date":"2017-12-28T09:36:53.000Z","keywords":"电影 感想 生活 随笔 周末电影","_content":"\n\n## 相关介绍\n### 十二怒汉 12 Angry Men (1957)\n![12nuhan.png](https://i.loli.net/2017/12/28/5a44c091705d6.png)\n### 剧情简介  \n一个在贫民窟长大的18岁少年因为涉嫌杀害自己的父亲被告上法庭，证人言之凿凿，各方面的证据都对他极为不利。十二个不同职业的人组成了这个案件的陪审团，他们要在休息室达成一致的意见，裁定少年是否有罪，如果罪名成立，少年将会被判处死刑。  \n   \n十二个陪审团成员各有不同，除了8号陪审员（H enry Fonda 饰）之外，其他人对这个犯罪事实如此清晰的案子不屑一顾，还没有开始讨论就认定了少年有罪。8号陪审员提出了自己的“合理疑点”，耐心地说服其他的陪审员，在这个过程中，他们每个人不同的人生观也在冲突和较量……  \n<!--more--> \n## 观影有感\n\n### 关于电影  \n在看本片之前，我在网上看到过有人总结：“那些因为名字而被错过的电影”，我记得其中就有印度电影《三傻大闹宝莱坞》。我不记得其中是否有这部《十二怒汉》，但我知道我在很长一段时间内错过这部电影就是因为他的名字。“十二怒汉” 这个名字给我的第一感觉好像是类似“三百斯巴达勇士”一样，而我并不太喜欢这类型的电影。 \n\n\n\n至于，后面拿起这部电影看的原因是是在逛b站的时候，看到介绍这部电影的一个视频。通过那段视频我简单的了解了这部电影。然后找了一个周末的晚上，仔细观赏了这部电影。  \n\n由于拍摄年代比较久远，所以是黑白的。但这丝毫不影响导演和演员在黑白光影之间，讲述形象、深刻的故事。  \n\n不谈剧情，整个电影的一个半小时剧情，除了开场和结束的几个镜头，整个故事其余镜头都是在一个带洗手间的会议室中完成的。故事讲述得丝丝入扣，导演的才华和演员的演技，在这单调到离谱的场景中展现的淋漓尽致。  \n\n关于整部电影，有人说这是一部伟大的电影，我个人觉得，这部电影绝对对得住“伟大”两个字。非常推荐一看。  \n\n\n### 我的感受\n\n#### 关于决策\n整部电影，最让我印象深刻的地方是当所有人都在选择“赞同”的时候，8号陪审员站出来选择“不赞同”。心理学上，有我们很熟悉的一个现象，叫“从众效应”，在很多时候，我们更喜欢，更愿意，站在大多数的一方。买东西时，我们会选择销量好的，在舆论方面，我们跟愿意去关注大家都关注的事物。\n\n8号评审员在“证据确凿”，除了自己外11个成员都投“赞成票”的情况下，勇敢的投出“反对票”，并阐述自己的观点。\n\n我不禁想到自己在做决策时候，我是否有勇气去做出这样的“投票”。在遇到大多数人反对自己观点的时候，我是否能坚持自己的想法，能坚持的与他辩论。我知道，很多时候这个答案都是否定的，这值得我去反思。\n\n#### 关于态度\n关于对待事情的态度，这个要从人物的关系说起。陪审团的成员都与他们所讨论的男孩在生活上是没有任何关系的。所以他们大多数人开始也并不太在乎他的生死。也不会在心里为男孩做辩解。这也是开始他对小男孩这件事情的一个态度。\n\n轻视的态度决定了，11位评审员不会深入的去思考整件事情，更加不会站在为小男孩辩解的角度去思考，因为这跟‘我’无关。\n\n当然，也正是因为他们对小男孩的态度是一种事不关己的态度，一种没有态度的态度，所以他们后面才能做到轻易的转换思路，为小男孩找到合理的解释。\n\n对待事情的态度决定，我们对事情的思考方式，从何决定了我们的行为。所以表明态度，要谨慎。\n\n#### 关于生命\n影片中，小男孩失去了父亲，也没有出现过他的母亲。除了8号评审员，片中出现的人物几乎没有人在意小男孩的生命。假如评审团中没有出现8号评审员，小男孩被判死刑，估计世界上也不会有人为他心痛，一个月后，一年以后，也不会有人记得世界上有小男孩这样一个人出现过。\n\n包括，片中指认小男孩的老人，一生没有什么作为，到死去之前也不会有人注意到他。\n\n这让我想到了电影《嫌疑人X的献身》中被数学家杀死的流浪汉，他的死去没有给世界带来丝毫的影响。\n\n我还想到了很多死去的伟人，他们的逝去得到了整个世界的关注。他们的生命在这个星球上留下了不可磨灭的印记。\n\n生命就是这样的神奇，可以灿烂如星空，也可以平淡如水滴。\n\n### 还有很多\n影片看完了，这篇简短的观后感也差不多结束了。由于文字水平有限，也可能是很多东西没有体悟透彻，所以漏掉了很多。影片和文字结束了，但生活还在继续，我相信，这部电影收获的更多的东西，是我现在在没有感受到的，没有讲述出来的，他会无形的影响着我今后的生活，生活会越来越好。\n\n其他电影也是，其他书籍也是。","source":"_posts/看电影《十二怒汉》.md","raw":"---\ntitle: 看电影《十二怒汉》\ncomments: true\ndate: 2017-12-28 17:36:53\nkeywords: 电影 感想 生活 随笔 周末电影\ntags:\n- 电影\ncategories:\n- live\n---\n\n\n## 相关介绍\n### 十二怒汉 12 Angry Men (1957)\n![12nuhan.png](https://i.loli.net/2017/12/28/5a44c091705d6.png)\n### 剧情简介  \n一个在贫民窟长大的18岁少年因为涉嫌杀害自己的父亲被告上法庭，证人言之凿凿，各方面的证据都对他极为不利。十二个不同职业的人组成了这个案件的陪审团，他们要在休息室达成一致的意见，裁定少年是否有罪，如果罪名成立，少年将会被判处死刑。  \n   \n十二个陪审团成员各有不同，除了8号陪审员（H enry Fonda 饰）之外，其他人对这个犯罪事实如此清晰的案子不屑一顾，还没有开始讨论就认定了少年有罪。8号陪审员提出了自己的“合理疑点”，耐心地说服其他的陪审员，在这个过程中，他们每个人不同的人生观也在冲突和较量……  \n<!--more--> \n## 观影有感\n\n### 关于电影  \n在看本片之前，我在网上看到过有人总结：“那些因为名字而被错过的电影”，我记得其中就有印度电影《三傻大闹宝莱坞》。我不记得其中是否有这部《十二怒汉》，但我知道我在很长一段时间内错过这部电影就是因为他的名字。“十二怒汉” 这个名字给我的第一感觉好像是类似“三百斯巴达勇士”一样，而我并不太喜欢这类型的电影。 \n\n\n\n至于，后面拿起这部电影看的原因是是在逛b站的时候，看到介绍这部电影的一个视频。通过那段视频我简单的了解了这部电影。然后找了一个周末的晚上，仔细观赏了这部电影。  \n\n由于拍摄年代比较久远，所以是黑白的。但这丝毫不影响导演和演员在黑白光影之间，讲述形象、深刻的故事。  \n\n不谈剧情，整个电影的一个半小时剧情，除了开场和结束的几个镜头，整个故事其余镜头都是在一个带洗手间的会议室中完成的。故事讲述得丝丝入扣，导演的才华和演员的演技，在这单调到离谱的场景中展现的淋漓尽致。  \n\n关于整部电影，有人说这是一部伟大的电影，我个人觉得，这部电影绝对对得住“伟大”两个字。非常推荐一看。  \n\n\n### 我的感受\n\n#### 关于决策\n整部电影，最让我印象深刻的地方是当所有人都在选择“赞同”的时候，8号陪审员站出来选择“不赞同”。心理学上，有我们很熟悉的一个现象，叫“从众效应”，在很多时候，我们更喜欢，更愿意，站在大多数的一方。买东西时，我们会选择销量好的，在舆论方面，我们跟愿意去关注大家都关注的事物。\n\n8号评审员在“证据确凿”，除了自己外11个成员都投“赞成票”的情况下，勇敢的投出“反对票”，并阐述自己的观点。\n\n我不禁想到自己在做决策时候，我是否有勇气去做出这样的“投票”。在遇到大多数人反对自己观点的时候，我是否能坚持自己的想法，能坚持的与他辩论。我知道，很多时候这个答案都是否定的，这值得我去反思。\n\n#### 关于态度\n关于对待事情的态度，这个要从人物的关系说起。陪审团的成员都与他们所讨论的男孩在生活上是没有任何关系的。所以他们大多数人开始也并不太在乎他的生死。也不会在心里为男孩做辩解。这也是开始他对小男孩这件事情的一个态度。\n\n轻视的态度决定了，11位评审员不会深入的去思考整件事情，更加不会站在为小男孩辩解的角度去思考，因为这跟‘我’无关。\n\n当然，也正是因为他们对小男孩的态度是一种事不关己的态度，一种没有态度的态度，所以他们后面才能做到轻易的转换思路，为小男孩找到合理的解释。\n\n对待事情的态度决定，我们对事情的思考方式，从何决定了我们的行为。所以表明态度，要谨慎。\n\n#### 关于生命\n影片中，小男孩失去了父亲，也没有出现过他的母亲。除了8号评审员，片中出现的人物几乎没有人在意小男孩的生命。假如评审团中没有出现8号评审员，小男孩被判死刑，估计世界上也不会有人为他心痛，一个月后，一年以后，也不会有人记得世界上有小男孩这样一个人出现过。\n\n包括，片中指认小男孩的老人，一生没有什么作为，到死去之前也不会有人注意到他。\n\n这让我想到了电影《嫌疑人X的献身》中被数学家杀死的流浪汉，他的死去没有给世界带来丝毫的影响。\n\n我还想到了很多死去的伟人，他们的逝去得到了整个世界的关注。他们的生命在这个星球上留下了不可磨灭的印记。\n\n生命就是这样的神奇，可以灿烂如星空，也可以平淡如水滴。\n\n### 还有很多\n影片看完了，这篇简短的观后感也差不多结束了。由于文字水平有限，也可能是很多东西没有体悟透彻，所以漏掉了很多。影片和文字结束了，但生活还在继续，我相信，这部电影收获的更多的东西，是我现在在没有感受到的，没有讲述出来的，他会无形的影响着我今后的生活，生活会越来越好。\n\n其他电影也是，其他书籍也是。","slug":"看电影《十二怒汉》","published":1,"updated":"2017-12-28T10:00:19.649Z","layout":"post","photos":[],"link":"","_id":"cjnom6xp8002xc0fyfc2sezpj","content":"<h2 id=\"相关介绍\"><a href=\"#相关介绍\" class=\"headerlink\" title=\"相关介绍\"></a>相关介绍</h2><h3 id=\"十二怒汉-12-Angry-Men-1957\"><a href=\"#十二怒汉-12-Angry-Men-1957\" class=\"headerlink\" title=\"十二怒汉 12 Angry Men (1957)\"></a>十二怒汉 12 Angry Men (1957)</h3><p><img src=\"https://i.loli.net/2017/12/28/5a44c091705d6.png\" alt=\"12nuhan.png\"></p>\n<h3 id=\"剧情简介\"><a href=\"#剧情简介\" class=\"headerlink\" title=\"剧情简介\"></a>剧情简介</h3><p>一个在贫民窟长大的18岁少年因为涉嫌杀害自己的父亲被告上法庭，证人言之凿凿，各方面的证据都对他极为不利。十二个不同职业的人组成了这个案件的陪审团，他们要在休息室达成一致的意见，裁定少年是否有罪，如果罪名成立，少年将会被判处死刑。  </p>\n<p>十二个陪审团成员各有不同，除了8号陪审员（H enry Fonda 饰）之外，其他人对这个犯罪事实如此清晰的案子不屑一顾，还没有开始讨论就认定了少年有罪。8号陪审员提出了自己的“合理疑点”，耐心地说服其他的陪审员，在这个过程中，他们每个人不同的人生观也在冲突和较量……<br><a id=\"more\"></a> </p>\n<h2 id=\"观影有感\"><a href=\"#观影有感\" class=\"headerlink\" title=\"观影有感\"></a>观影有感</h2><h3 id=\"关于电影\"><a href=\"#关于电影\" class=\"headerlink\" title=\"关于电影\"></a>关于电影</h3><p>在看本片之前，我在网上看到过有人总结：“那些因为名字而被错过的电影”，我记得其中就有印度电影《三傻大闹宝莱坞》。我不记得其中是否有这部《十二怒汉》，但我知道我在很长一段时间内错过这部电影就是因为他的名字。“十二怒汉” 这个名字给我的第一感觉好像是类似“三百斯巴达勇士”一样，而我并不太喜欢这类型的电影。 </p>\n<p>至于，后面拿起这部电影看的原因是是在逛b站的时候，看到介绍这部电影的一个视频。通过那段视频我简单的了解了这部电影。然后找了一个周末的晚上，仔细观赏了这部电影。  </p>\n<p>由于拍摄年代比较久远，所以是黑白的。但这丝毫不影响导演和演员在黑白光影之间，讲述形象、深刻的故事。  </p>\n<p>不谈剧情，整个电影的一个半小时剧情，除了开场和结束的几个镜头，整个故事其余镜头都是在一个带洗手间的会议室中完成的。故事讲述得丝丝入扣，导演的才华和演员的演技，在这单调到离谱的场景中展现的淋漓尽致。  </p>\n<p>关于整部电影，有人说这是一部伟大的电影，我个人觉得，这部电影绝对对得住“伟大”两个字。非常推荐一看。  </p>\n<h3 id=\"我的感受\"><a href=\"#我的感受\" class=\"headerlink\" title=\"我的感受\"></a>我的感受</h3><h4 id=\"关于决策\"><a href=\"#关于决策\" class=\"headerlink\" title=\"关于决策\"></a>关于决策</h4><p>整部电影，最让我印象深刻的地方是当所有人都在选择“赞同”的时候，8号陪审员站出来选择“不赞同”。心理学上，有我们很熟悉的一个现象，叫“从众效应”，在很多时候，我们更喜欢，更愿意，站在大多数的一方。买东西时，我们会选择销量好的，在舆论方面，我们跟愿意去关注大家都关注的事物。</p>\n<p>8号评审员在“证据确凿”，除了自己外11个成员都投“赞成票”的情况下，勇敢的投出“反对票”，并阐述自己的观点。</p>\n<p>我不禁想到自己在做决策时候，我是否有勇气去做出这样的“投票”。在遇到大多数人反对自己观点的时候，我是否能坚持自己的想法，能坚持的与他辩论。我知道，很多时候这个答案都是否定的，这值得我去反思。</p>\n<h4 id=\"关于态度\"><a href=\"#关于态度\" class=\"headerlink\" title=\"关于态度\"></a>关于态度</h4><p>关于对待事情的态度，这个要从人物的关系说起。陪审团的成员都与他们所讨论的男孩在生活上是没有任何关系的。所以他们大多数人开始也并不太在乎他的生死。也不会在心里为男孩做辩解。这也是开始他对小男孩这件事情的一个态度。</p>\n<p>轻视的态度决定了，11位评审员不会深入的去思考整件事情，更加不会站在为小男孩辩解的角度去思考，因为这跟‘我’无关。</p>\n<p>当然，也正是因为他们对小男孩的态度是一种事不关己的态度，一种没有态度的态度，所以他们后面才能做到轻易的转换思路，为小男孩找到合理的解释。</p>\n<p>对待事情的态度决定，我们对事情的思考方式，从何决定了我们的行为。所以表明态度，要谨慎。</p>\n<h4 id=\"关于生命\"><a href=\"#关于生命\" class=\"headerlink\" title=\"关于生命\"></a>关于生命</h4><p>影片中，小男孩失去了父亲，也没有出现过他的母亲。除了8号评审员，片中出现的人物几乎没有人在意小男孩的生命。假如评审团中没有出现8号评审员，小男孩被判死刑，估计世界上也不会有人为他心痛，一个月后，一年以后，也不会有人记得世界上有小男孩这样一个人出现过。</p>\n<p>包括，片中指认小男孩的老人，一生没有什么作为，到死去之前也不会有人注意到他。</p>\n<p>这让我想到了电影《嫌疑人X的献身》中被数学家杀死的流浪汉，他的死去没有给世界带来丝毫的影响。</p>\n<p>我还想到了很多死去的伟人，他们的逝去得到了整个世界的关注。他们的生命在这个星球上留下了不可磨灭的印记。</p>\n<p>生命就是这样的神奇，可以灿烂如星空，也可以平淡如水滴。</p>\n<h3 id=\"还有很多\"><a href=\"#还有很多\" class=\"headerlink\" title=\"还有很多\"></a>还有很多</h3><p>影片看完了，这篇简短的观后感也差不多结束了。由于文字水平有限，也可能是很多东西没有体悟透彻，所以漏掉了很多。影片和文字结束了，但生活还在继续，我相信，这部电影收获的更多的东西，是我现在在没有感受到的，没有讲述出来的，他会无形的影响着我今后的生活，生活会越来越好。</p>\n<p>其他电影也是，其他书籍也是。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"相关介绍\"><a href=\"#相关介绍\" class=\"headerlink\" title=\"相关介绍\"></a>相关介绍</h2><h3 id=\"十二怒汉-12-Angry-Men-1957\"><a href=\"#十二怒汉-12-Angry-Men-1957\" class=\"headerlink\" title=\"十二怒汉 12 Angry Men (1957)\"></a>十二怒汉 12 Angry Men (1957)</h3><p><img src=\"https://i.loli.net/2017/12/28/5a44c091705d6.png\" alt=\"12nuhan.png\"></p>\n<h3 id=\"剧情简介\"><a href=\"#剧情简介\" class=\"headerlink\" title=\"剧情简介\"></a>剧情简介</h3><p>一个在贫民窟长大的18岁少年因为涉嫌杀害自己的父亲被告上法庭，证人言之凿凿，各方面的证据都对他极为不利。十二个不同职业的人组成了这个案件的陪审团，他们要在休息室达成一致的意见，裁定少年是否有罪，如果罪名成立，少年将会被判处死刑。  </p>\n<p>十二个陪审团成员各有不同，除了8号陪审员（H enry Fonda 饰）之外，其他人对这个犯罪事实如此清晰的案子不屑一顾，还没有开始讨论就认定了少年有罪。8号陪审员提出了自己的“合理疑点”，耐心地说服其他的陪审员，在这个过程中，他们每个人不同的人生观也在冲突和较量……<br>","more":"</p>\n<h2 id=\"观影有感\"><a href=\"#观影有感\" class=\"headerlink\" title=\"观影有感\"></a>观影有感</h2><h3 id=\"关于电影\"><a href=\"#关于电影\" class=\"headerlink\" title=\"关于电影\"></a>关于电影</h3><p>在看本片之前，我在网上看到过有人总结：“那些因为名字而被错过的电影”，我记得其中就有印度电影《三傻大闹宝莱坞》。我不记得其中是否有这部《十二怒汉》，但我知道我在很长一段时间内错过这部电影就是因为他的名字。“十二怒汉” 这个名字给我的第一感觉好像是类似“三百斯巴达勇士”一样，而我并不太喜欢这类型的电影。 </p>\n<p>至于，后面拿起这部电影看的原因是是在逛b站的时候，看到介绍这部电影的一个视频。通过那段视频我简单的了解了这部电影。然后找了一个周末的晚上，仔细观赏了这部电影。  </p>\n<p>由于拍摄年代比较久远，所以是黑白的。但这丝毫不影响导演和演员在黑白光影之间，讲述形象、深刻的故事。  </p>\n<p>不谈剧情，整个电影的一个半小时剧情，除了开场和结束的几个镜头，整个故事其余镜头都是在一个带洗手间的会议室中完成的。故事讲述得丝丝入扣，导演的才华和演员的演技，在这单调到离谱的场景中展现的淋漓尽致。  </p>\n<p>关于整部电影，有人说这是一部伟大的电影，我个人觉得，这部电影绝对对得住“伟大”两个字。非常推荐一看。  </p>\n<h3 id=\"我的感受\"><a href=\"#我的感受\" class=\"headerlink\" title=\"我的感受\"></a>我的感受</h3><h4 id=\"关于决策\"><a href=\"#关于决策\" class=\"headerlink\" title=\"关于决策\"></a>关于决策</h4><p>整部电影，最让我印象深刻的地方是当所有人都在选择“赞同”的时候，8号陪审员站出来选择“不赞同”。心理学上，有我们很熟悉的一个现象，叫“从众效应”，在很多时候，我们更喜欢，更愿意，站在大多数的一方。买东西时，我们会选择销量好的，在舆论方面，我们跟愿意去关注大家都关注的事物。</p>\n<p>8号评审员在“证据确凿”，除了自己外11个成员都投“赞成票”的情况下，勇敢的投出“反对票”，并阐述自己的观点。</p>\n<p>我不禁想到自己在做决策时候，我是否有勇气去做出这样的“投票”。在遇到大多数人反对自己观点的时候，我是否能坚持自己的想法，能坚持的与他辩论。我知道，很多时候这个答案都是否定的，这值得我去反思。</p>\n<h4 id=\"关于态度\"><a href=\"#关于态度\" class=\"headerlink\" title=\"关于态度\"></a>关于态度</h4><p>关于对待事情的态度，这个要从人物的关系说起。陪审团的成员都与他们所讨论的男孩在生活上是没有任何关系的。所以他们大多数人开始也并不太在乎他的生死。也不会在心里为男孩做辩解。这也是开始他对小男孩这件事情的一个态度。</p>\n<p>轻视的态度决定了，11位评审员不会深入的去思考整件事情，更加不会站在为小男孩辩解的角度去思考，因为这跟‘我’无关。</p>\n<p>当然，也正是因为他们对小男孩的态度是一种事不关己的态度，一种没有态度的态度，所以他们后面才能做到轻易的转换思路，为小男孩找到合理的解释。</p>\n<p>对待事情的态度决定，我们对事情的思考方式，从何决定了我们的行为。所以表明态度，要谨慎。</p>\n<h4 id=\"关于生命\"><a href=\"#关于生命\" class=\"headerlink\" title=\"关于生命\"></a>关于生命</h4><p>影片中，小男孩失去了父亲，也没有出现过他的母亲。除了8号评审员，片中出现的人物几乎没有人在意小男孩的生命。假如评审团中没有出现8号评审员，小男孩被判死刑，估计世界上也不会有人为他心痛，一个月后，一年以后，也不会有人记得世界上有小男孩这样一个人出现过。</p>\n<p>包括，片中指认小男孩的老人，一生没有什么作为，到死去之前也不会有人注意到他。</p>\n<p>这让我想到了电影《嫌疑人X的献身》中被数学家杀死的流浪汉，他的死去没有给世界带来丝毫的影响。</p>\n<p>我还想到了很多死去的伟人，他们的逝去得到了整个世界的关注。他们的生命在这个星球上留下了不可磨灭的印记。</p>\n<p>生命就是这样的神奇，可以灿烂如星空，也可以平淡如水滴。</p>\n<h3 id=\"还有很多\"><a href=\"#还有很多\" class=\"headerlink\" title=\"还有很多\"></a>还有很多</h3><p>影片看完了，这篇简短的观后感也差不多结束了。由于文字水平有限，也可能是很多东西没有体悟透彻，所以漏掉了很多。影片和文字结束了，但生活还在继续，我相信，这部电影收获的更多的东西，是我现在在没有感受到的，没有讲述出来的，他会无形的影响着我今后的生活，生活会越来越好。</p>\n<p>其他电影也是，其他书籍也是。</p>"},{"title":"简述应用程序接口(API)","date":"2017-05-20T12:07:31.000Z","desc":"简述应用程序接口(API)","keywords":"PHP API 接口","_content":"写下这个文章的原因是,我发现身边一些的朋友可能是因为之前没有接触过API,以至于对API有些不解和抵触.\n因为微信开发/地图定位/各种大数据的信息查询,让接口(api)成为了一个非常常用的工具.这篇文章是我自己的一些理解,由于本人也是个小白,肯定有很多地方不到位,希望能指出.首先,我们从API是什么开始说.\n## 1.API是什么?\n>**维基百科的解释是:**\n>应用程序接口 (**A**pplication **P**rogramming **I**nterface 简称:API)为：“‘电脑[操作系统](https://zh.wikipedia.org/wiki/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F)（Operating system）’或‘[程序库](https://zh.wikipedia.org/wiki/%E5%87%BD%E5%BC%8F%E5%BA%AB)’提供给应用程序调用使用的代码”。其主要目的是让应用程序开发人员得以调用一组[例程](https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6))功能，而无须考虑其底层的源代码为何、或理解其内部工作机制的细节。API本身是[抽象](https://zh.wikipedia.org/w/index.php?title=%E6%8A%BD%E8%B1%A1_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8)&action=edit&redlink=1)的，它仅定义了一个[接口](https://zh.wikipedia.org/wiki/%E4%BB%8B%E9%9D%A2_(%E9%9B%BB%E8%85%A6%E7%A7%91%E5%AD%B8))，而不涉及应用程序在实际实现过程中的具体操作。\n\n## 2.简单举例\n简而言之接口就是一个抽象的,不需要考虑内部细节的东西.你拿来用就可以了.这么讲可能抽象了一些,我们举个例子:\n以百度地图IP定位的API为例:\n**服务地址:**\n``http://api.map.baidu.com/location/ip``\n\n**接口参数:**\n![百度地图接口参数](http://upload-images.jianshu.io/upload_images/2229907-54cc1480dbcdce86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**返回结果:**\n\n```\n{\n   address: \"CN|北京|北京|None|CHINANET|1|None\", #地址 \n   content: #详细内容 \n       { address: \"北京市\", #简要地址 \n         address_detail: #详细地址信息 \n            { city: \"北京市\", #城市 \n            city_code: 131, #百度城市代码 \n            district: \"\", #区县 \n            province: \"北京市\", #省份 \n            street: \"\", #街道 \n            street_number: \"\" #门址 \n            }, point: #百度经纬度坐标值 \n            { x: \"116.39564504\", y: \"39.92998578\" \n            }\n       },\n     status: 0 #返回状态码 \n}\n```\n<u>那么,服务地址/接口参数/返回结果分别是什么意思呢?</u>\n我们一一来理解:\n**服务地址:** 即我们需要数据请求的页面地址.\n\n**请求参数** 有的时候我们不只从接口上取值,我们还需要用一种特殊的方式告诉服务器,我们需要什么数据,你给我们需要的就可以了,别瞎给.这种方式通常是URL传参的形式.比如百度的这个api就可以这样传.\n``http://api.map.baidu.com/location/ip?ak=E4805d16520de693a3fe707cdc962045&ip=202.198.16.3&coor=bd09ll``\n通过url,我们告诉百度,我们的ak(access key)是:E48....62045,我们要定位的ip是:202.198.16.3,coor是:bd09ll(告诉百度我们需要经纬坐标).\n这就是一中最最常用的使用API的方式.\n\n**返回结果** 上面我们通过URL传参的方式告诉了百度服务器,我们需要的是IP为202.198.16.3的位置信息,而且需要经纬坐标值(coor=bd09ll),并且我们的Ak值是对的,这时候,百度就会输出一个结果在页面里,通常是JSON字符串的形式.如:\n```\n{ \n  address: \"CN|吉林|长春|None|CERNET|1|None\", \n  content: { \n    address: \"吉林省长春市\", \n    address_detail: { \n      city: \"长春市\", \n      city_code: 53, \n      district: \"\", \n      province: \"吉林省\", \n      street: \"\", \n      street_number: \"\" \n    }, \n    point: { \n      x: \"125.31364243\", y: \"43.89833761\" \n    } \n  }, status: 0 \n}\n```\n我们可以通过读取url页面的形式来获取返回的json字符串.再应用到我们的项目中.\n***上述就是一个最简单的API使用,也是最本质/常用的一种.(传值和取值)***\n\n---\n从上面的例子中,我们就可以知道,为什么API不需要考虑程序的内部细节了吧?其实它就好像一个封装好的电池,我们放到卡槽里用就行了,不需要去了解内部结构.\n\n## 3.写一个简单的API\n对于大型的API内部封装的算法是非常复杂的.但它的原理并不难,我们自己就可以尝试着写上一个小小的API.这里我给个例子:\n```php\n<?php\n#假设存为index.php到根目录\nheader ('content-type:text/html;charset=utf-8');\n$con = mysql_connect(\"localhost\",\"root\",\"root\");\nif (!$con)\n  {\n  die('Could not connect: ' . mysql_error());\n  }\nmysql_select_db('chaxun',$con);\n\t$token=isset($_GET['token'])?$_GET['token']:\"1\";\nif ($token==123) {\n\t$sql=\"SELECT * FROM data;\";\n\t$result = mysql_query($sql);\n\n\twhile($row = mysql_fetch_array($result, MYSQL_ASSOC)){\n    $rst[]=$row;\n\t}\n\t$rst_json = json_encode($rst);\n\techo $rst_json;\n}else{\n\techo \"token错误!\";\n}\nmysql_close();\n?>\n```\n上面的例子,\n我们API服务地址就是:``http://localhost/index.php``\n接口参数我们需要传一个``token=123``\n返回结果就是一个查询数据库的结果,转换的json字符串.\n完整的url拼起来就是:http://localhost/index.php?token=123\n看吧,其实写个接口就这么简单.\n好困,睡了,明天再来补完整.","source":"_posts/简述应用程序接口(API).md","raw":"---\ntitle: 简述应用程序接口(API)\ndate: 2017-05-20 20:07:31\ntags:\n  - php \ndesc: 简述应用程序接口(API)\nkeywords: PHP API 接口 \ncategories:\n- PHP\n\n---\n写下这个文章的原因是,我发现身边一些的朋友可能是因为之前没有接触过API,以至于对API有些不解和抵触.\n因为微信开发/地图定位/各种大数据的信息查询,让接口(api)成为了一个非常常用的工具.这篇文章是我自己的一些理解,由于本人也是个小白,肯定有很多地方不到位,希望能指出.首先,我们从API是什么开始说.\n## 1.API是什么?\n>**维基百科的解释是:**\n>应用程序接口 (**A**pplication **P**rogramming **I**nterface 简称:API)为：“‘电脑[操作系统](https://zh.wikipedia.org/wiki/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F)（Operating system）’或‘[程序库](https://zh.wikipedia.org/wiki/%E5%87%BD%E5%BC%8F%E5%BA%AB)’提供给应用程序调用使用的代码”。其主要目的是让应用程序开发人员得以调用一组[例程](https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6))功能，而无须考虑其底层的源代码为何、或理解其内部工作机制的细节。API本身是[抽象](https://zh.wikipedia.org/w/index.php?title=%E6%8A%BD%E8%B1%A1_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8)&action=edit&redlink=1)的，它仅定义了一个[接口](https://zh.wikipedia.org/wiki/%E4%BB%8B%E9%9D%A2_(%E9%9B%BB%E8%85%A6%E7%A7%91%E5%AD%B8))，而不涉及应用程序在实际实现过程中的具体操作。\n\n## 2.简单举例\n简而言之接口就是一个抽象的,不需要考虑内部细节的东西.你拿来用就可以了.这么讲可能抽象了一些,我们举个例子:\n以百度地图IP定位的API为例:\n**服务地址:**\n``http://api.map.baidu.com/location/ip``\n\n**接口参数:**\n![百度地图接口参数](http://upload-images.jianshu.io/upload_images/2229907-54cc1480dbcdce86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**返回结果:**\n\n```\n{\n   address: \"CN|北京|北京|None|CHINANET|1|None\", #地址 \n   content: #详细内容 \n       { address: \"北京市\", #简要地址 \n         address_detail: #详细地址信息 \n            { city: \"北京市\", #城市 \n            city_code: 131, #百度城市代码 \n            district: \"\", #区县 \n            province: \"北京市\", #省份 \n            street: \"\", #街道 \n            street_number: \"\" #门址 \n            }, point: #百度经纬度坐标值 \n            { x: \"116.39564504\", y: \"39.92998578\" \n            }\n       },\n     status: 0 #返回状态码 \n}\n```\n<u>那么,服务地址/接口参数/返回结果分别是什么意思呢?</u>\n我们一一来理解:\n**服务地址:** 即我们需要数据请求的页面地址.\n\n**请求参数** 有的时候我们不只从接口上取值,我们还需要用一种特殊的方式告诉服务器,我们需要什么数据,你给我们需要的就可以了,别瞎给.这种方式通常是URL传参的形式.比如百度的这个api就可以这样传.\n``http://api.map.baidu.com/location/ip?ak=E4805d16520de693a3fe707cdc962045&ip=202.198.16.3&coor=bd09ll``\n通过url,我们告诉百度,我们的ak(access key)是:E48....62045,我们要定位的ip是:202.198.16.3,coor是:bd09ll(告诉百度我们需要经纬坐标).\n这就是一中最最常用的使用API的方式.\n\n**返回结果** 上面我们通过URL传参的方式告诉了百度服务器,我们需要的是IP为202.198.16.3的位置信息,而且需要经纬坐标值(coor=bd09ll),并且我们的Ak值是对的,这时候,百度就会输出一个结果在页面里,通常是JSON字符串的形式.如:\n```\n{ \n  address: \"CN|吉林|长春|None|CERNET|1|None\", \n  content: { \n    address: \"吉林省长春市\", \n    address_detail: { \n      city: \"长春市\", \n      city_code: 53, \n      district: \"\", \n      province: \"吉林省\", \n      street: \"\", \n      street_number: \"\" \n    }, \n    point: { \n      x: \"125.31364243\", y: \"43.89833761\" \n    } \n  }, status: 0 \n}\n```\n我们可以通过读取url页面的形式来获取返回的json字符串.再应用到我们的项目中.\n***上述就是一个最简单的API使用,也是最本质/常用的一种.(传值和取值)***\n\n---\n从上面的例子中,我们就可以知道,为什么API不需要考虑程序的内部细节了吧?其实它就好像一个封装好的电池,我们放到卡槽里用就行了,不需要去了解内部结构.\n\n## 3.写一个简单的API\n对于大型的API内部封装的算法是非常复杂的.但它的原理并不难,我们自己就可以尝试着写上一个小小的API.这里我给个例子:\n```php\n<?php\n#假设存为index.php到根目录\nheader ('content-type:text/html;charset=utf-8');\n$con = mysql_connect(\"localhost\",\"root\",\"root\");\nif (!$con)\n  {\n  die('Could not connect: ' . mysql_error());\n  }\nmysql_select_db('chaxun',$con);\n\t$token=isset($_GET['token'])?$_GET['token']:\"1\";\nif ($token==123) {\n\t$sql=\"SELECT * FROM data;\";\n\t$result = mysql_query($sql);\n\n\twhile($row = mysql_fetch_array($result, MYSQL_ASSOC)){\n    $rst[]=$row;\n\t}\n\t$rst_json = json_encode($rst);\n\techo $rst_json;\n}else{\n\techo \"token错误!\";\n}\nmysql_close();\n?>\n```\n上面的例子,\n我们API服务地址就是:``http://localhost/index.php``\n接口参数我们需要传一个``token=123``\n返回结果就是一个查询数据库的结果,转换的json字符串.\n完整的url拼起来就是:http://localhost/index.php?token=123\n看吧,其实写个接口就这么简单.\n好困,睡了,明天再来补完整.","slug":"简述应用程序接口(API)","published":1,"updated":"2017-12-29T14:35:13.606Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnom6xpp0030c0fyuewmghrm","content":"<p>写下这个文章的原因是,我发现身边一些的朋友可能是因为之前没有接触过API,以至于对API有些不解和抵触.<br>因为微信开发/地图定位/各种大数据的信息查询,让接口(api)成为了一个非常常用的工具.这篇文章是我自己的一些理解,由于本人也是个小白,肯定有很多地方不到位,希望能指出.首先,我们从API是什么开始说.</p>\n<h2 id=\"1-API是什么\"><a href=\"#1-API是什么\" class=\"headerlink\" title=\"1.API是什么?\"></a>1.API是什么?</h2><blockquote>\n<p><strong>维基百科的解释是:</strong><br>应用程序接口 (<strong>A</strong>pplication <strong>P</strong>rogramming <strong>I</strong>nterface 简称:API)为：“‘电脑<a href=\"https://zh.wikipedia.org/wiki/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F\" target=\"_blank\" rel=\"external\">操作系统</a>（Operating system）’或‘<a href=\"https://zh.wikipedia.org/wiki/%E5%87%BD%E5%BC%8F%E5%BA%AB\" target=\"_blank\" rel=\"external\">程序库</a>’提供给应用程序调用使用的代码”。其主要目的是让应用程序开发人员得以调用一组<a href=\"https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6\" target=\"_blank\" rel=\"external\">例程</a>)功能，而无须考虑其底层的源代码为何、或理解其内部工作机制的细节。API本身是<a href=\"https://zh.wikipedia.org/w/index.php?title=%E6%8A%BD%E8%B1%A1_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8\" target=\"_blank\" rel=\"external\">抽象</a>&amp;action=edit&amp;redlink=1)的，它仅定义了一个<a href=\"https://zh.wikipedia.org/wiki/%E4%BB%8B%E9%9D%A2_(%E9%9B%BB%E8%85%A6%E7%A7%91%E5%AD%B8\" target=\"_blank\" rel=\"external\">接口</a>)，而不涉及应用程序在实际实现过程中的具体操作。</p>\n</blockquote>\n<h2 id=\"2-简单举例\"><a href=\"#2-简单举例\" class=\"headerlink\" title=\"2.简单举例\"></a>2.简单举例</h2><p>简而言之接口就是一个抽象的,不需要考虑内部细节的东西.你拿来用就可以了.这么讲可能抽象了一些,我们举个例子:<br>以百度地图IP定位的API为例:<br><strong>服务地址:</strong><br><code>http://api.map.baidu.com/location/ip</code></p>\n<p><strong>接口参数:</strong><br><img src=\"http://upload-images.jianshu.io/upload_images/2229907-54cc1480dbcdce86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"百度地图接口参数\"></p>\n<p><strong>返回结果:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">   address: &quot;CN|北京|北京|None|CHINANET|1|None&quot;, #地址 </div><div class=\"line\">   content: #详细内容 </div><div class=\"line\">       &#123; address: &quot;北京市&quot;, #简要地址 </div><div class=\"line\">         address_detail: #详细地址信息 </div><div class=\"line\">            &#123; city: &quot;北京市&quot;, #城市 </div><div class=\"line\">            city_code: 131, #百度城市代码 </div><div class=\"line\">            district: &quot;&quot;, #区县 </div><div class=\"line\">            province: &quot;北京市&quot;, #省份 </div><div class=\"line\">            street: &quot;&quot;, #街道 </div><div class=\"line\">            street_number: &quot;&quot; #门址 </div><div class=\"line\">            &#125;, point: #百度经纬度坐标值 </div><div class=\"line\">            &#123; x: &quot;116.39564504&quot;, y: &quot;39.92998578&quot; </div><div class=\"line\">            &#125;</div><div class=\"line\">       &#125;,</div><div class=\"line\">     status: 0 #返回状态码 </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><u>那么,服务地址/接口参数/返回结果分别是什么意思呢?</u><br>我们一一来理解:<br><strong>服务地址:</strong> 即我们需要数据请求的页面地址.</p>\n<p><strong>请求参数</strong> 有的时候我们不只从接口上取值,我们还需要用一种特殊的方式告诉服务器,我们需要什么数据,你给我们需要的就可以了,别瞎给.这种方式通常是URL传参的形式.比如百度的这个api就可以这样传.<br><code>http://api.map.baidu.com/location/ip?ak=E4805d16520de693a3fe707cdc962045&amp;ip=202.198.16.3&amp;coor=bd09ll</code><br>通过url,我们告诉百度,我们的ak(access key)是:E48….62045,我们要定位的ip是:202.198.16.3,coor是:bd09ll(告诉百度我们需要经纬坐标).<br>这就是一中最最常用的使用API的方式.</p>\n<p><strong>返回结果</strong> 上面我们通过URL传参的方式告诉了百度服务器,我们需要的是IP为202.198.16.3的位置信息,而且需要经纬坐标值(coor=bd09ll),并且我们的Ak值是对的,这时候,百度就会输出一个结果在页面里,通常是JSON字符串的形式.如:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; </div><div class=\"line\">  address: &quot;CN|吉林|长春|None|CERNET|1|None&quot;, </div><div class=\"line\">  content: &#123; </div><div class=\"line\">    address: &quot;吉林省长春市&quot;, </div><div class=\"line\">    address_detail: &#123; </div><div class=\"line\">      city: &quot;长春市&quot;, </div><div class=\"line\">      city_code: 53, </div><div class=\"line\">      district: &quot;&quot;, </div><div class=\"line\">      province: &quot;吉林省&quot;, </div><div class=\"line\">      street: &quot;&quot;, </div><div class=\"line\">      street_number: &quot;&quot; </div><div class=\"line\">    &#125;, </div><div class=\"line\">    point: &#123; </div><div class=\"line\">      x: &quot;125.31364243&quot;, y: &quot;43.89833761&quot; </div><div class=\"line\">    &#125; </div><div class=\"line\">  &#125;, status: 0 </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们可以通过读取url页面的形式来获取返回的json字符串.再应用到我们的项目中.<br><strong><em>上述就是一个最简单的API使用,也是最本质/常用的一种.(传值和取值)</em></strong></p>\n<hr>\n<p>从上面的例子中,我们就可以知道,为什么API不需要考虑程序的内部细节了吧?其实它就好像一个封装好的电池,我们放到卡槽里用就行了,不需要去了解内部结构.</p>\n<h2 id=\"3-写一个简单的API\"><a href=\"#3-写一个简单的API\" class=\"headerlink\" title=\"3.写一个简单的API\"></a>3.写一个简单的API</h2><p>对于大型的API内部封装的算法是非常复杂的.但它的原理并不难,我们自己就可以尝试着写上一个小小的API.这里我给个例子:<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"comment\">#假设存为index.php到根目录</span></div><div class=\"line\">header (<span class=\"string\">'content-type:text/html;charset=utf-8'</span>);</div><div class=\"line\">$con = mysql_connect(<span class=\"string\">\"localhost\"</span>,<span class=\"string\">\"root\"</span>,<span class=\"string\">\"root\"</span>);</div><div class=\"line\"><span class=\"keyword\">if</span> (!$con)</div><div class=\"line\">  &#123;</div><div class=\"line\">  <span class=\"keyword\">die</span>(<span class=\"string\">'Could not connect: '</span> . mysql_error());</div><div class=\"line\">  &#125;</div><div class=\"line\">mysql_select_db(<span class=\"string\">'chaxun'</span>,$con);</div><div class=\"line\">\t$token=<span class=\"keyword\">isset</span>($_GET[<span class=\"string\">'token'</span>])?$_GET[<span class=\"string\">'token'</span>]:<span class=\"string\">\"1\"</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> ($token==<span class=\"number\">123</span>) &#123;</div><div class=\"line\">\t$sql=<span class=\"string\">\"SELECT * FROM data;\"</span>;</div><div class=\"line\">\t$result = mysql_query($sql);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">while</span>($row = mysql_fetch_array($result, MYSQL_ASSOC))&#123;</div><div class=\"line\">    $rst[]=$row;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t$rst_json = json_encode($rst);</div><div class=\"line\">\t<span class=\"keyword\">echo</span> $rst_json;</div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"token错误!\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">mysql_close();</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<p>上面的例子,<br>我们API服务地址就是:<code>http://localhost/index.php</code><br>接口参数我们需要传一个<code>token=123</code><br>返回结果就是一个查询数据库的结果,转换的json字符串.<br>完整的url拼起来就是:<a href=\"http://localhost/index.php?token=123\" target=\"_blank\" rel=\"external\">http://localhost/index.php?token=123</a><br>看吧,其实写个接口就这么简单.<br>好困,睡了,明天再来补完整.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>写下这个文章的原因是,我发现身边一些的朋友可能是因为之前没有接触过API,以至于对API有些不解和抵触.<br>因为微信开发/地图定位/各种大数据的信息查询,让接口(api)成为了一个非常常用的工具.这篇文章是我自己的一些理解,由于本人也是个小白,肯定有很多地方不到位,希望能指出.首先,我们从API是什么开始说.</p>\n<h2 id=\"1-API是什么\"><a href=\"#1-API是什么\" class=\"headerlink\" title=\"1.API是什么?\"></a>1.API是什么?</h2><blockquote>\n<p><strong>维基百科的解释是:</strong><br>应用程序接口 (<strong>A</strong>pplication <strong>P</strong>rogramming <strong>I</strong>nterface 简称:API)为：“‘电脑<a href=\"https://zh.wikipedia.org/wiki/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F\" target=\"_blank\" rel=\"external\">操作系统</a>（Operating system）’或‘<a href=\"https://zh.wikipedia.org/wiki/%E5%87%BD%E5%BC%8F%E5%BA%AB\" target=\"_blank\" rel=\"external\">程序库</a>’提供给应用程序调用使用的代码”。其主要目的是让应用程序开发人员得以调用一组<a href=\"https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6\" target=\"_blank\" rel=\"external\">例程</a>)功能，而无须考虑其底层的源代码为何、或理解其内部工作机制的细节。API本身是<a href=\"https://zh.wikipedia.org/w/index.php?title=%E6%8A%BD%E8%B1%A1_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8\" target=\"_blank\" rel=\"external\">抽象</a>&amp;action=edit&amp;redlink=1)的，它仅定义了一个<a href=\"https://zh.wikipedia.org/wiki/%E4%BB%8B%E9%9D%A2_(%E9%9B%BB%E8%85%A6%E7%A7%91%E5%AD%B8\" target=\"_blank\" rel=\"external\">接口</a>)，而不涉及应用程序在实际实现过程中的具体操作。</p>\n</blockquote>\n<h2 id=\"2-简单举例\"><a href=\"#2-简单举例\" class=\"headerlink\" title=\"2.简单举例\"></a>2.简单举例</h2><p>简而言之接口就是一个抽象的,不需要考虑内部细节的东西.你拿来用就可以了.这么讲可能抽象了一些,我们举个例子:<br>以百度地图IP定位的API为例:<br><strong>服务地址:</strong><br><code>http://api.map.baidu.com/location/ip</code></p>\n<p><strong>接口参数:</strong><br><img src=\"http://upload-images.jianshu.io/upload_images/2229907-54cc1480dbcdce86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"百度地图接口参数\"></p>\n<p><strong>返回结果:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">   address: &quot;CN|北京|北京|None|CHINANET|1|None&quot;, #地址 </div><div class=\"line\">   content: #详细内容 </div><div class=\"line\">       &#123; address: &quot;北京市&quot;, #简要地址 </div><div class=\"line\">         address_detail: #详细地址信息 </div><div class=\"line\">            &#123; city: &quot;北京市&quot;, #城市 </div><div class=\"line\">            city_code: 131, #百度城市代码 </div><div class=\"line\">            district: &quot;&quot;, #区县 </div><div class=\"line\">            province: &quot;北京市&quot;, #省份 </div><div class=\"line\">            street: &quot;&quot;, #街道 </div><div class=\"line\">            street_number: &quot;&quot; #门址 </div><div class=\"line\">            &#125;, point: #百度经纬度坐标值 </div><div class=\"line\">            &#123; x: &quot;116.39564504&quot;, y: &quot;39.92998578&quot; </div><div class=\"line\">            &#125;</div><div class=\"line\">       &#125;,</div><div class=\"line\">     status: 0 #返回状态码 </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><u>那么,服务地址/接口参数/返回结果分别是什么意思呢?</u><br>我们一一来理解:<br><strong>服务地址:</strong> 即我们需要数据请求的页面地址.</p>\n<p><strong>请求参数</strong> 有的时候我们不只从接口上取值,我们还需要用一种特殊的方式告诉服务器,我们需要什么数据,你给我们需要的就可以了,别瞎给.这种方式通常是URL传参的形式.比如百度的这个api就可以这样传.<br><code>http://api.map.baidu.com/location/ip?ak=E4805d16520de693a3fe707cdc962045&amp;ip=202.198.16.3&amp;coor=bd09ll</code><br>通过url,我们告诉百度,我们的ak(access key)是:E48….62045,我们要定位的ip是:202.198.16.3,coor是:bd09ll(告诉百度我们需要经纬坐标).<br>这就是一中最最常用的使用API的方式.</p>\n<p><strong>返回结果</strong> 上面我们通过URL传参的方式告诉了百度服务器,我们需要的是IP为202.198.16.3的位置信息,而且需要经纬坐标值(coor=bd09ll),并且我们的Ak值是对的,这时候,百度就会输出一个结果在页面里,通常是JSON字符串的形式.如:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; </div><div class=\"line\">  address: &quot;CN|吉林|长春|None|CERNET|1|None&quot;, </div><div class=\"line\">  content: &#123; </div><div class=\"line\">    address: &quot;吉林省长春市&quot;, </div><div class=\"line\">    address_detail: &#123; </div><div class=\"line\">      city: &quot;长春市&quot;, </div><div class=\"line\">      city_code: 53, </div><div class=\"line\">      district: &quot;&quot;, </div><div class=\"line\">      province: &quot;吉林省&quot;, </div><div class=\"line\">      street: &quot;&quot;, </div><div class=\"line\">      street_number: &quot;&quot; </div><div class=\"line\">    &#125;, </div><div class=\"line\">    point: &#123; </div><div class=\"line\">      x: &quot;125.31364243&quot;, y: &quot;43.89833761&quot; </div><div class=\"line\">    &#125; </div><div class=\"line\">  &#125;, status: 0 </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们可以通过读取url页面的形式来获取返回的json字符串.再应用到我们的项目中.<br><strong><em>上述就是一个最简单的API使用,也是最本质/常用的一种.(传值和取值)</em></strong></p>\n<hr>\n<p>从上面的例子中,我们就可以知道,为什么API不需要考虑程序的内部细节了吧?其实它就好像一个封装好的电池,我们放到卡槽里用就行了,不需要去了解内部结构.</p>\n<h2 id=\"3-写一个简单的API\"><a href=\"#3-写一个简单的API\" class=\"headerlink\" title=\"3.写一个简单的API\"></a>3.写一个简单的API</h2><p>对于大型的API内部封装的算法是非常复杂的.但它的原理并不难,我们自己就可以尝试着写上一个小小的API.这里我给个例子:<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"comment\">#假设存为index.php到根目录</span></div><div class=\"line\">header (<span class=\"string\">'content-type:text/html;charset=utf-8'</span>);</div><div class=\"line\">$con = mysql_connect(<span class=\"string\">\"localhost\"</span>,<span class=\"string\">\"root\"</span>,<span class=\"string\">\"root\"</span>);</div><div class=\"line\"><span class=\"keyword\">if</span> (!$con)</div><div class=\"line\">  &#123;</div><div class=\"line\">  <span class=\"keyword\">die</span>(<span class=\"string\">'Could not connect: '</span> . mysql_error());</div><div class=\"line\">  &#125;</div><div class=\"line\">mysql_select_db(<span class=\"string\">'chaxun'</span>,$con);</div><div class=\"line\">\t$token=<span class=\"keyword\">isset</span>($_GET[<span class=\"string\">'token'</span>])?$_GET[<span class=\"string\">'token'</span>]:<span class=\"string\">\"1\"</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> ($token==<span class=\"number\">123</span>) &#123;</div><div class=\"line\">\t$sql=<span class=\"string\">\"SELECT * FROM data;\"</span>;</div><div class=\"line\">\t$result = mysql_query($sql);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">while</span>($row = mysql_fetch_array($result, MYSQL_ASSOC))&#123;</div><div class=\"line\">    $rst[]=$row;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t$rst_json = json_encode($rst);</div><div class=\"line\">\t<span class=\"keyword\">echo</span> $rst_json;</div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"token错误!\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">mysql_close();</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<p>上面的例子,<br>我们API服务地址就是:<code>http://localhost/index.php</code><br>接口参数我们需要传一个<code>token=123</code><br>返回结果就是一个查询数据库的结果,转换的json字符串.<br>完整的url拼起来就是:<a href=\"http://localhost/index.php?token=123\" target=\"_blank\" rel=\"external\">http://localhost/index.php?token=123</a><br>看吧,其实写个接口就这么简单.<br>好困,睡了,明天再来补完整.</p>\n"},{"title":"如何更改MySQL的datadir目录","date":"2017-05-20T12:07:31.000Z","desc":"如何更改MySQL的datadir目录","keywords":"目录 MySQL 数据库","_content":"本人小白，遇到的问题也是小白的问题。写下心得是希望对其他的小白有所帮助。\n这两天在倒腾一个比较大的数据库，（Ubuntu环境）发现虚拟机硬盘不够了，所以添加了一块。但是加了硬盘又涉及到了修改mysql数据库的datadir。\n本以为只是简单的修改一下配置文件中的\n```\ndatadir=“目录”\n```\n就可以了。没想到修改后Mysql居然打不开了。\n<!--more-->\n于是又开始求助万能的百度:``如何修改Mysql的datadir目录``。结果还是有很多，但基本上是转载的同一篇文章。\n说是要修改\n```\nsocket=/var/lib/mysql/mysql.sock //mysql配置文件my.cnf中的这个值\n```\n还有修改mysql文件的所有者、权限等等。。ps：这一步还是有必要的。\n还要修改一堆文件。比如``/etc/init.d/mysqld`` 文件等等。秉着宁错过不放过的原则，我改改改。。然而还是没有什么用。。\n反而把配置文件弄得乱七八糟。。\n这时候，大神同事给了个建议，直接卸载了重装吧。\n然后就百度了一下：``Ubuntu如何干净的卸载mysql?``，得到方法如下：\n```\n1、删除 mysql\nsudo apt-get autoremove --purge mysql-server-5.5\nsudo apt-get remove mysql-server\nsudo apt-get autoremove mysql-server\nsudo apt-get remove mysql-common (非常重要)\n\n2、清理残留数据\ndpkg -l |grep ^rc|awk '{print $2}' |sudo xargs dpkg -P\n在最后清理数据的时候会弹出一个对话框，问你是否要清除数据，清除就可以完全卸载了。\n\n```\n然后又百度了一下：``Ubuntu安装mysql时如何修改datadir？``\n稍稍的改了一下找寻目标，结果就发现了一个和之前不一样的答案。\n>#####关于如何更改datadir目录的问题：\nubuntu默认安装mysql的时候，会将datadir设置为``/var/lib/mysql``下面，但是我们大多数时候都需要指定一个我们准备好的方便查找的目录为数据存储目录，我们可以在``my.cnf``下面更改``datadir``这一行，将'``=``'后边的目录更改成我们自己的目录即可。\n    例如：我将datadir改成``/data``下，则在my.cnf中做如下更改，在``[mysqld]``段\n```\nport            = 3306\nbasedir         = /usr\ndatadir         = /data/mysql\n\n```\n更改完成保存退出，可以重启mysql服务了，不知道您的服务器会不会报错，我的反正mysql是起不来了。只要将datadir换回来就能启动。出现这个问题的原因是在ubuntu中存在一个apparmor的服务。\n\n<b><i>这个服务主要作用是主要的作用是设置某个可执行程序的访问控制权限，可以限制程序 读/写某个目录/文件，打开/读/写网络端口等等。</i>(原来，我们虽然讲新的目录所有者改为了mysql,但我们没有告诉mysql要给新的目录什么权限，于是就悲剧了)</b>\n\n他的配置文件在``/etc/apparmor.d/``中，在这里我们可以看到一个``usr.sbin.mysqld``的配置文件，打开看一下就明白了。\n\n我们的日志路径、pid路径等等都存放在这里，所以我们要改datadir路径，这里也需要做更改，要更改log路径同样也要在这里更改。更改后配置如下：\n```\n  /logs/mysql/mysql.log rw,\n  /logs/mysql/mysql.err.log rw,\n  /data/mysql/ r,\n  /data/mysql/** rwk,\n  /logs/mysql/ r,\n  /logs/mysql/* rw,\n```\n 这是我更改过的路径。更改完成以后，因为这是一个服务，所以我们需要重启一下这个服务。\n```\n/etc/init.d/apparmor restart\n```\n这里基本上不会存在问题了，(我就是在这里重启了一下服务器，就OK了)，如果还是无法启动你的mysql，那么请使用如下命令\n```\nmysql_install_db --datadir=/data/mysql\n```\n查看一下是不是有报错信息，根据错误排查一下。\n\n最终按照这个方法解决了问题。真是多谢前辈。\n最后本人做个总结，只作为一种尝试解决方案：\n>######将mysql默认的datadir目录\"/var/lib/mysql\"改为 \"/home/mysql_data\"\n\n1、关掉数据库\n``` \nsudo /etc/init.d/mysql stop\n\n```\n2、因为我们指定的数据库文件目录为/home/mysql_data\n```\ncd /home                     //打开home\nmkdir mysql_data             //创建目录\nchown mysql:mysql mysql_data       //并修改其拥有者及所属群组为mysql:mysql.命令\n//修改mysql配置文件my.cnf：\n将 datadir=/var/lib/mysql 改为 datadir=/home/mysql_data\n\n```\n3、修改ubuntu中的安全设置\n```\nsudo gedit /etc/apparmor.d/usr.sbin.mysqld \n在这个文件里面加入权限设定，将原来的\n/var/lib/mysql/ r,\n/var/lib/mysql/** rwk,\n更换成(或直接添加)\n/home/mysql_data/mysql/ r,\n/home/mysql_data/mysql/** rwk,\n\n```\n4、重新初始化数据文件：执行\n```\nsudo mysql_install_data\n\n```\n5、启动mysql数据库服务(或重启服务器)：\n```\nsudo /etc/init.d/mysql start\n\n```\n这个方法中最值得一提是修改``/etc/apparmor.d/usr.sbin.mysqld``这个文件，改变应用程序的权限。这种配置权限方式让我这个小白对linux权限的理解又深刻了不少。","source":"_posts/如何更改MySQL的datadir目录.md","raw":"---\ntitle: 如何更改MySQL的datadir目录\ndate: 2017-05-20 20:07:31\ntags:\n  - Linux\n  - Mysql\n  - 数据库\ndesc: 如何更改MySQL的datadir目录\nkeywords: 目录 MySQL 数据库 \ncategories:\n- 数据库\n\n---\n本人小白，遇到的问题也是小白的问题。写下心得是希望对其他的小白有所帮助。\n这两天在倒腾一个比较大的数据库，（Ubuntu环境）发现虚拟机硬盘不够了，所以添加了一块。但是加了硬盘又涉及到了修改mysql数据库的datadir。\n本以为只是简单的修改一下配置文件中的\n```\ndatadir=“目录”\n```\n就可以了。没想到修改后Mysql居然打不开了。\n<!--more-->\n于是又开始求助万能的百度:``如何修改Mysql的datadir目录``。结果还是有很多，但基本上是转载的同一篇文章。\n说是要修改\n```\nsocket=/var/lib/mysql/mysql.sock //mysql配置文件my.cnf中的这个值\n```\n还有修改mysql文件的所有者、权限等等。。ps：这一步还是有必要的。\n还要修改一堆文件。比如``/etc/init.d/mysqld`` 文件等等。秉着宁错过不放过的原则，我改改改。。然而还是没有什么用。。\n反而把配置文件弄得乱七八糟。。\n这时候，大神同事给了个建议，直接卸载了重装吧。\n然后就百度了一下：``Ubuntu如何干净的卸载mysql?``，得到方法如下：\n```\n1、删除 mysql\nsudo apt-get autoremove --purge mysql-server-5.5\nsudo apt-get remove mysql-server\nsudo apt-get autoremove mysql-server\nsudo apt-get remove mysql-common (非常重要)\n\n2、清理残留数据\ndpkg -l |grep ^rc|awk '{print $2}' |sudo xargs dpkg -P\n在最后清理数据的时候会弹出一个对话框，问你是否要清除数据，清除就可以完全卸载了。\n\n```\n然后又百度了一下：``Ubuntu安装mysql时如何修改datadir？``\n稍稍的改了一下找寻目标，结果就发现了一个和之前不一样的答案。\n>#####关于如何更改datadir目录的问题：\nubuntu默认安装mysql的时候，会将datadir设置为``/var/lib/mysql``下面，但是我们大多数时候都需要指定一个我们准备好的方便查找的目录为数据存储目录，我们可以在``my.cnf``下面更改``datadir``这一行，将'``=``'后边的目录更改成我们自己的目录即可。\n    例如：我将datadir改成``/data``下，则在my.cnf中做如下更改，在``[mysqld]``段\n```\nport            = 3306\nbasedir         = /usr\ndatadir         = /data/mysql\n\n```\n更改完成保存退出，可以重启mysql服务了，不知道您的服务器会不会报错，我的反正mysql是起不来了。只要将datadir换回来就能启动。出现这个问题的原因是在ubuntu中存在一个apparmor的服务。\n\n<b><i>这个服务主要作用是主要的作用是设置某个可执行程序的访问控制权限，可以限制程序 读/写某个目录/文件，打开/读/写网络端口等等。</i>(原来，我们虽然讲新的目录所有者改为了mysql,但我们没有告诉mysql要给新的目录什么权限，于是就悲剧了)</b>\n\n他的配置文件在``/etc/apparmor.d/``中，在这里我们可以看到一个``usr.sbin.mysqld``的配置文件，打开看一下就明白了。\n\n我们的日志路径、pid路径等等都存放在这里，所以我们要改datadir路径，这里也需要做更改，要更改log路径同样也要在这里更改。更改后配置如下：\n```\n  /logs/mysql/mysql.log rw,\n  /logs/mysql/mysql.err.log rw,\n  /data/mysql/ r,\n  /data/mysql/** rwk,\n  /logs/mysql/ r,\n  /logs/mysql/* rw,\n```\n 这是我更改过的路径。更改完成以后，因为这是一个服务，所以我们需要重启一下这个服务。\n```\n/etc/init.d/apparmor restart\n```\n这里基本上不会存在问题了，(我就是在这里重启了一下服务器，就OK了)，如果还是无法启动你的mysql，那么请使用如下命令\n```\nmysql_install_db --datadir=/data/mysql\n```\n查看一下是不是有报错信息，根据错误排查一下。\n\n最终按照这个方法解决了问题。真是多谢前辈。\n最后本人做个总结，只作为一种尝试解决方案：\n>######将mysql默认的datadir目录\"/var/lib/mysql\"改为 \"/home/mysql_data\"\n\n1、关掉数据库\n``` \nsudo /etc/init.d/mysql stop\n\n```\n2、因为我们指定的数据库文件目录为/home/mysql_data\n```\ncd /home                     //打开home\nmkdir mysql_data             //创建目录\nchown mysql:mysql mysql_data       //并修改其拥有者及所属群组为mysql:mysql.命令\n//修改mysql配置文件my.cnf：\n将 datadir=/var/lib/mysql 改为 datadir=/home/mysql_data\n\n```\n3、修改ubuntu中的安全设置\n```\nsudo gedit /etc/apparmor.d/usr.sbin.mysqld \n在这个文件里面加入权限设定，将原来的\n/var/lib/mysql/ r,\n/var/lib/mysql/** rwk,\n更换成(或直接添加)\n/home/mysql_data/mysql/ r,\n/home/mysql_data/mysql/** rwk,\n\n```\n4、重新初始化数据文件：执行\n```\nsudo mysql_install_data\n\n```\n5、启动mysql数据库服务(或重启服务器)：\n```\nsudo /etc/init.d/mysql start\n\n```\n这个方法中最值得一提是修改``/etc/apparmor.d/usr.sbin.mysqld``这个文件，改变应用程序的权限。这种配置权限方式让我这个小白对linux权限的理解又深刻了不少。","slug":"如何更改MySQL的datadir目录","published":1,"updated":"2017-06-25T09:32:03.080Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnom6xpu0033c0fy8nrygdjb","content":"<p>本人小白，遇到的问题也是小白的问题。写下心得是希望对其他的小白有所帮助。<br>这两天在倒腾一个比较大的数据库，（Ubuntu环境）发现虚拟机硬盘不够了，所以添加了一块。但是加了硬盘又涉及到了修改mysql数据库的datadir。<br>本以为只是简单的修改一下配置文件中的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">datadir=“目录”</div></pre></td></tr></table></figure></p>\n<p>就可以了。没想到修改后Mysql居然打不开了。<br><a id=\"more\"></a><br>于是又开始求助万能的百度:<code>如何修改Mysql的datadir目录</code>。结果还是有很多，但基本上是转载的同一篇文章。<br>说是要修改<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket=/var/lib/mysql/mysql.sock //mysql配置文件my.cnf中的这个值</div></pre></td></tr></table></figure></p>\n<p>还有修改mysql文件的所有者、权限等等。。ps：这一步还是有必要的。<br>还要修改一堆文件。比如<code>/etc/init.d/mysqld</code> 文件等等。秉着宁错过不放过的原则，我改改改。。然而还是没有什么用。。<br>反而把配置文件弄得乱七八糟。。<br>这时候，大神同事给了个建议，直接卸载了重装吧。<br>然后就百度了一下：<code>Ubuntu如何干净的卸载mysql?</code>，得到方法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">1、删除 mysql</div><div class=\"line\">sudo apt-get autoremove --purge mysql-server-5.5</div><div class=\"line\">sudo apt-get remove mysql-server</div><div class=\"line\">sudo apt-get autoremove mysql-server</div><div class=\"line\">sudo apt-get remove mysql-common (非常重要)</div><div class=\"line\"></div><div class=\"line\">2、清理残留数据</div><div class=\"line\">dpkg -l |grep ^rc|awk &apos;&#123;print $2&#125;&apos; |sudo xargs dpkg -P</div><div class=\"line\">在最后清理数据的时候会弹出一个对话框，问你是否要清除数据，清除就可以完全卸载了。</div></pre></td></tr></table></figure></p>\n<p>然后又百度了一下：<code>Ubuntu安装mysql时如何修改datadir？</code><br>稍稍的改了一下找寻目标，结果就发现了一个和之前不一样的答案。</p>\n<blockquote>\n<p>#####关于如何更改datadir目录的问题：<br>ubuntu默认安装mysql的时候，会将datadir设置为<code>/var/lib/mysql</code>下面，但是我们大多数时候都需要指定一个我们准备好的方便查找的目录为数据存储目录，我们可以在<code>my.cnf</code>下面更改<code>datadir</code>这一行，将’<code>=</code>‘后边的目录更改成我们自己的目录即可。<br>    例如：我将datadir改成<code>/data</code>下，则在my.cnf中做如下更改，在<code>[mysqld]</code>段<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">port            = 3306</div><div class=\"line\">basedir         = /usr</div><div class=\"line\">datadir         = /data/mysql</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>更改完成保存退出，可以重启mysql服务了，不知道您的服务器会不会报错，我的反正mysql是起不来了。只要将datadir换回来就能启动。出现这个问题的原因是在ubuntu中存在一个apparmor的服务。</p>\n<p><b><i>这个服务主要作用是主要的作用是设置某个可执行程序的访问控制权限，可以限制程序 读/写某个目录/文件，打开/读/写网络端口等等。</i>(原来，我们虽然讲新的目录所有者改为了mysql,但我们没有告诉mysql要给新的目录什么权限，于是就悲剧了)</b></p>\n<p>他的配置文件在<code>/etc/apparmor.d/</code>中，在这里我们可以看到一个<code>usr.sbin.mysqld</code>的配置文件，打开看一下就明白了。</p>\n<p>我们的日志路径、pid路径等等都存放在这里，所以我们要改datadir路径，这里也需要做更改，要更改log路径同样也要在这里更改。更改后配置如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">/logs/mysql/mysql.log rw,</div><div class=\"line\">/logs/mysql/mysql.err.log rw,</div><div class=\"line\">/data/mysql/ r,</div><div class=\"line\">/data/mysql/** rwk,</div><div class=\"line\">/logs/mysql/ r,</div><div class=\"line\">/logs/mysql/* rw,</div></pre></td></tr></table></figure></p>\n<p> 这是我更改过的路径。更改完成以后，因为这是一个服务，所以我们需要重启一下这个服务。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/etc/init.d/apparmor restart</div></pre></td></tr></table></figure></p>\n<p>这里基本上不会存在问题了，(我就是在这里重启了一下服务器，就OK了)，如果还是无法启动你的mysql，那么请使用如下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql_install_db --datadir=/data/mysql</div></pre></td></tr></table></figure></p>\n<p>查看一下是不是有报错信息，根据错误排查一下。</p>\n<p>最终按照这个方法解决了问题。真是多谢前辈。<br>最后本人做个总结，只作为一种尝试解决方案：</p>\n<blockquote>\n<p>######将mysql默认的datadir目录”/var/lib/mysql”改为 “/home/mysql_data”</p>\n</blockquote>\n<p>1、关掉数据库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo /etc/init.d/mysql stop</div></pre></td></tr></table></figure></p>\n<p>2、因为我们指定的数据库文件目录为/home/mysql_data<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /home                     //打开home</div><div class=\"line\">mkdir mysql_data             //创建目录</div><div class=\"line\">chown mysql:mysql mysql_data       //并修改其拥有者及所属群组为mysql:mysql.命令</div><div class=\"line\">//修改mysql配置文件my.cnf：</div><div class=\"line\">将 datadir=/var/lib/mysql 改为 datadir=/home/mysql_data</div></pre></td></tr></table></figure></p>\n<p>3、修改ubuntu中的安全设置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo gedit /etc/apparmor.d/usr.sbin.mysqld </div><div class=\"line\">在这个文件里面加入权限设定，将原来的</div><div class=\"line\">/var/lib/mysql/ r,</div><div class=\"line\">/var/lib/mysql/** rwk,</div><div class=\"line\">更换成(或直接添加)</div><div class=\"line\">/home/mysql_data/mysql/ r,</div><div class=\"line\">/home/mysql_data/mysql/** rwk,</div></pre></td></tr></table></figure></p>\n<p>4、重新初始化数据文件：执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo mysql_install_data</div></pre></td></tr></table></figure></p>\n<p>5、启动mysql数据库服务(或重启服务器)：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo /etc/init.d/mysql start</div></pre></td></tr></table></figure></p>\n<p>这个方法中最值得一提是修改<code>/etc/apparmor.d/usr.sbin.mysqld</code>这个文件，改变应用程序的权限。这种配置权限方式让我这个小白对linux权限的理解又深刻了不少。</p>\n","site":{"data":{}},"excerpt":"<p>本人小白，遇到的问题也是小白的问题。写下心得是希望对其他的小白有所帮助。<br>这两天在倒腾一个比较大的数据库，（Ubuntu环境）发现虚拟机硬盘不够了，所以添加了一块。但是加了硬盘又涉及到了修改mysql数据库的datadir。<br>本以为只是简单的修改一下配置文件中的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">datadir=“目录”</div></pre></td></tr></table></figure></p>\n<p>就可以了。没想到修改后Mysql居然打不开了。<br>","more":"<br>于是又开始求助万能的百度:<code>如何修改Mysql的datadir目录</code>。结果还是有很多，但基本上是转载的同一篇文章。<br>说是要修改<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">socket=/var/lib/mysql/mysql.sock //mysql配置文件my.cnf中的这个值</div></pre></td></tr></table></figure></p>\n<p>还有修改mysql文件的所有者、权限等等。。ps：这一步还是有必要的。<br>还要修改一堆文件。比如<code>/etc/init.d/mysqld</code> 文件等等。秉着宁错过不放过的原则，我改改改。。然而还是没有什么用。。<br>反而把配置文件弄得乱七八糟。。<br>这时候，大神同事给了个建议，直接卸载了重装吧。<br>然后就百度了一下：<code>Ubuntu如何干净的卸载mysql?</code>，得到方法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">1、删除 mysql</div><div class=\"line\">sudo apt-get autoremove --purge mysql-server-5.5</div><div class=\"line\">sudo apt-get remove mysql-server</div><div class=\"line\">sudo apt-get autoremove mysql-server</div><div class=\"line\">sudo apt-get remove mysql-common (非常重要)</div><div class=\"line\"></div><div class=\"line\">2、清理残留数据</div><div class=\"line\">dpkg -l |grep ^rc|awk &apos;&#123;print $2&#125;&apos; |sudo xargs dpkg -P</div><div class=\"line\">在最后清理数据的时候会弹出一个对话框，问你是否要清除数据，清除就可以完全卸载了。</div></pre></td></tr></table></figure></p>\n<p>然后又百度了一下：<code>Ubuntu安装mysql时如何修改datadir？</code><br>稍稍的改了一下找寻目标，结果就发现了一个和之前不一样的答案。</p>\n<blockquote>\n<p>#####关于如何更改datadir目录的问题：<br>ubuntu默认安装mysql的时候，会将datadir设置为<code>/var/lib/mysql</code>下面，但是我们大多数时候都需要指定一个我们准备好的方便查找的目录为数据存储目录，我们可以在<code>my.cnf</code>下面更改<code>datadir</code>这一行，将’<code>=</code>‘后边的目录更改成我们自己的目录即可。<br>    例如：我将datadir改成<code>/data</code>下，则在my.cnf中做如下更改，在<code>[mysqld]</code>段<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">port            = 3306</div><div class=\"line\">basedir         = /usr</div><div class=\"line\">datadir         = /data/mysql</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>更改完成保存退出，可以重启mysql服务了，不知道您的服务器会不会报错，我的反正mysql是起不来了。只要将datadir换回来就能启动。出现这个问题的原因是在ubuntu中存在一个apparmor的服务。</p>\n<p><b><i>这个服务主要作用是主要的作用是设置某个可执行程序的访问控制权限，可以限制程序 读/写某个目录/文件，打开/读/写网络端口等等。</i>(原来，我们虽然讲新的目录所有者改为了mysql,但我们没有告诉mysql要给新的目录什么权限，于是就悲剧了)</b></p>\n<p>他的配置文件在<code>/etc/apparmor.d/</code>中，在这里我们可以看到一个<code>usr.sbin.mysqld</code>的配置文件，打开看一下就明白了。</p>\n<p>我们的日志路径、pid路径等等都存放在这里，所以我们要改datadir路径，这里也需要做更改，要更改log路径同样也要在这里更改。更改后配置如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">/logs/mysql/mysql.log rw,</div><div class=\"line\">/logs/mysql/mysql.err.log rw,</div><div class=\"line\">/data/mysql/ r,</div><div class=\"line\">/data/mysql/** rwk,</div><div class=\"line\">/logs/mysql/ r,</div><div class=\"line\">/logs/mysql/* rw,</div></pre></td></tr></table></figure></p>\n<p> 这是我更改过的路径。更改完成以后，因为这是一个服务，所以我们需要重启一下这个服务。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/etc/init.d/apparmor restart</div></pre></td></tr></table></figure></p>\n<p>这里基本上不会存在问题了，(我就是在这里重启了一下服务器，就OK了)，如果还是无法启动你的mysql，那么请使用如下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql_install_db --datadir=/data/mysql</div></pre></td></tr></table></figure></p>\n<p>查看一下是不是有报错信息，根据错误排查一下。</p>\n<p>最终按照这个方法解决了问题。真是多谢前辈。<br>最后本人做个总结，只作为一种尝试解决方案：</p>\n<blockquote>\n<p>######将mysql默认的datadir目录”/var/lib/mysql”改为 “/home/mysql_data”</p>\n</blockquote>\n<p>1、关掉数据库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo /etc/init.d/mysql stop</div></pre></td></tr></table></figure></p>\n<p>2、因为我们指定的数据库文件目录为/home/mysql_data<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /home                     //打开home</div><div class=\"line\">mkdir mysql_data             //创建目录</div><div class=\"line\">chown mysql:mysql mysql_data       //并修改其拥有者及所属群组为mysql:mysql.命令</div><div class=\"line\">//修改mysql配置文件my.cnf：</div><div class=\"line\">将 datadir=/var/lib/mysql 改为 datadir=/home/mysql_data</div></pre></td></tr></table></figure></p>\n<p>3、修改ubuntu中的安全设置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo gedit /etc/apparmor.d/usr.sbin.mysqld </div><div class=\"line\">在这个文件里面加入权限设定，将原来的</div><div class=\"line\">/var/lib/mysql/ r,</div><div class=\"line\">/var/lib/mysql/** rwk,</div><div class=\"line\">更换成(或直接添加)</div><div class=\"line\">/home/mysql_data/mysql/ r,</div><div class=\"line\">/home/mysql_data/mysql/** rwk,</div></pre></td></tr></table></figure></p>\n<p>4、重新初始化数据文件：执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo mysql_install_data</div></pre></td></tr></table></figure></p>\n<p>5、启动mysql数据库服务(或重启服务器)：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo /etc/init.d/mysql start</div></pre></td></tr></table></figure></p>\n<p>这个方法中最值得一提是修改<code>/etc/apparmor.d/usr.sbin.mysqld</code>这个文件，改变应用程序的权限。这种配置权限方式让我这个小白对linux权限的理解又深刻了不少。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjnom6wnh0000c0fy17tanfmo","category_id":"cjnom6wny0002c0fyo4pprnln","_id":"cjnom6wp1000bc0fywfvwjxr7"},{"post_id":"cjnom6wnt0001c0fygfjuq102","category_id":"cjnom6wor0007c0fyqlh7b4by","_id":"cjnom6wph000ic0fy7skf94ir"},{"post_id":"cjnom6wo50004c0fycuyin9f9","category_id":"cjnom6wpa000dc0fyduy68t0p","_id":"cjnom6wq9000oc0fy6eq3whqu"},{"post_id":"cjnom6wpd000hc0fy3seonzau","category_id":"cjnom6wor0007c0fyqlh7b4by","_id":"cjnom6wqf000tc0fyyd16sibk"},{"post_id":"cjnom6wpn000lc0fyivzw9ayw","category_id":"cjnom6wor0007c0fyqlh7b4by","_id":"cjnom6wqo000wc0fy2ff84pm2"},{"post_id":"cjnom6wo80005c0fy5q2kvwfx","category_id":"cjnom6wpj000jc0fyaanikgj0","_id":"cjnom6wqr0011c0fy49q5m89m"},{"post_id":"cjnom6wqg000vc0fygc54fh7s","category_id":"cjnom6wqb000qc0fyv0c1gak7","_id":"cjnom6wqz0013c0fyzwt7nku0"},{"post_id":"cjnom6wop0006c0fy4mel2i4d","category_id":"cjnom6wqb000qc0fyv0c1gak7","_id":"cjnom6wr40018c0fyspmlxnqy"},{"post_id":"cjnom6wqs0012c0fy5f05ta1r","category_id":"cjnom6wor0007c0fyqlh7b4by","_id":"cjnom6wr7001ac0fyyiu5e5jj"},{"post_id":"cjnom6wow000ac0fyc3ip3y64","category_id":"cjnom6wqq000zc0fy75n0dbm7","_id":"cjnom6wrh001ec0fy5baa2xvz"},{"post_id":"cjnom6wr50019c0fyy7kknjyp","category_id":"cjnom6wqb000qc0fyv0c1gak7","_id":"cjnom6wrj001gc0fyxkpbewc0"},{"post_id":"cjnom6wp3000cc0fyky6x8zzx","category_id":"cjnom6wr10015c0fynnwzxs2j","_id":"cjnom6wrj001ic0fykmzwg1py"},{"post_id":"cjnom6wr8001bc0fywgrp0fl1","category_id":"cjnom6wpa000dc0fyduy68t0p","_id":"cjnom6wrl001mc0fypx0o6aa7"},{"post_id":"cjnom6wpb000fc0fyfqkd5qm0","category_id":"cjnom6wrg001cc0fy1f7404gq","_id":"cjnom6wrl001nc0fy2p50f1b2"},{"post_id":"cjnom6wqe000sc0fy5pc5okcl","category_id":"cjnom6wqb000qc0fyv0c1gak7","_id":"cjnom6wrt001rc0fy3ns9kpic"},{"post_id":"cjnom6wqp000yc0fyg9uyku80","category_id":"cjnom6wrm001oc0fyhtcmefh6","_id":"cjnom6wry001uc0fym8bk22kr"},{"post_id":"cjnom6xoy002vc0fyplv42t7p","category_id":"cjnom6wqq000zc0fy75n0dbm7","_id":"cjnom6xpt0031c0fyl7s0nkry"},{"post_id":"cjnom6xp8002xc0fyfc2sezpj","category_id":"cjnom6wpa000dc0fyduy68t0p","_id":"cjnom6xpw0034c0fyjqjzber9"},{"post_id":"cjnom6xpp0030c0fyuewmghrm","category_id":"cjnom6wny0002c0fyo4pprnln","_id":"cjnom6xq00036c0fyofp49uu3"},{"post_id":"cjnom6xpu0033c0fy8nrygdjb","category_id":"cjnom6wqb000qc0fyv0c1gak7","_id":"cjnom6xq50038c0fy8my2r38m"}],"PostTag":[{"post_id":"cjnom6wnh0000c0fy17tanfmo","tag_id":"cjnom6wo30003c0fywbi1nqdq","_id":"cjnom6wov0009c0fyrnosu72f"},{"post_id":"cjnom6wnt0001c0fygfjuq102","tag_id":"cjnom6wos0008c0fydj0239n9","_id":"cjnom6wpc000gc0fy98sbp162"},{"post_id":"cjnom6wpd000hc0fy3seonzau","tag_id":"cjnom6wos0008c0fydj0239n9","_id":"cjnom6wq3000mc0fy23xwilan"},{"post_id":"cjnom6wpn000lc0fyivzw9ayw","tag_id":"cjnom6wos0008c0fydj0239n9","_id":"cjnom6wqa000pc0fyfluhkg6h"},{"post_id":"cjnom6wo50004c0fycuyin9f9","tag_id":"cjnom6wpb000ec0fyhn0fbdo3","_id":"cjnom6wqg000uc0fy8bf5qycp"},{"post_id":"cjnom6wo50004c0fycuyin9f9","tag_id":"cjnom6wpl000kc0fyhx31ft6i","_id":"cjnom6wqo000xc0fyevd5z474"},{"post_id":"cjnom6wqs0012c0fy5f05ta1r","tag_id":"cjnom6wos0008c0fydj0239n9","_id":"cjnom6wr30017c0fyn08kmpzf"},{"post_id":"cjnom6wo80005c0fy5q2kvwfx","tag_id":"cjnom6wqc000rc0fyg9d9k21w","_id":"cjnom6wri001fc0fy0ewm6nim"},{"post_id":"cjnom6wo80005c0fy5q2kvwfx","tag_id":"cjnom6wqq0010c0fyfx5aigjl","_id":"cjnom6wrj001hc0fyod138chw"},{"post_id":"cjnom6wo80005c0fy5q2kvwfx","tag_id":"cjnom6wr20016c0fy5u2ttcbr","_id":"cjnom6wrl001lc0fytzu5qln0"},{"post_id":"cjnom6wop0006c0fy4mel2i4d","tag_id":"cjnom6wrh001dc0fywtwuky0p","_id":"cjnom6wrr001qc0fy1a1uqhl0"},{"post_id":"cjnom6wop0006c0fy4mel2i4d","tag_id":"cjnom6wrk001kc0fy827144ne","_id":"cjnom6wru001sc0fycl7mzo5k"},{"post_id":"cjnom6wow000ac0fyc3ip3y64","tag_id":"cjnom6wro001pc0fyvrjmys5e","_id":"cjnom6wrz001wc0fyv59m8uvk"},{"post_id":"cjnom6wow000ac0fyc3ip3y64","tag_id":"cjnom6wrw001tc0fyav1peys5","_id":"cjnom6ws0001xc0fy7heiz0d6"},{"post_id":"cjnom6wp3000cc0fyky6x8zzx","tag_id":"cjnom6wry001vc0fymrc1mc9e","_id":"cjnom6ws20020c0fy6zr6fyka"},{"post_id":"cjnom6wp3000cc0fyky6x8zzx","tag_id":"cjnom6ws0001yc0fyaqhmux49","_id":"cjnom6ws20021c0fy9tgwjm0e"},{"post_id":"cjnom6wpb000fc0fyfqkd5qm0","tag_id":"cjnom6ws2001zc0fyt57wsekq","_id":"cjnom6ws40024c0fy5qwhhz5q"},{"post_id":"cjnom6wpb000fc0fyfqkd5qm0","tag_id":"cjnom6ws0001yc0fyaqhmux49","_id":"cjnom6ws50025c0fy7p9q9h5k"},{"post_id":"cjnom6wqe000sc0fy5pc5okcl","tag_id":"cjnom6wrh001dc0fywtwuky0p","_id":"cjnom6ws70028c0fyy3nq8gd0"},{"post_id":"cjnom6wqe000sc0fy5pc5okcl","tag_id":"cjnom6wrk001kc0fy827144ne","_id":"cjnom6ws80029c0fyamr8xmns"},{"post_id":"cjnom6wqg000vc0fygc54fh7s","tag_id":"cjnom6ws60027c0fy4z9j4nud","_id":"cjnom6wsb002cc0fyauiz0619"},{"post_id":"cjnom6wqg000vc0fygc54fh7s","tag_id":"cjnom6wrk001kc0fy827144ne","_id":"cjnom6wsb002dc0fyzragoaz2"},{"post_id":"cjnom6wqp000yc0fyg9uyku80","tag_id":"cjnom6wsa002bc0fy37fv1wix","_id":"cjnom6wsd002fc0fydf6lz976"},{"post_id":"cjnom6wqp000yc0fyg9uyku80","tag_id":"cjnom6wpl000kc0fyhx31ft6i","_id":"cjnom6wsd002gc0fy1mq936zx"},{"post_id":"cjnom6wqz0014c0fy2rwhsh25","tag_id":"cjnom6wsc002ec0fys1us99z7","_id":"cjnom6wsi002kc0fyyzjkybkg"},{"post_id":"cjnom6wqz0014c0fy2rwhsh25","tag_id":"cjnom6wse002hc0fyt84n0ovh","_id":"cjnom6wsi002lc0fyigto3zoi"},{"post_id":"cjnom6wqz0014c0fy2rwhsh25","tag_id":"cjnom6wsf002ic0fy1l6qd5qo","_id":"cjnom6wsk002nc0fynhavur6d"},{"post_id":"cjnom6wr50019c0fyy7kknjyp","tag_id":"cjnom6wqq0010c0fyfx5aigjl","_id":"cjnom6wsm002pc0fyzfik1q6z"},{"post_id":"cjnom6wr50019c0fyy7kknjyp","tag_id":"cjnom6wqc000rc0fyg9d9k21w","_id":"cjnom6wsm002qc0fyidlo0n63"},{"post_id":"cjnom6wr50019c0fyy7kknjyp","tag_id":"cjnom6wr20016c0fy5u2ttcbr","_id":"cjnom6wsm002rc0fyauevce9d"},{"post_id":"cjnom6wr50019c0fyy7kknjyp","tag_id":"cjnom6wsg002jc0fyoujiyyu1","_id":"cjnom6wsm002sc0fyclbkkt4r"},{"post_id":"cjnom6wr50019c0fyy7kknjyp","tag_id":"cjnom6wrk001kc0fy827144ne","_id":"cjnom6wsn002tc0fy1ewrb2k0"},{"post_id":"cjnom6wr8001bc0fywgrp0fl1","tag_id":"cjnom6wsl002oc0fy3hsz8x13","_id":"cjnom6wsn002uc0fyp4luzm8w"},{"post_id":"cjnom6xoy002vc0fyplv42t7p","tag_id":"cjnom6wro001pc0fyvrjmys5e","_id":"cjnom6xpn002zc0fyvb0sepll"},{"post_id":"cjnom6xp8002xc0fyfc2sezpj","tag_id":"cjnom6wsl002oc0fy3hsz8x13","_id":"cjnom6xpu0032c0fy50oxwxjc"},{"post_id":"cjnom6xpp0030c0fyuewmghrm","tag_id":"cjnom6wo30003c0fywbi1nqdq","_id":"cjnom6xpw0035c0fyl1mb1zac"},{"post_id":"cjnom6xpu0033c0fy8nrygdjb","tag_id":"cjnom6ws0001yc0fyaqhmux49","_id":"cjnom6xq10037c0fylbxgdmli"},{"post_id":"cjnom6xpu0033c0fy8nrygdjb","tag_id":"cjnom6wrh001dc0fywtwuky0p","_id":"cjnom6xq60039c0fyer8snat9"},{"post_id":"cjnom6xpu0033c0fy8nrygdjb","tag_id":"cjnom6wrk001kc0fy827144ne","_id":"cjnom6xq8003ac0fypfxng657"}],"Tag":[{"name":"php","_id":"cjnom6wo30003c0fywbi1nqdq"},{"name":"Elasticsearch","_id":"cjnom6wos0008c0fydj0239n9"},{"name":"心情记录","_id":"cjnom6wpb000ec0fyhn0fbdo3"},{"name":"生活","_id":"cjnom6wpl000kc0fyhx31ft6i"},{"name":"Hadoop","_id":"cjnom6wqc000rc0fyg9d9k21w"},{"name":"HBase","_id":"cjnom6wqq0010c0fyfx5aigjl"},{"name":"大数据","_id":"cjnom6wr20016c0fy5u2ttcbr"},{"name":"Mysql","_id":"cjnom6wrh001dc0fywtwuky0p"},{"name":"数据库","_id":"cjnom6wrk001kc0fy827144ne"},{"name":"Python","_id":"cjnom6wro001pc0fyvrjmys5e"},{"name":"正则表达式","_id":"cjnom6wrw001tc0fyav1peys5"},{"name":"SSH","_id":"cjnom6wry001vc0fymrc1mc9e"},{"name":"Linux","_id":"cjnom6ws0001yc0fyaqhmux49"},{"name":"工具","_id":"cjnom6ws2001zc0fyt57wsekq"},{"name":"Redis","_id":"cjnom6ws60027c0fy4z9j4nud"},{"name":"读书笔记","_id":"cjnom6wsa002bc0fy37fv1wix"},{"name":"前端","_id":"cjnom6wsc002ec0fys1us99z7"},{"name":"PHP","_id":"cjnom6wse002hc0fyt84n0ovh"},{"name":"分页","_id":"cjnom6wsf002ic0fy1l6qd5qo"},{"name":"shell","_id":"cjnom6wsg002jc0fyoujiyyu1"},{"name":"电影","_id":"cjnom6wsl002oc0fy3hsz8x13"}]}}