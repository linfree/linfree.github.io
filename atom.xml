<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>静思地</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.fbi.st/"/>
  <updated>2019-12-27T04:38:04.902Z</updated>
  <id>http://blog.fbi.st/</id>
  
  <author>
    <name>Lin Free</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一段优雅的高级正则打开[断言]之门</title>
    <link href="http://blog.fbi.st/2019/10/10/%E4%B8%80%E6%AE%B5%E4%BC%98%E9%9B%85%E7%9A%84%E9%AB%98%E7%BA%A7%E6%AD%A3%E5%88%99%E6%89%93%E5%BC%80%5B%E6%96%AD%E8%A8%80%5D%E4%B9%8B%E9%97%A8/"/>
    <id>http://blog.fbi.st/2019/10/10/一段优雅的高级正则打开[断言]之门/</id>
    <published>2019-10-10T15:32:52.000Z</published>
    <updated>2019-12-27T04:38:04.902Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>技术群里的群友又提出这样一个问题：</p><blockquote><p>能用一个正则表达式，来判断一个密码是否即包含数字，又包含字母，且长度至少为6位吗？</p></blockquote><a id="more"></a><h2 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h2><ol><li>长度要6位。（可能用到<code>{6,}</code>限制长度）</li><li>必须要有数字。 （可能要<code>\d</code>,<code>[0-9]</code>)</li><li>必须要有字母。 （可能要<code>[A-Za-z]</code>）</li></ol><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>如果这个问题要是用php或者py代码验证都非常简单。几个if就解决了。  （可能</p><p>但是要求一个正则解决。难道要用正则的if？正则有if吗？？</p><p>一查还真有！</p><h2 id="正则if-then-else"><a href="#正则if-then-else" class="headerlink" title="正则if then else"></a>正则if then else</h2><h3 id="正向先行断言的形式"><a href="#正向先行断言的形式" class="headerlink" title="正向先行断言的形式"></a>正向先行断言的形式</h3><figure class="highlight re"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(?(?=regex)<span class="keyword">then</span><span class="pattern-match">|<span class="keyword">else</span>)</span></span><br></pre></td></tr></table></figure><p>解释是：  </p><blockquote><p>如果满足正则regex匹配成功，则必须匹配then部分，否则匹配else部分。四种断言形式都可以使用。  </p></blockquote><p>举个栗子：  </p><figure class="highlight re"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(?(?=(\d&#123;<span class="number">6</span>,&#125;))\d*<span class="pattern-match">|1)<span class="constructor">$</span></span></span><br></pre></td></tr></table></figure><p>当满足<code>\d{6,}</code>时，即大于六个以上数字的时候匹配<code>\d*</code>，即全部是数字。<br>不满足<code>\d{6,}</code>时，匹配数字<code>1</code>.</p><p><img src="https://i.loli.net/2019/12/27/8JbTIFnlez49Q2O.png" alt="正则结果.jpg"></p><h3 id="正向后行断言的形式"><a href="#正向后行断言的形式" class="headerlink" title="正向后行断言的形式"></a>正向后行断言的形式</h3><p>该表达式，如果前面是regex的话，匹配后面的then，否则匹配else<br><figure class="highlight re"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(?(?&lt;=regex)<span class="keyword">then</span><span class="pattern-match">|<span class="keyword">else</span>)</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2019/12/27/8JbTIFnlez49Q2O.png" alt="1577416282_1_.jpg"></p><h2 id="正则断言"><a href="#正则断言" class="headerlink" title="正则断言"></a>正则断言</h2><p>if else似乎还是不能优雅的解决问题。但是抛出一个新概念：断言。</p><p>正则断言包括</p><blockquote><ul><li><p>零宽：只匹配位置，在匹配过程中，不占用字符，所以被称为零宽</p></li><li><p>先行：正则引擎在扫描字符的时候，从左往右扫描，匹配扫描指针未扫描过的字符，先于指针，故称先行</p></li><li><p>后行：匹配指针已扫描过的字符，后于指针到达该字符，故称后行，即产生回溯</p></li><li><p>正向：即匹配括号中的表达式</p></li><li><p>负向：不匹配括号中的表达式</p></li></ul></blockquote><h3 id="零宽断言"><a href="#零宽断言" class="headerlink" title="零宽断言"></a>零宽断言</h3><p>零宽正向先行断言，又称正向向前查找（positive lookhead）<br><code>(?=pattern)</code>：某位置后面紧接着的字符序列要匹配 pattern</p><p>例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`sinM.`</span>.match(<span class="regexp">/sin(?=M\.)/g</span>); <span class="comment">// ["sin"]</span></span><br><span class="line"><span class="string">`M.sin`</span>.match(<span class="regexp">/sin(?=M\.)/g</span>); <span class="comment">// null</span></span><br></pre></td></tr></table></figure></p><p>第一个 sin 会匹配，因为他后面有 pattern</p><h2 id="一个优雅的解"><a href="#一个优雅的解" class="headerlink" title="一个优雅的解"></a>一个优雅的解</h2><p>最后,综合一下思路的几个正则段，正则小王子给出这样的一个答案：<br><figure class="highlight re"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^.*(?=.&#123;<span class="number">6</span>,&#125;)(?=.*\d)(?=.*<span class="literal">[A-Z<span class="identifier">a</span>-<span class="identifier">z</span>]</span>).*$</span><br></pre></td></tr></table></figure></p><p>真漂亮。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;技术群里的群友又提出这样一个问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;能用一个正则表达式，来判断一个密码是否即包含数字，又包含字母，且长度至少为6位吗？&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="php" scheme="http://blog.fbi.st/categories/php/"/>
    
    
      <category term="php" scheme="http://blog.fbi.st/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>匹配IPv4的最强正则</title>
    <link href="http://blog.fbi.st/2019/10/09/%E5%8C%B9%E9%85%8DIPv4%E7%9A%84%E6%9C%80%E5%BC%BA%E6%AD%A3%E5%88%99/"/>
    <id>http://blog.fbi.st/2019/10/09/匹配IPv4的最强正则/</id>
    <published>2019-10-09T13:52:02.000Z</published>
    <updated>2019-12-27T04:40:47.965Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>技术群里的群友提出这样一个问题：</p><blockquote><p>php里面，能够有效匹配任意一个正常输入的ipv4地址，最短的正则表达式是什么？</p></blockquote><a id="more"></a><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><ol><li>ip地址范围是<code>0.0.0.0 - 255.255.255.255</code>  </li><li>除非是0，不能以0开头  </li><li>前面三个有点,末尾不能有点  </li></ol><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>虽然php有自己判断ip的函数，但问题是用正则表达式解决。</p><h3 id="方案1-群友方案"><a href="#方案1-群友方案" class="headerlink" title="方案1(群友方案)"></a>方案1(群友方案)</h3><p>简单的匹配<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;</span><br></pre></td></tr></table></figure></p><p>存在问题：<br><code>999.999.999.999</code>都能匹配到。</p><h3 id="方案2-群友方案"><a href="#方案2-群友方案" class="headerlink" title="方案2(群友方案)"></a>方案2(群友方案)</h3><figure class="highlight re"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(?:(?:<span class="number">25</span><span class="literal">[<span class="number">0</span>-<span class="number">5</span>]</span><span class="pattern-match">|2[0-4][0-9]|[01]?[0-9][0-9]?)\.)&#123;3&#125;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)<span class="constructor">$</span></span></span><br></pre></td></tr></table></figure><p>存在问题：<br>虽然数字范围限制在255以内，但是<code>001.1.1.1</code>也能匹配到。</p><h3 id="方案三（我的方案）"><a href="#方案三（我的方案）" class="headerlink" title="方案三（我的方案）"></a>方案三（我的方案）</h3><figure class="highlight re"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(\d<span class="pattern-match">|[1-9][0-9]|1\d&#123;2&#125;|2[0-4]\d|25[0-5])(\.(\d|[1-9][0-9]|1\d&#123;2&#125;|2[0-4]\d|25[0-5]))&#123;3&#125;<span class="constructor">$</span></span></span><br></pre></td></tr></table></figure><p>存在问题：<br>能满足所有的ip情况，但是不够优雅，简洁。算不上是最强。</p><h2 id="最强ipv4表达式-之一吧"><a href="#最强ipv4表达式-之一吧" class="headerlink" title="最强ipv4表达式(之一吧)"></a>最强ipv4表达式(之一吧)</h2><figure class="highlight re"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^((<span class="number">2</span><span class="literal">[<span class="number">0</span>-<span class="number">4</span>]</span><span class="pattern-match">|1\d|[1-9])?\d|25[0-5])(\.(?1))&#123;3&#125;\z<span class="operator">/</span></span></span><br></pre></td></tr></table></figure><p>简洁优雅。🐂！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;技术群里的群友提出这样一个问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;php里面，能够有效匹配任意一个正常输入的ipv4地址，最短的正则表达式是什么？&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="php" scheme="http://blog.fbi.st/categories/php/"/>
    
    
      <category term="php" scheme="http://blog.fbi.st/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch常用查询整理</title>
    <link href="http://blog.fbi.st/2019/07/19/elasticsearch%E5%B8%B8%E7%94%A8%E6%9F%A5%E8%AF%A2%E6%95%B4%E7%90%86/"/>
    <id>http://blog.fbi.st/2019/07/19/elasticsearch常用查询整理/</id>
    <published>2019-07-19T06:06:32.000Z</published>
    <updated>2019-12-26T10:05:39.303Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-结构话查询（Structured-search）"><a href="#1-结构话查询（Structured-search）" class="headerlink" title="1. 结构话查询（Structured search）"></a>1. 结构话查询（Structured search）</h2><h3 id="1-1-精确查询（term）"><a href="#1-1-精确查询（term）" class="headerlink" title="1.1 精确查询（term）"></a>1.1 精确查询（term）</h3><p>最为常用的 term 查询， 可以用它处理数字（numbers）、布尔值（Booleans）、日期（dates）以及文本（text）。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"term"</span> : &#123;</span><br><span class="line">        <span class="attr">"price"</span> : <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似sql的<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">document</span></span><br><span class="line"><span class="keyword">FROM</span>   products</span><br><span class="line"><span class="keyword">WHERE</span>  price = <span class="number">20</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="1-2-查找多个精确值（terms）"><a href="#1-2-查找多个精确值（terms）" class="headerlink" title="1.2 查找多个精确值（terms）"></a>1.2 查找多个精确值（terms）</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"terms"</span> : &#123;</span><br><span class="line">        <span class="attr">"price"</span> : [<span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-范围查询-range"><a href="#1-3-范围查询-range" class="headerlink" title="1.3 范围查询(range)"></a>1.3 范围查询(range)</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">"range" : &#123;</span><br><span class="line">    "price" : &#123;</span><br><span class="line">        "gte" : 20,</span><br><span class="line">        "lte" : 40</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似sql的<br>在 SQL 中，范围查询可以表示为：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">document</span></span><br><span class="line"><span class="keyword">FROM</span>   products</span><br><span class="line"><span class="keyword">WHERE</span>  price <span class="keyword">BETWEEN</span> <span class="number">20</span> <span class="keyword">AND</span> <span class="number">40</span></span><br></pre></td></tr></table></figure></p><h2 id="2-全文检索（full-text-search）"><a href="#2-全文检索（full-text-search）" class="headerlink" title="2.全文检索（full-text search）"></a>2.全文检索（full-text search）</h2><h3 id="2-1-match查询（match）"><a href="#2-1-match查询（match）" class="headerlink" title="2.1 match查询（match）"></a>2.1 match查询（match）</h3><p>查询搜索全文字段中的单个词或多个词</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /my_index/my_type/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"match"</span>: &#123;</span><br><span class="line">            <span class="attr">"title"</span>: <span class="string">"QUICK!"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-match链接符（operator"><a href="#2-2-match链接符（operator" class="headerlink" title="2.2 match链接符（operator)"></a>2.2 match链接符（operator)</h3><p>match 查询的结构需要做稍许调整才能使用 operator 操作符参数。<br>下面查询会查找<code>BROWN</code>和<code>DOG</code>同时存在的doc<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /my_index/my_type/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"match"</span>: &#123;</span><br><span class="line">            <span class="attr">"title"</span>: &#123;      </span><br><span class="line">                <span class="attr">"query"</span>:    <span class="string">"BROWN DOG!"</span>,</span><br><span class="line">                <span class="attr">"operator"</span>: <span class="string">"and"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-3-组合查询（bool）"><a href="#2-3-组合查询（bool）" class="headerlink" title="2.3 组合查询（bool）"></a>2.3 组合查询（bool）</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /my_index/my_type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"bool"</span>: &#123;</span><br><span class="line">      <span class="attr">"must"</span>:     &#123; <span class="attr">"match"</span>: &#123; <span class="attr">"title"</span>: <span class="string">"quick"</span> &#125;&#125;,</span><br><span class="line">      <span class="attr">"must_not"</span>: &#123; <span class="attr">"match"</span>: &#123; <span class="attr">"title"</span>: <span class="string">"lazy"</span>  &#125;&#125;,</span><br><span class="line">      <span class="attr">"should"</span>: [</span><br><span class="line">                  &#123; <span class="attr">"match"</span>: &#123; <span class="attr">"title"</span>: <span class="string">"brown"</span> &#125;&#125;,</span><br><span class="line">                  &#123; <span class="attr">"match"</span>: &#123; <span class="attr">"title"</span>: <span class="string">"dog"</span>   &#125;&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-多字段查询（multi-match）"><a href="#2-4-多字段查询（multi-match）" class="headerlink" title="2.4 多字段查询（multi_match）"></a>2.4 多字段查询（multi_match）</h3><p>多匹配查询的类型有多种： best_fields 、 most_fields 和 cross_fields （最佳字段、多数字段、跨字段）</p><p>默认情况下，查询的类型是 best_fields ，这表示它会为每个字段生成一个 match 查询，然后将它们组合到 dis_max 查询的内部，如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"dis_max"</span>: &#123;</span><br><span class="line">    <span class="attr">"queries"</span>:  [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"match"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: &#123;</span><br><span class="line">            <span class="attr">"query"</span>: <span class="string">"Quick brown fox"</span>,</span><br><span class="line">            <span class="attr">"minimum_should_match"</span>: <span class="string">"30%"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"match"</span>: &#123;</span><br><span class="line">          <span class="attr">"body"</span>: &#123;</span><br><span class="line">            <span class="attr">"query"</span>: <span class="string">"Quick brown fox"</span>,</span><br><span class="line">            <span class="attr">"minimum_should_match"</span>: <span class="string">"30%"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"tie_breaker"</span>: <span class="number">0.3</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面这个查询用 multi_match 重写成更简洁的形式：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"multi_match"</span>: &#123;</span><br><span class="line">        <span class="attr">"query"</span>:                <span class="string">"Quick brown fox"</span>,</span><br><span class="line">        <span class="attr">"type"</span>:                 <span class="string">"best_fields"</span>, </span><br><span class="line">        <span class="attr">"fields"</span>:               [ <span class="string">"title"</span>, <span class="string">"body"</span> ],</span><br><span class="line">        <span class="attr">"tie_breaker"</span>:          <span class="number">0.3</span>,</span><br><span class="line">        <span class="attr">"minimum_should_match"</span>: <span class="string">"30%"</span> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>best_fields 类型是默认值，可以不指定。</p></blockquote><p>还可以模糊字段<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"multi_match"</span>: &#123;</span><br><span class="line">        <span class="attr">"query"</span>:  <span class="string">"Quick brown fox"</span>,</span><br><span class="line">        <span class="attr">"fields"</span>: <span class="string">"*_title"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-5-短语匹配（match-phrase-）"><a href="#2-5-短语匹配（match-phrase-）" class="headerlink" title="2.5 短语匹配（match_phrase ）"></a>2.5 短语匹配（match_phrase ）</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /my_index/my_type/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"match_phrase"</span>: &#123;</span><br><span class="line">            <span class="attr">"title"</span>: <span class="string">"quick brown fox"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>什么是短语<br>一个被认定为和短语 quick brown fox 匹配的文档，必须满足以下这些要求： &gt; </p><ul><li>quick 、 brown 和 fox 需要全部出现在域中。  </li><li>brown 的位置应该比 quick 的位置大 1 。  </li><li>fox 的位置应该比 quick 的位置大 2 。  </li></ul><p>如果以上任何一个选项不成立，则该文档不能认定为匹配  </p></blockquote><h3 id="2-6-前缀查询-prefix"><a href="#2-6-前缀查询-prefix" class="headerlink" title="2.6 前缀查询(prefix)"></a>2.6 前缀查询(prefix)</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /my_index/address/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"prefix"</span>: &#123;</span><br><span class="line">            <span class="attr">"postcode"</span>: <span class="string">"W1"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>为了支持前缀匹配，查询会做以下事情：</p><ol><li>扫描词列表并查找到第一个以 W1 开始的词。  </li><li>搜集关联的文档 ID 。  </li><li>*移动到下一个词。  </li><li>如果这个词也是以 W1 开头，查询跳回到第二步再重复执行，直到下一个词不以 W1 为止。  </li></ol></blockquote><h3 id="2-7-通配符查询（wildcard）"><a href="#2-7-通配符查询（wildcard）" class="headerlink" title="2.7 通配符查询（wildcard）"></a>2.7 通配符查询（wildcard）</h3><p> wildcard 通配符查询也是一种底层基于词的查询，与前缀查询不同的是它允许指定匹配的正则式。它使用标准的 shell 通配符查询： ? 匹配任意字符， * 匹配 0 或多个字符<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /my_index/address/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"wildcard"</span>: &#123;</span><br><span class="line">            <span class="attr">"postcode"</span>: <span class="string">"W?F*HW"</span> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-8-正则查询（regexp）"><a href="#2-8-正则查询（regexp）" class="headerlink" title="2.8 正则查询（regexp）"></a>2.8 正则查询（regexp）</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /my_index/address/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"regexp"</span>: &#123;</span><br><span class="line">            <span class="attr">"postcode"</span>: <span class="string">"W[0-9].+"</span> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>prefix 、 wildcard 和 regexp 查询是基于词操作的，如果用它们来查询 analyzed 字段，它们会检查字段里面的每个词，而不是将字段作为整体来处理。  </p><p>比方说包含 “Quick brown fox” （快速的棕色狐狸）的 title 字段会生成词： quick 、 brown 和 fox </p></blockquote><h2 id="3-query-string"><a href="#3-query-string" class="headerlink" title="3.query_string"></a>3.query_string</h2><h3 id="3-1-query-string"><a href="#3-1-query-string" class="headerlink" title="3.1 query_string"></a>3.1 query_string</h3><p>title字段包含crime，且权重为10，也要包含punishment，但是otitle不包含cat，同时author字段包含Fyodor和dostoevsky。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"query_string"</span>: &#123;</span><br><span class="line">             <span class="attr">"query"</span>:<span class="string">"title:crime^10 +title:punishment -otitle:cat +author:(+Fyodor +dostoevsky)"</span>,</span><br><span class="line">             <span class="attr">"default_field"</span>:<span class="string">"title"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常见query_string写法<br>常见写法：</p><p>name字段为obama<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"query"</span>: &#123;</span><br><span class="line"><span class="attr">"query_string"</span>: <span class="string">"name:obama"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>存在一个nam开头的字段，值为obama<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"query"</span>: &#123;</span><br><span class="line"><span class="attr">"query_string"</span>: <span class="string">"nam\\*:obama"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>name字段值为null的文档</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"query"</span>: &#123;</span><br><span class="line"><span class="attr">"query_string"</span>: <span class="string">"__missing__:name"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>name字段值不为null的文档<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"query"</span>: &#123;</span><br><span class="line"><span class="attr">"query_string"</span>: <span class="string">"__exists__:name"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>name字段为Obama或者xidada的文档</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"query"</span>: &#123;</span><br><span class="line"><span class="attr">"query_string"</span>: <span class="string">"name:（obama OR xidada)"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Wildcards<br>query的内容中支持？与<code>*</code> <code>？</code>可以代替一个任意字符、<code>*</code>可代表任意个字符（包括零个）。比如你要查询的内容很长，记不清了但是你记得末尾是tor，那么你只需要把query内容写成<code>*tor</code>即可  </p></blockquote><blockquote><p>正则<br>如果要在query的内容中使用正则表达式，在两端加上正斜杠/即可。比如<code>name:/ob[am]{2}a/</code>  </p></blockquote><h3 id="3-2-simple-query-string查询"><a href="#3-2-simple-query-string查询" class="headerlink" title="3.2 simple_query_string查询"></a>3.2 simple_query_string查询</h3><p>解析出错时不抛异常，丢弃查询无效的部分</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"simple_query_string"</span>: &#123;</span><br><span class="line">             <span class="attr">"query"</span>:<span class="string">"title:crime^10 +title:punishment -otitle:cat +author:(+Fyodor +dostoevsky)"</span>,</span><br><span class="line">             <span class="attr">"default_operator"</span>:<span class="string">"or"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-标识符查询"><a href="#3-3-标识符查询" class="headerlink" title="3.3 标识符查询"></a>3.3 标识符查询</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"ids"</span>: &#123;</span><br><span class="line">             <span class="attr">"type"</span>:<span class="string">"book"</span>,</span><br><span class="line">             <span class="attr">"values"</span>:[<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><p>bool查询的<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">GET test*/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>:<span class="number">3</span>,</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"bool"</span>:&#123;</span><br><span class="line">      <span class="attr">"must"</span>: [</span><br><span class="line">          &#123;<span class="attr">"match"</span>:&#123;<span class="attr">"message"</span>: <span class="string">"学生"</span>&#125;&#125;,</span><br><span class="line">          &#123;<span class="attr">"match"</span>:&#123;<span class="attr">"message"</span>: <span class="string">"所有"</span>&#125;&#125;</span><br><span class="line">        ],</span><br><span class="line">      <span class="attr">"should"</span>: [</span><br><span class="line">          &#123;<span class="attr">"match"</span>: &#123;<span class="attr">"port"</span>: <span class="string">"53198"</span>&#125;&#125;,</span><br><span class="line">          &#123;<span class="attr">"match"</span>: &#123;<span class="attr">"@timestamp"</span>:<span class="string">"2018-09-17T17:49:25.991Z"</span>&#125;&#125;</span><br><span class="line">        ],</span><br><span class="line">      <span class="attr">"must_not"</span>: [</span><br><span class="line">          &#123;<span class="attr">"match"</span>: &#123;<span class="attr">"port"</span>: <span class="string">"64273"</span>&#125;&#125;,</span><br><span class="line">          &#123;<span class="attr">"match"</span>: &#123;<span class="attr">"port"</span>:<span class="string">"1234"</span>&#125;&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>等价于<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">GET test*/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>:<span class="number">3</span>,</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"query_string"</span>:&#123;<span class="attr">"query"</span>: <span class="string">"message:学生 +message:所有 -port:55714"</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-结构话查询（Structured-search）&quot;&gt;&lt;a href=&quot;#1-结构话查询（Structured-search）&quot; class=&quot;headerlink&quot; title=&quot;1. 结构话查询（Structured search）&quot;&gt;&lt;/a&gt;1. 结构话查询（Structured search）&lt;/h2&gt;&lt;h3 id=&quot;1-1-精确查询（term）&quot;&gt;&lt;a href=&quot;#1-1-精确查询（term）&quot; class=&quot;headerlink&quot; title=&quot;1.1 精确查询（term）&quot;&gt;&lt;/a&gt;1.1 精确查询（term）&lt;/h3&gt;&lt;p&gt;最为常用的 term 查询， 可以用它处理数字（numbers）、布尔值（Booleans）、日期（dates）以及文本（text）。&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;term&quot;&lt;/span&gt; : &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;price&quot;&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;类似sql的&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;document&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt;   products&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt;  price = &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Elasticsearch非权威指南" scheme="http://blog.fbi.st/categories/Elasticsearch%E9%9D%9E%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="Elasticsearch" scheme="http://blog.fbi.st/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>《如何阅读一本书》读书笔记</title>
    <link href="http://blog.fbi.st/2019/06/20/%E3%80%8A%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.fbi.st/2019/06/20/《如何阅读一本书》读书笔记/</id>
    <published>2019-06-20T13:13:12.000Z</published>
    <updated>2019-12-26T08:50:05.455Z</updated>
    
    <content type="html"><![CDATA[<p>《如何阅读一本书》</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>每本书的封面之下都有一套自己的骨架，作为一个分析阅读的读者，责任就是要找出这个骨架。  </p><p>一本书出现在面前时，肌肉包着骨头，衣服包裹着肌肉，可说是盛装而来。  </p><p>读者用不着揭开它的外衣或是撕去它的肌肉来得到在柔软表皮下的那套骨架，但是一定要用一双X光般的透视眼来看这本书，因为那是了解一本书、掌握其骨架的基础。  </p><p>《如何阅读一本书》初版于1940年，1972年大幅增订改写为新版。  </p><p>懂阅读的人，初探阅读的人，读这本书可以少走冤枉路。对阅读有所体会的人，读这本书可以有更深的印证和领悟。  </p><p>(来自豆瓣)</p><p><img src="https://i.loli.net/2017/09/08/59b2a3843d8fb.jpg" alt="如何阅读一本书.jpg"><br><a id="more"></a></p><h2 id="作者简介"><a href="#作者简介" class="headerlink" title="作者简介"></a>作者简介</h2><p>莫提默·J. 艾德勒（1902－2001）以学者、教育家、编辑人等多重面貌享有盛名。除了写作《如何阅读一本书》外，以主编《西方世界的经典人并担任1974年第十五版《大英百科全书》的编辑相异而闻名于世。  </p><p>查尔斯·范多伦（1926－）先曾任美国哥伦比亚大学教授。后因故离任，和艾德勒一起工作。一方面襄助艾德勒编辑《大英百科全书》，一方面将本书1940年初版内容大幅度增补改写。  </p><h2 id="读书有感"><a href="#读书有感" class="headerlink" title="读书有感"></a>读书有感</h2><h3 id="为什么从这本书开始？"><a href="#为什么从这本书开始？" class="headerlink" title="为什么从这本书开始？"></a>为什么从这本书开始？</h3><p>工欲善其事，必先利其器。所以读书之前，读一本优秀的教人读书的书，是非常有必要的。《如何阅读一本书》正是一本这样的好书。 </p><p>看完这本书后，相信许多人都会像我一样，懊悔自己没有在更早的时候接触到它。<br>认识自己的阅读方式，然后使用更科学和有效的方式去阅读。  </p><p>因为本人认为他是一本很好的书（当然，本书的优秀不需要我的肯定），同时他能让我们收获阅读的方法和对阅读的理解。看完这本书后，我真的希望有人能在更早的时候推荐我阅读这本书。所以我打算从这本书开始。  </p><h3 id="看本书前我是怎么阅读？"><a href="#看本书前我是怎么阅读？" class="headerlink" title="看本书前我是怎么阅读？"></a>看本书前我是怎么阅读？</h3><p>首先，在看本书之前，我应该已经算是一个书中说的“阅读的人”, 但同时我也是一个不太懂得阅读的人。   </p><p>我是个小说迷，看小说时整个人都很轻松，正因为这种轻松的感觉，让我很多时候都不能自拔；我很喜欢看一些科普读物，让我的视野更宽广；因为工作需求，我也会看很多技术的书籍充电；因为好奇心很大，所以经常还会翻阅各种各样的‘杂书’；  </p><p>但在阅读本书之前，我一直都没有自己的一个很合理的阅读方法，也不了解自己阅读行为的一些理论层的解释。例如：我经常以阅读小说的速度去阅读一些技术书籍，往往不得其解，随之放弃。也很多时候沉迷于简单的小说阅读的快感中，还认为从中收获很多。  </p><p>错误的阅读方式让我错过了去体会很多好书的精华，浪费了许多时间在一些不好的书上面。  </p><h3 id="我的收获是？"><a href="#我的收获是？" class="headerlink" title="我的收获是？"></a>我的收获是？</h3><p>这本书让我对阅读有了一个更加系统和科学的认识，也纠正了我一些不合适的阅读方式。 </p><p>我们阅读书籍的目的在于获得新的资讯，从而让让我们获得成长。毫无疑问，我在这本书中收获了这些。  </p><p>在看到本书开始大概三分之一的位置的时候，我有一种与本书相见恨晚的感觉，作者描述的阅读状态和方式，都很契合我的从前总结的阅读感受。随着更加往后的阅读，发现作者所讲的内容越来越难，我阅读的难度也在增加，这个时候，作者告诉我们：当你阅读越是困难，说明与作者的层次相差越大，阅读的收获也是越大。  </p><p>随着整本书读完，做完后面的阅读测试题，才感受到作者对阅读的理解至深，有一种再看一遍的冲动。<br>也有一种找本新书来应用本书收获的感觉。  </p><h3 id="这本书该怎么读？"><a href="#这本书该怎么读？" class="headerlink" title="这本书该怎么读？"></a>这本书该怎么读？</h3><p>这本书我是花了近一个月早上早起，每天挤出半个小时来看完的。阅读作者阅读的数量和阅读涉及的领域之广，让我深深的钦佩。也是正是因为作者的博学，所以如果没有一定的知识储备，在阅读本书的时候还是会遇到一些困难的，当遇到这些困难的时候，就要像作者所说的：坚持看下去。<br>这是一本偏向应用的书，所以我们在阅读的时候，更重要的还有要注重实践。在本书结尾的地方也留了一些阅读的测验。当然更多的还是需要在以后的更多的阅读活动中去实践。  </p><h3 id="用简短的话总结？"><a href="#用简短的话总结？" class="headerlink" title="用简短的话总结？"></a>用简短的话总结？</h3><p>本书从阅读的四个层次，循序深入的为我们解析了各个阅读阶段的技巧和注意事项。是一本指导阅读人阅读的很好的一本书。值得推荐。  </p><blockquote><p><strong> 阅读的人：</strong>   所谓‘阅读的人’，是指那些今天仍然习惯于从书写文字中汲取大量资讯，以增进对世界了解的人。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《如何阅读一本书》&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;每本书的封面之下都有一套自己的骨架，作为一个分析阅读的读者，责任就是要找出这个骨架。  &lt;/p&gt;
&lt;p&gt;一本书出现在面前时，肌肉包着骨头，衣服包裹着肌肉，可说是盛装而来。  &lt;/p&gt;
&lt;p&gt;读者用不着揭开它的外衣或是撕去它的肌肉来得到在柔软表皮下的那套骨架，但是一定要用一双X光般的透视眼来看这本书，因为那是了解一本书、掌握其骨架的基础。  &lt;/p&gt;
&lt;p&gt;《如何阅读一本书》初版于1940年，1972年大幅增订改写为新版。  &lt;/p&gt;
&lt;p&gt;懂阅读的人，初探阅读的人，读这本书可以少走冤枉路。对阅读有所体会的人，读这本书可以有更深的印证和领悟。  &lt;/p&gt;
&lt;p&gt;(来自豆瓣)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2017/09/08/59b2a3843d8fb.jpg&quot; alt=&quot;如何阅读一本书.jpg&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="read" scheme="http://blog.fbi.st/categories/read/"/>
    
    
      <category term="生活" scheme="http://blog.fbi.st/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="读书笔记" scheme="http://blog.fbi.st/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>mysql通过触发器远程同步</title>
    <link href="http://blog.fbi.st/2019/05/27/mysql%E9%80%9A%E8%BF%87%E8%A7%A6%E5%8F%91%E5%99%A8%E8%BF%9C%E7%A8%8B%E5%90%8C%E6%AD%A5/"/>
    <id>http://blog.fbi.st/2019/05/27/mysql通过触发器远程同步/</id>
    <published>2019-05-27T06:11:53.000Z</published>
    <updated>2019-12-26T10:08:26.134Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mysql通过触发器远程同步"><a href="#mysql通过触发器远程同步" class="headerlink" title="mysql通过触发器远程同步"></a>mysql通过触发器远程同步</h2><blockquote><p>约定：  </p></blockquote><ul><li>需要同步的表为: <code>A表</code>  </li><li>中间的表为: <code>B表</code>  </li><li>同步到的远程表为: <code>C表</code><br><img src="https://static.oschina.net/uploads/space/2017/0124/211715_4QI1_733235.png" alt="逻辑表"></li></ul><a id="more"></a><h3 id="一、检查mysql是否支持federated数据引擎"><a href="#一、检查mysql是否支持federated数据引擎" class="headerlink" title="一、检查mysql是否支持federated数据引擎"></a>一、检查mysql是否支持federated数据引擎</h3><h4 id="1-查看开启的储存引擎"><a href="#1-查看开启的储存引擎" class="headerlink" title="1.查看开启的储存引擎"></a>1.查看开启的储存引擎</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW ENGINES;</span><br></pre></td></tr></table></figure><h4 id="2-如果不支持"><a href="#2-如果不支持" class="headerlink" title="2.如果不支持"></a>2.如果不支持</h4><p><code>Support</code>的值是<code>NO</code><br><code>| FEDERATED          | NO      | Federated MySQL storage engine                             | NULL         | NULL | NULL       |</code></p><p>可能需要修改mysql配置文件；<br>若没有<code>federated</code>引擎需要配置<code>my.cnf</code>文件。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/mysql/my.cnf</span><br><span class="line">```  </span><br><span class="line">在`[mysqld]`后面直接加`federated`，并且注释掉`skip-federated`（前面加#）</span><br></pre></td></tr></table></figure></p><p>[mysqld]<br>federated<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 二、建立同步的federated表和远程的表</span><br><span class="line">&gt; ip示例如下：</span><br><span class="line"></span><br><span class="line">- 数据源：      192.168.1.1</span><br><span class="line">- Federated:  192.168.1.1</span><br><span class="line">- 远程：  192.168.1.156</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 原表数据结构如下：</span><br><span class="line">```sql</span><br><span class="line">CREATE TABLE `test_20180425` (</span><br><span class="line">  `id` int(11) NOT NULL,  </span><br><span class="line">  `somthing` int(11) DEFAULT NULL,</span><br><span class="line"></span><br><span class="line">) ENGINE=MyISAM DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure></p><h4 id="federated表"><a href="#federated表" class="headerlink" title="federated表"></a>federated表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`db_bak`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`somthing`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">) <span class="keyword">ENGINE</span>=FEDERATED <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">CONNECTION</span>=<span class="string">'mysql://abc:abc123@192.168.1.156/remote_db/db_admin'</span></span><br></pre></td></tr></table></figure><h4 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">USE</span> <span class="string">`db`</span>$$</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> <span class="comment">/*!50032 IF EXISTS */</span></span><br><span class="line"><span class="string">`t_db_admin_insert`</span>$$</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="comment">/*!50017 DEFINER = 'root'@'%' */</span></span><br><span class="line"><span class="keyword">TRIGGER</span> <span class="string">`t_db_admin_insert`</span> <span class="keyword">AFTER</span> <span class="keyword">INSERT</span> <span class="keyword">ON</span> <span class="string">`test_20180425`</span> <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> db.<span class="string">`db_bak`</span> (</span><br><span class="line"><span class="string">`id`</span>,</span><br><span class="line"><span class="string">`someting`</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(</span><br><span class="line">NEW.id,</span><br><span class="line">NEW.someting</span><br><span class="line">) ;</span><br><span class="line"><span class="keyword">END</span> ;$$</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;mysql通过触发器远程同步&quot;&gt;&lt;a href=&quot;#mysql通过触发器远程同步&quot; class=&quot;headerlink&quot; title=&quot;mysql通过触发器远程同步&quot;&gt;&lt;/a&gt;mysql通过触发器远程同步&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;约定：  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;需要同步的表为: &lt;code&gt;A表&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;中间的表为: &lt;code&gt;B表&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;同步到的远程表为: &lt;code&gt;C表&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;https://static.oschina.net/uploads/space/2017/0124/211715_4QI1_733235.png&quot; alt=&quot;逻辑表&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://blog.fbi.st/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://blog.fbi.st/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>leetcode算法题Z字形变换的解答</title>
    <link href="http://blog.fbi.st/2019/04/20/leetcode%E7%AE%97%E6%B3%95%E9%A2%98Z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2%E7%9A%84%E8%A7%A3%E7%AD%94/"/>
    <id>http://blog.fbi.st/2019/04/20/leetcode算法题Z字形变换的解答/</id>
    <published>2019-04-20T08:07:31.000Z</published>
    <updated>2019-12-26T10:13:22.884Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目内容如下"><a href="#题目内容如下" class="headerlink" title="题目内容如下"></a>题目内容如下</h2><p>将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。</p><p>比如输入字符串为 “LEETCODEISHIRING” 行数为 3 时，排列如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L   C   I   R</span><br><span class="line">E T O E S I I G</span><br><span class="line">E   D   H   N</span><br></pre></td></tr></table></figure><p>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：<code>&quot;LCIRETOESIIGEDHN&quot;</code>。<br><a id="more"></a></p><p>请你实现这个将字符串进行指定行数变换的函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string convert(string s, int numRows);</span><br></pre></td></tr></table></figure></p><blockquote><p>示例 1:</p></blockquote><p>输入: <code>s = &quot;LEETCODEISHIRING&quot;, numRows = 3</code>  </p><p>输出: <code>&quot;LCIRETOESIIGEDHN&quot;</code>   </p><blockquote><p>示例 2: </p></blockquote><p>输入: <code>s = &quot;LEETCODEISHIRING&quot;, numRows = 4</code>  </p><p>输出: <code>&quot;LDREOEIIECIHNTSG&quot;</code>  </p><p>解释:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">L     D     R</span><br><span class="line">E   O E   I I</span><br><span class="line">E C   I H   N</span><br><span class="line">T     S     G</span><br></pre></td></tr></table></figure></p><h2 id="题目解答"><a href="#题目解答" class="headerlink" title="题目解答"></a>题目解答</h2><p>思路：<br>明显的解决方案就是row个数组，<br>然后循环切割字符串，row个数组里填。<br>当最大的时候就往回<code>-1</code>,最小时候就<code>+1</code>,如此循环。<br>当然，当<code>row==1</code>时候直接返回元字符串</p><blockquote><p>解法1</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(self, s, numRows)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :type numRows: int</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        tmp = &#123;&#125;</span><br><span class="line">        z = <span class="number">0</span></span><br><span class="line">        f = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> numRows == <span class="number">1</span>:</span><br><span class="line">            print(s)</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> range(numRows):</span><br><span class="line">            tmp[n] = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">            tmp[z].append(i)</span><br><span class="line">            <span class="keyword">if</span> f == <span class="number">1</span>:</span><br><span class="line">                z -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                z += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> z == (numRows<span class="number">-1</span>):</span><br><span class="line">                f = <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> z == <span class="number">0</span>:</span><br><span class="line">                f = <span class="number">0</span></span><br><span class="line">        r = <span class="string">""</span></span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> tmp:</span><br><span class="line">            r += <span class="string">""</span>.join(tmp[t])</span><br><span class="line">        <span class="keyword">return</span> r</span><br></pre></td></tr></table></figure><p>这个解法的效率不高，思路不变，优化一下代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(self, s, numRows)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :type numRows: int</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        z = <span class="number">0</span></span><br><span class="line">        f = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> numRows == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">        tmp = [<span class="string">""</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(numRows)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">            tmp[z] += i</span><br><span class="line">            <span class="keyword">if</span> z == (numRows<span class="number">-1</span>) <span class="keyword">or</span> z == <span class="number">0</span>: f = <span class="keyword">not</span> f</span><br><span class="line">            z = z<span class="number">-1</span> <span class="keyword">if</span> f <span class="keyword">else</span> z+<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>.join(tmp)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目内容如下&quot;&gt;&lt;a href=&quot;#题目内容如下&quot; class=&quot;headerlink&quot; title=&quot;题目内容如下&quot;&gt;&lt;/a&gt;题目内容如下&lt;/h2&gt;&lt;p&gt;将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。&lt;/p&gt;
&lt;p&gt;比如输入字符串为 “LEETCODEISHIRING” 行数为 3 时，排列如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;L   C   I   R&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;E T O E S I I G&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;E   D   H   N&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：&lt;code&gt;&amp;quot;LCIRETOESIIGEDHN&amp;quot;&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://blog.fbi.st/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://blog.fbi.st/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>常用mysql命令笔记</title>
    <link href="http://blog.fbi.st/2019/04/10/%E5%B8%B8%E7%94%A8mysql%E5%91%BD%E4%BB%A4%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.fbi.st/2019/04/10/常用mysql命令笔记/</id>
    <published>2019-04-10T14:07:01.000Z</published>
    <updated>2019-12-26T10:14:38.048Z</updated>
    
    <content type="html"><![CDATA[<h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> zhangsan <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'zhangsan'</span>;</span><br></pre></td></tr></table></figure><h3 id="查看当前用户"><a href="#查看当前用户" class="headerlink" title="查看当前用户"></a>查看当前用户</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>();</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CURRENT_USER</span>();</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="查看用户的权限"><a href="#查看用户的权限" class="headerlink" title="查看用户的权限"></a>查看用户的权限</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> 你的用户;</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> root@<span class="string">'localhost'</span>;</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> webgametest@<span class="number">10.3</span><span class="number">.18</span><span class="number">.158</span>;</span><br></pre></td></tr></table></figure><h3 id="重载权限表"><a href="#重载权限表" class="headerlink" title="重载权限表"></a>重载权限表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span>;</span><br></pre></td></tr></table></figure><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> zhangsanDb.* <span class="keyword">TO</span> zhangsan@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'zhangsan'</span>;</span><br><span class="line"><span class="comment"># FLUSH PRIVILEGES;</span></span><br></pre></td></tr></table></figure><blockquote><p>说明：<br>除了“ALL PRIVILEGES”是所有权限外，还有常用的：<br><strong> SELECT </strong>：读取权限。<br><strong> DELETE </strong>：删除权限。<br><strong> UPDATE </strong>：更新权限。<br><strong> CREATE </strong>：创建权限。<br><strong> DROP </strong>：删除数据库、数据表权限。  </p></blockquote><p>###修改密码<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> mysql.user <span class="keyword">SET</span> <span class="keyword">password</span> = <span class="keyword">PASSWORD</span>(<span class="string">'zhangsannew'</span>) <span class="keyword">WHERE</span><span class="keyword">user</span> = <span class="string">'zhangsan'</span> <span class="keyword">AND</span> HOST = <span class="string">'%'</span>;</span><br><span class="line"><span class="comment">#FLUSH PRIVILEGES;</span></span><br></pre></td></tr></table></figure></p><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> zhangsan@<span class="string">'%'</span>;</span><br></pre></td></tr></table></figure><h3 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysql 命令导入</span></span><br><span class="line">mysql -uroot -p123456 -Ddbname &lt; file.sql</span><br><span class="line"><span class="comment"># source 命令导入数据库需要先登录到数库终端：</span></span><br><span class="line">source /home/abc/abc.sql  <span class="comment"># 导入备份数据库</span></span><br><span class="line"><span class="comment"># load命令上传</span></span><br><span class="line"><span class="keyword">LOAD</span> <span class="keyword">DATA</span> <span class="keyword">LOCAL</span> <span class="keyword">INFILE</span> <span class="string">'dump.txt'</span> <span class="keyword">INTO</span> <span class="keyword">TABLE</span> mytbl <span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">':'</span> <span class="keyword">LINES</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">'\r\n'</span>;</span><br></pre></td></tr></table></figure><h3 id="数据导出"><a href="#数据导出" class="headerlink" title="数据导出"></a>数据导出</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导出某个表</span></span><br><span class="line">mysqldump -u root -p DB table &gt; dump.txt</span><br><span class="line"><span class="comment"># 导出某个库</span></span><br><span class="line">mysqldump -u root -p DB &gt; database_dump.txt</span><br><span class="line"><span class="comment"># 导出所有数据库：</span></span><br><span class="line">mysqldump -u root -p --all-databases &gt; database_dump.txt</span><br></pre></td></tr></table></figure><h3 id="查看数据库的引擎"><a href="#查看数据库的引擎" class="headerlink" title="查看数据库的引擎"></a>查看数据库的引擎</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">ENGINES</span>;</span><br></pre></td></tr></table></figure><h3 id="创建数据库并指定编码"><a href="#创建数据库并指定编码" class="headerlink" title="创建数据库并指定编码"></a>创建数据库并指定编码</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> my_db <span class="keyword">default</span> <span class="keyword">charset</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br></pre></td></tr></table></figure><h3 id="复制表-同一表结构"><a href="#复制表-同一表结构" class="headerlink" title="复制表(同一表结构)"></a>复制表(同一表结构)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span>  <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> teacher_his <span class="keyword">LIKE</span> teacher ;</span><br></pre></td></tr></table></figure><h3 id="重命名表"><a href="#重命名表" class="headerlink" title="重命名表"></a>重命名表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t1 <span class="keyword">RENAME</span> t2;</span><br></pre></td></tr></table></figure><h3 id="查看当前数据库的编码"><a href="#查看当前数据库的编码" class="headerlink" title="查看当前数据库的编码"></a>查看当前数据库的编码</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> DB;</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'character_set_database'</span>;</span><br></pre></td></tr></table></figure><h3 id="修改数据库的编码"><a href="#修改数据库的编码" class="headerlink" title="修改数据库的编码"></a>修改数据库的编码</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> xxx <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> gb2312;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;添加用户&quot;&gt;&lt;a href=&quot;#添加用户&quot; class=&quot;headerlink&quot; title=&quot;添加用户&quot;&gt;&lt;/a&gt;添加用户&lt;/h3&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;USER&lt;/span&gt; zhangsan &lt;span class=&quot;keyword&quot;&gt;IDENTIFIED&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;zhangsan&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;查看当前用户&quot;&gt;&lt;a href=&quot;#查看当前用户&quot; class=&quot;headerlink&quot; title=&quot;查看当前用户&quot;&gt;&lt;/a&gt;查看当前用户&lt;/h3&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;USER&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;CURRENT_USER&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://blog.fbi.st/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://blog.fbi.st/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>docker学习笔记</title>
    <link href="http://blog.fbi.st/2019/02/01/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.fbi.st/2019/02/01/docker学习笔记/</id>
    <published>2019-02-01T02:17:51.000Z</published>
    <updated>2019-12-26T10:05:23.567Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-docker是什么？？"><a href="#1-docker是什么？？" class="headerlink" title="1.docker是什么？？"></a>1.docker是什么？？</h2><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的Linux 机器上，也可以实现虚拟化。 容器是完全使用沙箱机制，相互之间不会有任何接口。<br>讲简单点：docker就类似一个虚拟机软件，但是与虚拟机软件又有所区别。</p><p>docker和虚拟机的区别      </p><p><img src="https://i.loli.net/2018/10/11/5bbef55470222.png" alt="docker和虚拟机的区别.png"></p><a id="more"></a><h2 id="2-docker的重要概念"><a href="#2-docker的重要概念" class="headerlink" title="2.docker的重要概念"></a>2.docker的重要概念</h2><h3 id="镜像（image）"><a href="#镜像（image）" class="headerlink" title="镜像（image）"></a>镜像（image）</h3><p>镜像类似于虚拟机的一个快照，一般包含了系统，我们想要的服务程序等。<br>例如：Nginx的官方image就包含了，基本的linux操作系统和Nginx服务器的程序。</p><h3 id="容器（container）"><a href="#容器（container）" class="headerlink" title="容器（container）"></a>容器（container）</h3><p>镜像（image）我们可以把它看做一个虚拟机的快照文件。这个快照</p><h3 id="仓库（repository）"><a href="#仓库（repository）" class="headerlink" title="仓库（repository）"></a>仓库（repository）</h3><p>docker在很多地方都借鉴了git的优秀思想，仓库这个估计也是。<br>仓库是一个集中存放镜像的地方。<br>这样做的好处有很多，最典型的就是，我们需要在内网多个服务器上使用某个镜像时，可以从本地的镜像仓库中pull。</p><ul><li>注册服务器（Registry），一个注册服务器上可以有多个仓库，一个仓库里可以放多个镜像。</li></ul><h3 id="docker架构图"><a href="#docker架构图" class="headerlink" title="docker架构图"></a>docker架构图</h3><p><img src="https://i.loli.net/2018/10/11/5bbf09d504115.png" alt="架构图.png"></p><h2 id="3-docker的基本操作"><a href="#3-docker的基本操作" class="headerlink" title="3.docker的基本操作"></a>3.docker的基本操作</h2><h3 id="基本操作图"><a href="#基本操作图" class="headerlink" title="基本操作图"></a>基本操作图</h3><ol><li><p>常用命令<br><img src="https://i.loli.net/2018/10/11/5bbf0c83a9bb9.png" alt="常用命令.png">      </p></li><li><p>简单版<br><img src="https://i.loli.net/2018/10/11/5bbf0d0247ed9.png" alt="docker_cli_stage.png">       </p></li></ol><h3 id="镜像（image）的操作"><a href="#镜像（image）的操作" class="headerlink" title="镜像（image）的操作"></a>镜像（image）的操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>列出全部的image    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi [imageID,name]</span><br></pre></td></tr></table></figure><p>删除指定的某个镜像，可以用id或者image的name。<br>注：当有镜像正在被使用的时候是无法删除的    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag [image_name:tag] [new_name:new_tag]</span><br></pre></td></tr></table></figure><p>docker给镜像（image）写标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker history [imageID,name]</span><br></pre></td></tr></table></figure><p>查看指定的镜像构成的历史</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it [imageID,name]</span><br></pre></td></tr></table></figure><p>执行一个镜像到</p><h3 id="容器（container）的操作"><a href="#容器（container）的操作" class="headerlink" title="容器（container）的操作"></a>容器（container）的操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p>查看当前的容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-docker是什么？？&quot;&gt;&lt;a href=&quot;#1-docker是什么？？&quot; class=&quot;headerlink&quot; title=&quot;1.docker是什么？？&quot;&gt;&lt;/a&gt;1.docker是什么？？&lt;/h2&gt;&lt;p&gt;Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的Linux 机器上，也可以实现虚拟化。 容器是完全使用沙箱机制，相互之间不会有任何接口。&lt;br&gt;讲简单点：docker就类似一个虚拟机软件，但是与虚拟机软件又有所区别。&lt;/p&gt;
&lt;p&gt;docker和虚拟机的区别      &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/10/11/5bbef55470222.png&quot; alt=&quot;docker和虚拟机的区别.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="docker" scheme="http://blog.fbi.st/categories/docker/"/>
    
    
      <category term="docker" scheme="http://blog.fbi.st/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch_cat_api笔记</title>
    <link href="http://blog.fbi.st/2018/12/09/elasticsearch_cat_api%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.fbi.st/2018/12/09/elasticsearch_cat_api笔记/</id>
    <published>2018-12-09T14:57:11.000Z</published>
    <updated>2019-12-26T09:11:15.639Z</updated>
    
    <content type="html"><![CDATA[<p>如果经常在命令行环境下工作，cat API 对你会非常有用。用 Linux 的 cat 命令命名，这些 API 也就设计成像 *nix 命令行工具一样工作了。</p><p>他们提供的统计和前面已经讨论过的 API ( 健康、节点统计 等等 ) 是一样的。但是输出以表格的形式提供，而不是 JSON。对于系统管理员来说这是 非常 方便的，你仅仅想浏览一遍集群或者找出内存使用偏高的节点而已。</p><a id="more"></a><p>通过 GET 请求发送 cat 命名可以列出所有可用的 API：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">GET /_cat</span><br><span class="line"></span><br><span class="line">=^.^=</span><br><span class="line">/_cat/allocation</span><br><span class="line">/_cat/shards</span><br><span class="line">/_cat/shards/&#123;index&#125;</span><br><span class="line">/_cat/master</span><br><span class="line">/_cat/nodes</span><br><span class="line">/_cat/indices</span><br><span class="line">/_cat/indices/&#123;index&#125;</span><br><span class="line">/_cat/segments</span><br><span class="line">/_cat/segments/&#123;index&#125;</span><br><span class="line">/_cat/count</span><br><span class="line">/_cat/count/&#123;index&#125;</span><br><span class="line">/_cat/recovery</span><br><span class="line">/_cat/recovery/&#123;index&#125;</span><br><span class="line">/_cat/health</span><br><span class="line">/_cat/pending_tasks</span><br><span class="line">/_cat/aliases</span><br><span class="line">/_cat/aliases/&#123;alias&#125;</span><br><span class="line">/_cat/thread_pool</span><br><span class="line">/_cat/plugins</span><br><span class="line">/_cat/fielddata</span><br><span class="line">/_cat/fielddata/&#123;fields&#125;</span><br></pre></td></tr></table></figure><h3 id="健康（health）"><a href="#健康（health）" class="headerlink" title="健康（health）"></a>健康（health）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET /_cat/health?v</span><br><span class="line"></span><br><span class="line">epoch   time    cluster status node.total node.data shards pri relo init</span><br><span class="line">1408[..] 12[..] el[..]  1         1         114 114    0    0     114</span><br><span class="line">unassign</span><br></pre></td></tr></table></figure><blockquote><p><code>?v</code>是为了显示数据的标题</p></blockquote><h3 id="命令help"><a href="#命令help" class="headerlink" title="命令help"></a>命令help</h3><p>我们看到集群里节点的一些统计，不过和完整的 节点统计 输出相比而言是非常基础的。你可以包含更多的指标，但是比起查阅文档，让我们直接问 cat API 有哪些可用的吧。  </p><p>你可以过对任意 API 添加 <code>?help</code> 参数来做到这点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /_cat/nodes?help</span><br><span class="line"></span><br><span class="line">id               | id,nodeId               | unique node id</span><br><span class="line">pid              | p                       | process id</span><br><span class="line">host             | h                       | host name</span><br><span class="line">ip               | i                       | ip address</span><br><span class="line">port             | po                      | bound transport port</span><br><span class="line">version          | v                       | es version</span><br><span class="line">build            | b                       | es build hash</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><h3 id="节点统计（nodes）"><a href="#节点统计（nodes）" class="headerlink" title="节点统计（nodes）"></a>节点统计（nodes）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /_cat/nodes?v</span><br><span class="line"></span><br><span class="line">host         ip            heap.percent ram.percent load node.role master name</span><br><span class="line">zacharys-air 192.168.1.131           45          72 1.85 d         *      Zach</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /_cat/nodes?v&amp;h=ip,port,heapPercent,heapMax</span><br><span class="line"></span><br><span class="line">ip            port heapPercent heapMax</span><br><span class="line">192.168.1.131 9300          53 990.7mb</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果经常在命令行环境下工作，cat API 对你会非常有用。用 Linux 的 cat 命令命名，这些 API 也就设计成像 *nix 命令行工具一样工作了。&lt;/p&gt;
&lt;p&gt;他们提供的统计和前面已经讨论过的 API ( 健康、节点统计 等等 ) 是一样的。但是输出以表格的形式提供，而不是 JSON。对于系统管理员来说这是 非常 方便的，你仅仅想浏览一遍集群或者找出内存使用偏高的节点而已。&lt;/p&gt;
    
    </summary>
    
      <category term="Elasticsearch非权威指南" scheme="http://blog.fbi.st/categories/Elasticsearch%E9%9D%9E%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="Elasticsearch" scheme="http://blog.fbi.st/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>MySQL触发器基本的使用</title>
    <link href="http://blog.fbi.st/2018/11/20/MySQL%E8%A7%A6%E5%8F%91%E5%99%A8%E5%9F%BA%E6%9C%AC%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://blog.fbi.st/2018/11/20/MySQL触发器基本的使用/</id>
    <published>2018-11-20T02:54:24.000Z</published>
    <updated>2019-12-26T10:07:36.807Z</updated>
    
    <content type="html"><![CDATA[<h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><p>触发器是一种特殊的<code>存储过程</code>，是嵌入到mysql的一段程序，它在插入，删除或修改特定表中的数据时触发执行。</p><h2 id="一、基本语法"><a href="#一、基本语法" class="headerlink" title="一、基本语法"></a>一、基本语法</h2><h3 id="1-创建触发器："><a href="#1-创建触发器：" class="headerlink" title="1. 创建触发器："></a>1. 创建触发器：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TRIGGER /*触发器名称*/</span><br><span class="line">AFTER / BEFORE /*(触发器工作的时机)*/ </span><br><span class="line">UPDATE / DELETE / INSERT /*(触发器监听事件)*/ </span><br><span class="line">ON /*表名(触发器监听的目标表)*/ </span><br><span class="line">FOR EACH ROW /*(行级监视，mysql固定写法，oracle不同)*/</span><br><span class="line">BEGIN</span><br><span class="line">/*sql语句集........（触发器执行动作，分号结尾）*/</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2-删除触发器："><a href="#2-删除触发器：" class="headerlink" title="2. 删除触发器："></a>2. 删除触发器：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> <span class="keyword">IF</span> exist <span class="string">`trigger_name`</span>;</span><br></pre></td></tr></table></figure><h3 id="3-查询数据库触发器："><a href="#3-查询数据库触发器：" class="headerlink" title="3. 查询数据库触发器："></a>3. 查询数据库触发器：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">triggers</span>;</span><br></pre></td></tr></table></figure><h3 id="4-触发器声明变量"><a href="#4-触发器声明变量" class="headerlink" title="4.触发器声明变量:"></a>4.触发器声明变量:</h3><p>一个变量名可以由当前字符集的数字字母字符和“<code>_</code>”、“<code>$</code>”和“<code>.</code>”组成;</p><h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><p>MySQL 中使用 <code>DECLARE</code> 来定义一局部变量，该变量只能在 <code>BEGIN … END</code> 复合语句中使用，并且应该定义在复合语句的开头，即其它语句之前。  </p><p>语法是：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> var_name[...]<span class="keyword">type</span>[<span class="keyword">DEFAULT</span> <span class="keyword">value</span>]</span><br></pre></td></tr></table></figure></p><p>其中，  </p><ul><li><code>var_name</code> 为变量名称，同sql语句一样，变量名不区分大小写;   </li><li><code>type</code> 为mysql支持的任何数据类型;   </li><li><code>DEFAULT</code> 子句提供默认值，值可以是一个表达式 (如果需要可以使用)。   </li></ul><blockquote><p>注: 可以同时定义多个同类型的变量，用逗号隔开，变量初始值为NULL；  </p></blockquote><p>例如：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> a <span class="built_in">INT</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span> b <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure></p><h4 id="用户变量"><a href="#用户变量" class="headerlink" title="用户变量"></a>用户变量</h4><p>用户变量：相当与全局变量。 只在一个数据库中有效<br>在客户端连接到数据库实例整个过程中用户变量都是有效的<br>mysql中用户变量<strong>不需要事先声明</strong>，在用的时候直接用<code>@变量名</code> 使用就可以<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*set语句可用于向系统变量或用户变量赋值*/</span></span><br><span class="line"><span class="keyword">SET</span> @<span class="keyword">num</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="keyword">num</span> := <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*也可使用select语句来定义*/</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="keyword">num</span> := <span class="number">1</span>;</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="keyword">num</span> := field_name <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="number">1</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p><blockquote><p>注：SELECT只能用<code>:=</code> 定义 </p></blockquote><h3 id="5-变量的赋值"><a href="#5-变量的赋值" class="headerlink" title="5.变量的赋值"></a>5.变量的赋值</h3><p>mysql触发器内，对变量赋值采用 SET 语句<br>语法是：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> var_name = expr [,var_name = expr] ...</span><br></pre></td></tr></table></figure></p><p>使用举例<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> c <span class="built_in">INT</span>; </span><br><span class="line"><span class="keyword">SET</span> c = ( <span class="keyword">SELECT</span> stuCount <span class="keyword">FROM</span> <span class="keyword">class</span> <span class="keyword">WHERE</span> classID = new.classID );</span><br></pre></td></tr></table></figure></p><blockquote><h6 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a>Tips:</h6><p><strong>行变量：</strong>当目标表发生改变时候，变化的行可用行变量表示<br><code>new</code> :代表目标表目标行发生改变之后的行<br><code>old</code> :代表目标表目标行发生改变之前的行  </p></blockquote><h3 id="6-逻辑判断语句"><a href="#6-逻辑判断语句" class="headerlink" title="6.逻辑判断语句"></a>6.逻辑判断语句</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">IF <span class="comment">/*condition1*/</span> THEN</span><br><span class="line">　　　<span class="comment">/*do something;*/</span></span><br><span class="line">　ELSEIF <span class="comment">/*condition2*/</span> THEN</span><br><span class="line">　<span class="comment">/*do something;*/</span></span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</span><br></pre></td></tr></table></figure><h2 id="二、示例"><a href="#二、示例" class="headerlink" title="二、示例"></a>二、示例</h2><h3 id="1-触发器监听：insert"><a href="#1-触发器监听：insert" class="headerlink" title="1.触发器监听：insert"></a>1.触发器监听：insert</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> <span class="string">`trigger_name`</span> </span><br><span class="line"><span class="keyword">AFTER</span> <span class="keyword">INSERT</span> </span><br><span class="line"><span class="keyword">ON</span> <span class="string">`table`</span> </span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">/* 要做的SQL操作，如：</span></span><br><span class="line"><span class="comment">UPDATE table1 SET field = 'abc' WHERE id = new.id;</span></span><br><span class="line"><span class="comment">new 是行变量。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><h3 id="2-触发器监听：delete"><a href="#2-触发器监听：delete" class="headerlink" title="2.触发器监听：delete"></a>2.触发器监听：delete</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> <span class="string">`trigger_name2`</span> </span><br><span class="line"><span class="keyword">AFTER</span> <span class="keyword">DELETE</span> </span><br><span class="line"><span class="keyword">ON</span> <span class="string">`table`</span> </span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">/* 要做的SQL操作，如：</span></span><br><span class="line"><span class="comment">UPDATE table1 SET field = 'abc' WHERE id = old.id;</span></span><br><span class="line"><span class="comment">old 是行变量。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><h3 id="3-触发器监听：update"><a href="#3-触发器监听：update" class="headerlink" title="3.触发器监听：update"></a>3.触发器监听：update</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> <span class="string">`trigger_name3`</span> </span><br><span class="line"><span class="keyword">AFTER</span> <span class="keyword">UPDATE</span> </span><br><span class="line"><span class="keyword">ON</span> <span class="string">`table`</span> </span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">/* 要做的SQL操作，如：</span></span><br><span class="line"><span class="comment">UPDATE table1 SET field = 'abc' WHERE id = new.id;</span></span><br><span class="line"><span class="comment">old 是行变量。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><h3 id="4-触发器SET和IF语句的综合使用"><a href="#4-触发器SET和IF语句的综合使用" class="headerlink" title="4.触发器SET和IF语句的综合使用"></a>4.触发器SET和IF语句的综合使用</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> <span class="string">`trigger_name4`</span> </span><br><span class="line"><span class="keyword">AFTER</span> <span class="keyword">UPDATE</span> </span><br><span class="line"><span class="keyword">ON</span> <span class="string">`table`</span> </span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> c <span class="built_in">INT</span>;</span><br><span class="line"><span class="keyword">SET</span> c = <span class="number">1</span>;</span><br><span class="line">IF c &lt; 1 THEN</span><br><span class="line"><span class="keyword">SET</span> c = <span class="number">2</span>;</span><br><span class="line">ELSEIF c &gt; 1 THEN</span><br><span class="line">　<span class="keyword">SET</span> c = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="comment">/* 要做的SQL操作，如：</span></span><br><span class="line"><span class="comment">UPDATE table1 SET field = 'abc' WHERE id = new.id;</span></span><br><span class="line"><span class="comment">old 是行变量。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><blockquote><p>注意：<br><strong>①</strong>：for each row:必须填写，保证mysql支持行级控制，oracle同时支持行级控制和语句级控制。<br><strong>②</strong>：如果在BEFORE或AFTER触发程序的执行过程中出现错误，将导致调用触发程序的整个语句的失败。对于事务性表，如果触发程序失败（以及由此导致的整个语句的失败），该语句所执行的所有更改将回滚。对于非事务性表，不能执行这类回滚，因而，即使语句失败，失败之前所作的任何更改依然有效。  </p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;触发器&quot;&gt;&lt;a href=&quot;#触发器&quot; class=&quot;headerlink&quot; title=&quot;触发器&quot;&gt;&lt;/a&gt;触发器&lt;/h2&gt;&lt;p&gt;触发器是一种特殊的&lt;code&gt;存储过程&lt;/code&gt;，是嵌入到mysql的一段程序，它在插入，删除或修改特定表中的数据时触发执行。&lt;/p&gt;
&lt;h2 id=&quot;一、基本语法&quot;&gt;&lt;a href=&quot;#一、基本语法&quot; class=&quot;headerlink&quot; title=&quot;一、基本语法&quot;&gt;&lt;/a&gt;一、基本语法&lt;/h2&gt;&lt;h3 id=&quot;1-创建触发器：&quot;&gt;&lt;a href=&quot;#1-创建触发器：&quot; class=&quot;headerlink&quot; title=&quot;1. 创建触发器：&quot;&gt;&lt;/a&gt;1. 创建触发器：&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CREATE TRIGGER /*触发器名称*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;AFTER / BEFORE /*(触发器工作的时机)*/ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UPDATE / DELETE / INSERT /*(触发器监听事件)*/ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ON /*表名(触发器监听的目标表)*/ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FOR EACH ROW /*(行级监视，mysql固定写法，oracle不同)*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BEGIN&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/*sql语句集........（触发器执行动作，分号结尾）*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;END;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://blog.fbi.st/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="http://blog.fbi.st/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>虚拟机装osx</title>
    <link href="http://blog.fbi.st/2018/11/10/%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%A3%85osx/"/>
    <id>http://blog.fbi.st/2018/11/10/虚拟机装osx/</id>
    <published>2018-11-10T07:06:34.000Z</published>
    <updated>2019-12-26T09:56:36.719Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="工具-原料"><a href="#工具-原料" class="headerlink" title="工具/原料"></a>工具/原料</h3><p><a href>VMware® Workstation 12 Pro</a><br><a href>unlocker 208（for OS X 插件补丁）</a><br><a href>Mac OS X 10.11镜像</a><br><a href>darwin.iso</a></p><h2 id="方法-步骤"><a href="#方法-步骤" class="headerlink" title="方法/步骤"></a>方法/步骤</h2><h3 id="1-下载以上文件"><a href="#1-下载以上文件" class="headerlink" title="1. 下载以上文件"></a>1. 下载以上文件</h3><h3 id="2-unlocker208安装"><a href="#2-unlocker208安装" class="headerlink" title="2. unlocker208安装"></a>2. unlocker208安装</h3><a id="more"></a><p><img src="https://i.loli.net/2017/10/23/59edad5acc0a5.png" alt="I.png"><br>VM安装完成后，打开任务管理器，找到服务项，选择按描述排序，将框中关于VMware全部停止运行。  </p><p><img src="https://i.loli.net/2017/10/23/59edae0758792.png" alt="W7.png">  </p><p>解压<code>unlocker208</code>文件，找到<code>win-install.cmd</code>文件，<strong>右键以管理员身份运行</strong> 。  </p><p><strong>这一步骤很关键，决定了后续VM会不会识别出OS X。</strong>   </p><p>我安装的时候，出现了VM无法识别Mac OS X 的问题，找到了好多 <code>unlocker</code>文件都没能解决，最后试了下<code>208</code>可以了。</p><p><img src="https://i.loli.net/2017/10/23/59edaee451965.png" alt="Q.png"> </p><h3 id="3-创建虚拟机"><a href="#3-创建虚拟机" class="headerlink" title="3. 创建虚拟机"></a>3. 创建虚拟机</h3><h3 id="4-选择安装程序光盘映像文件，点击选择CDR镜像文件路径"><a href="#4-选择安装程序光盘映像文件，点击选择CDR镜像文件路径" class="headerlink" title="4. 选择安装程序光盘映像文件，点击选择CDR镜像文件路径"></a>4. 选择安装程序光盘映像文件，点击选择CDR镜像文件路径</h3><p><img src="https://i.loli.net/2017/10/23/59edaf6e13c88.png" alt="FL.png">  </p><h3 id="5-选择安装Apple-Mac-OS-X"><a href="#5-选择安装Apple-Mac-OS-X" class="headerlink" title="5. 选择安装Apple Mac OS X"></a>5. 选择安装Apple Mac OS X</h3><blockquote><p>如果第二步unlocker文件没有处理好的话，这个地方可能就不会出现Apple Mac OS X。<br>如果不行，可以多下载几个unlocker试试。版本根据实际版本选择，我的是10.11.<br>如果还是不行，关闭所有的vm进程和服务后再试试（我就是这样试好的）   </p></blockquote><h3 id="6-名称和安装位置自己定义一下"><a href="#6-名称和安装位置自己定义一下" class="headerlink" title="6. 名称和安装位置自己定义一下"></a>6. 名称和安装位置自己定义一下</h3><h3 id="7-指定磁盘大小-40G-，我选择的是“将虚拟磁盘拆分成多个文件”-点击”下一步”"><a href="#7-指定磁盘大小-40G-，我选择的是“将虚拟磁盘拆分成多个文件”-点击”下一步”" class="headerlink" title="7. 指定磁盘大小 40G ，我选择的是“将虚拟磁盘拆分成多个文件”,点击”下一步”"></a>7. 指定磁盘大小 40G ，我选择的是“将虚拟磁盘拆分成多个文件”,点击”下一步”</h3><h3 id="8-自定义硬件-设置内存4G-CPU-4个-点击“完成”"><a href="#8-自定义硬件-设置内存4G-CPU-4个-点击“完成”" class="headerlink" title="8. 自定义硬件 设置内存4G CPU 4个 点击“完成”"></a>8. 自定义硬件 设置内存4G CPU 4个 点击“完成”</h3><p>点击编辑虚拟机设置–》点击选项卡–》常规中  “增强型键盘”选择“在可用时使用（推荐）” 不设置,后面是没办法使用键盘操作的  </p><p>开启虚拟机会提出错误<br><img src="https://i.loli.net/2017/10/23/59edb12934158.png" alt="vv.png">  </p><blockquote><p>解决上面错误方法：找到VM安装的根文件，找到根文件下的 OS X xx.xx.vmx，右键用记事本方式打开，找到<code>smc.present = &quot;TRUE&quot;</code>在其后面加上<code>smc.version = &quot;0&quot;</code>  保存关闭，再开启时就没有错误了。<br><img src="https://i.loli.net/2017/10/23/59edb1957e5ae.png" alt="2X.png"><br><img src="https://i.loli.net/2017/10/23/59edb21e13cb2.png" alt="L7.png"><br><img src="https://i.loli.net/2017/10/23/59edb24577359.png" alt="SC.png"><br><strong> 如果开启出现如下图蓝屏项有两种可能：</strong>  </p></blockquote><ol><li>CD/DVD(IDE)设置问题 看看设备状态的“启动时连接”是否勾选；  </li><li>你下载的镜像文件有问题;  </li></ol><p><strong> 如果开启出现苹果标后重启现象</strong>，基本确定是您的电脑的硬件DEP（数据执行保护）打开了。<br><strong> 关闭操作：</strong> 硬件DEP选项一般都会包含<code>&quot;EXECUTE DISABLE BIT&quot;, &quot;NX&quot;, &quot;DATA EXECUTION PREVENTION&quot; 或 &quot;XD&quot;</code> 四个关键词中的一个。<br>一般都能在主菜单的“Power”或“Advanced”中找到，设置为Disabled后重新启动电脑(最好是冷启动)即可。<br>这下启动虚拟机一切正常了<br>选择系统语言 <code>继续</code><br>选择“磁盘工具”选择虚拟磁盘 点击 <code>抹掉</code><br>选择 <code>硬盘安装</code><br>恭喜你，已经成功了，等待安装完成</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;h3 id=&quot;工具-原料&quot;&gt;&lt;a href=&quot;#工具-原料&quot; class=&quot;headerlink&quot; title=&quot;工具/原料&quot;&gt;&lt;/a&gt;工具/原料&lt;/h3&gt;&lt;p&gt;&lt;a href&gt;VMware® Workstation 12 Pro&lt;/a&gt;&lt;br&gt;&lt;a href&gt;unlocker 208（for OS X 插件补丁）&lt;/a&gt;&lt;br&gt;&lt;a href&gt;Mac OS X 10.11镜像&lt;/a&gt;&lt;br&gt;&lt;a href&gt;darwin.iso&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;方法-步骤&quot;&gt;&lt;a href=&quot;#方法-步骤&quot; class=&quot;headerlink&quot; title=&quot;方法/步骤&quot;&gt;&lt;/a&gt;方法/步骤&lt;/h2&gt;&lt;h3 id=&quot;1-下载以上文件&quot;&gt;&lt;a href=&quot;#1-下载以上文件&quot; class=&quot;headerlink&quot; title=&quot;1. 下载以上文件&quot;&gt;&lt;/a&gt;1. 下载以上文件&lt;/h3&gt;&lt;h3 id=&quot;2-unlocker208安装&quot;&gt;&lt;a href=&quot;#2-unlocker208安装&quot; class=&quot;headerlink&quot; title=&quot;2. unlocker208安装&quot;&gt;&lt;/a&gt;2. unlocker208安装&lt;/h3&gt;
    
    </summary>
    
      <category term="tools" scheme="http://blog.fbi.st/categories/tools/"/>
    
    
      <category term="tools" scheme="http://blog.fbi.st/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>看完《我不是药神》后我用python分析了武汉的药店</title>
    <link href="http://blog.fbi.st/2018/10/20/%E7%9C%8B%E5%AE%8C%E3%80%8A%E6%88%91%E4%B8%8D%E6%98%AF%E8%8D%AF%E7%A5%9E%E3%80%8B%E5%90%8E%E6%88%91%E7%94%A8python%E5%88%86%E6%9E%90%E4%BA%86%E4%B8%AD%E5%9B%BD%E7%9A%84%E8%8D%AF%E5%BA%97/"/>
    <id>http://blog.fbi.st/2018/10/20/看完《我不是药神》后我用python分析了中国的药店/</id>
    <published>2018-10-20T12:13:31.000Z</published>
    <updated>2019-12-26T09:56:01.783Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>其实打算分析药店这个事情，与看完《我不是药神》没啥关系，取这个标题，只是为了蹭一波电影的热度。<br>主要起因是，在世界杯期间看到一条段子：  </p><blockquote><p>美国500米就有一个篮球场，巴西每个小区一个足球场，而中国500米就有个大药房。  </p></blockquote><p>开始只是当成一个段子，觉得有夸张的嫌疑。但某天逛完超市回家，刻意的数了一下药店数量。  </p><p><strong> 震惊! 不到1km的路上居然有6，7个药店！真可怕。 </strong>   </p><p>正好我最近刚开始学习python数据分析，于是，就决心以“超一线城市大武汉”为例，好好看看中国的药店到底多不多。  </p><a id="more"></a><h2 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h2><h3 id="通过地图WebAPI"><a href="#通过地图WebAPI" class="headerlink" title="通过地图WebAPI"></a>通过地图WebAPI</h3><p>我尝试着找了一下，好像网上没有现成的数据。<br>只能自己动手，搞点数据了。  </p><p>首先想到的是通过百度地图来获取数据，找了找，果然有相关的WebAPI。  </p><blockquote><p>地点检索服务（又名Place API）是一类Web API接口服务；<br>服务提供多种场景的地点（POI）检索功能，包括城市检索、圆形区域检索、矩形区域检索。开发者可通过接口获取地点（POI）基础或详细地理信息。    </p></blockquote><p>能直接通过WebAPI获取数据，连解析页面都省了，简直太爽了有木有？</p><p>本以为可以直接通过城市的检索的接口直接获取到我想要的数据。<br>然鹅，我错了，事情没我想的那么简单，这个api居然最多返回400条数据。大武汉的药店明显不止400个。我试着找了一下高德，高德更抠门，就200个结果。只能想想其他办法了。</p><h3 id="切割地图"><a href="#切割地图" class="headerlink" title="切割地图"></a>切割地图</h3><p>继续找其他的解决办法，忽然发现了地点检索api后面还有一个矩形区域检索功能。灵机一动，我可以把大武汉分成很多个小矩形，分块检索啊，这样也不会有数据丢失。        </p><p>想法很好，可当我看到武汉这长得像块‘三鲜豆皮’的地图的时候，问题又来了，我该怎么切割这个地图。  </p><p><img src="https://i.loli.net/2018/07/30/5b5f15caa7de8.jpg" alt="wh_map.jpg">  </p><p>抱着不能错过一个，也不能浪费api资源的态度，我打算先找到武汉东南西北之最，也就是找到一个可以将武汉包裹的最小矩形。</p><p>想到了通过城市边界点筛选的方式获取武汉的最东，最南，最西，最北。结果找了半天没发现百度webapi里有这个，只有一个javascriptAPI有这个功能，比较麻烦。反倒是高德有个“行政区域查询”的api可以直接获取到城市边界。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://restapi.amap.com/v3/config/district?key=您的key&amp;keywords=武汉&amp;subdistrict=0&amp;extensions=all</span><br></pre></td></tr></table></figure></p><p>接下来的事情就简单了，分析获取到的城市边界点列表，找到经纬度的最大最小值，即城市的最东南西北。然后从东到西切20刀，从南到北均匀切20刀。武汉一下就被切成400块了。  </p><p>我们就可以分块的去调用地点检索的API，如果有超过400个的，就调整参数，多切几刀。  </p><p>当然，这样切肯定有误伤周边城市的情况。这种情况就通过POI的“city”属性去筛选掉。</p><p>至此，我们就成功的获取到了我们想要的比较完整的药店的数据了。</p><h3 id="其他数据"><a href="#其他数据" class="headerlink" title="其他数据"></a>其他数据</h3><p>有了药店的数据，我们还需要一些其他的数据，例如：行政区域面积啊，人口数量等。<br>像这类的数据，一般在当地的统计局网站都能下载到。 </p><h2 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h2><h3 id="药店位置分布"><a href="#药店位置分布" class="headerlink" title="药店位置分布"></a>药店位置分布</h3><p>我猜想，药店的数量应该与人口密度和地方经济情况有所关系。        </p><p>首先，我们通过图表看看武汉的人口密度：<br><img src="https://i.loli.net/2018/08/01/5b61bd5f1e4d0.png" alt="武汉人口密度.png"></p><p>从图像可以看出，人口密度最大的是江汉区，硚口区和武昌区，这些都是武汉的老城区。<br>黄陂区，江夏，汉南这些都算是郊区，人口密度低，也情有可原。<br>意外的是：主城区洪山区人口密度居然也不高。（可能统计面积的时候几个大湖也算进去了？）        </p><p>再看看，我们收集的药店的数据，我爬取的百度地图上能找到的武汉所有药店，一共爬到了1936个，估计还有一些没有收录到的遗漏了。在武汉药监局官网查到的药品零售企业有4317个，但这里可能又很多过期可但未注销的企业。所以这次我们以百度地图爬取到的数据为准。</p><p>首先我们看看各个区人数和药店数量的基本情况：<br><img src="https://i.loli.net/2018/08/02/5b631261e4971.png" alt="武汉各区人数和药店数.png">  </p><p>基本大多数的区药店数量都超过了1万人一个药店。     </p><p>再看看武汉每个区的药店数量情况，武汉各个区域药店的数量占比：<br><img src="https://i.loli.net/2018/08/02/5b62d5e88df71.png" alt="武汉药店各区域占比.png">   </p><p>武昌、江岸、洪山、江汉这几个主城区果然还是占了大多的数的药店。</p><p>药店密度和人口密度是否有关呢？<br><img src="https://i.loli.net/2018/08/01/5b61c3933b99d.png" alt="武汉各区多少人一个药店.png"></p><p>药店最密集的是江岸区，3408个人就有一个药店。而药店比较稀缺的新洲区居然平均26317个人才有一个药店，新洲区的朋友会不会有买药难的问题？</p><p>经济状况好的主城区人均药店数明显比郊区高。</p><p>光在表格上我们没办法形象的看到药店的分布，所以做成热力图更形象了。<br><img src="https://i.loli.net/2018/08/01/5b61c590c5ae0.png" alt="武汉药店热力分布图.png"></p><h3 id="药店店名分析"><a href="#药店店名分析" class="headerlink" title="药店店名分析"></a>药店店名分析</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;其实打算分析药店这个事情，与看完《我不是药神》没啥关系，取这个标题，只是为了蹭一波电影的热度。&lt;br&gt;主要起因是，在世界杯期间看到一条段子：  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;美国500米就有一个篮球场，巴西每个小区一个足球场，而中国500米就有个大药房。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;开始只是当成一个段子，觉得有夸张的嫌疑。但某天逛完超市回家，刻意的数了一下药店数量。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 震惊! 不到1km的路上居然有6，7个药店！真可怕。 &lt;/strong&gt;   &lt;/p&gt;
&lt;p&gt;正好我最近刚开始学习python数据分析，于是，就决心以“超一线城市大武汉”为例，好好看看中国的药店到底多不多。  &lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://blog.fbi.st/categories/python/"/>
    
    
      <category term="python" scheme="http://blog.fbi.st/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>SQLAlchemy的属性介绍</title>
    <link href="http://blog.fbi.st/2018/09/26/SQLAlchemy%E7%9A%84%E5%B1%9E%E6%80%A7%E4%BB%8B%E7%BB%8D/"/>
    <id>http://blog.fbi.st/2018/09/26/SQLAlchemy的属性介绍/</id>
    <published>2018-09-26T13:20:54.000Z</published>
    <updated>2019-12-26T10:09:30.302Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SQLAlchemy的应用"><a href="#SQLAlchemy的应用" class="headerlink" title="SQLAlchemy的应用"></a>SQLAlchemy的应用</h2><h3 id="行数据类型"><a href="#行数据类型" class="headerlink" title="行数据类型"></a>行数据类型</h3><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>Integer</td><td>整数</td></tr><tr><td>String (size)</td><td>有最大长度的字符串</td></tr><tr><td>Text</td><td>长 unicode 文本</td></tr><tr><td>Date</td><td>表示为日期</td></tr><tr><td>DateTime</td><td>表示为 datetime 对象 的时间和日期</td></tr><tr><td>Float</td><td>存储浮点值</td></tr><tr><td>Boolean</td><td>存储布尔值</td></tr><tr><td>PickleType</td><td>存储一个持久化 Python 对象</td></tr><tr><td>LargeBinary</td><td>存储任意大的二进制数据</td></tr></tbody></table><a id="more"></a><h3 id="其他行属性"><a href="#其他行属性" class="headerlink" title="其他行属性"></a>其他行属性</h3><p><code>primary_key=True</code> 是否是主键<br><code>db.ForeignKey(&#39;person.id&#39;)</code> 表示设置XX表名.XX字段名外键<br><code>nullable=False</code> 是否能为空<br><code>unique=True</code> 是否能重复<br><code>autoincrement=True</code> 是否自增长<br><code>default=0</code> 默认值<br><code>index=True</code> 索引<br><code>name</code> 名称<br><code>type_</code> 列类型</p><h3 id="关系链接"><a href="#关系链接" class="headerlink" title="关系链接"></a>关系链接</h3><p>一对多的关系：  </p><p>如果要表示一对一的关系，在定义<code>relationship</code> 的时候设置<code>uselist</code> 为<code>False</code> （默认为<code>True</code> ）</p><p><code>db.relationship(&#39;Teams&#39;)</code> 定义一个关系<br><code>backref=db.backref(&#39;users&#39;)</code> 反向引用<br><code>primaryjoin=&#39;Persion.like_id==Book.id&#39;</code> 多个外键的情况</p><p>多对多的关系有中间表：</p><p><code>secondary = 中间表模型,</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">tags = db.Table(&apos;tags&apos;,</span><br><span class="line">    db.Column(&apos;tag_id&apos;, db.Integer, db.ForeignKey(&apos;tag.id&apos;)),</span><br><span class="line">    db.Column(&apos;page_id&apos;, db.Integer, db.ForeignKey(&apos;page.id&apos;))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">class Page(db.Model):</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)</span><br><span class="line">    tags = db.relationship(&apos;Tag&apos;, secondary=tags,</span><br><span class="line">        backref=db.backref(&apos;pages&apos;, lazy=&apos;dynamic&apos;))</span><br><span class="line"></span><br><span class="line">class Tag(db.Model):</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)</span><br></pre></td></tr></table></figure><p><code>secondary=association_table,        back_populates=&quot;children&quot;</code>   </p><p>循环一对多关系<br>还是我自己写的Persion和Book关系，一个人可能写过多本书，一本Book只有一个Persion写，N个人最喜欢1个书，每个人只能有一个最喜欢的这个例子可能不大恰当，<br>但是就是两个单向的一对多关系，是不能用多对多关系的，<br>下面是我给出的例子<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Persion</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'persion'</span></span><br><span class="line">    id = Column(Integer, autoincrement=<span class="literal">True</span>, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">1024</span>))</span><br><span class="line">    like_id = Column(Integer, ForeignKey(<span class="string">'book.id'</span>))</span><br><span class="line">    books = relationship(<span class="string">'Book'</span>, backref=<span class="string">'auther'</span>, lazy=<span class="string">"dynamic"</span>,</span><br><span class="line">                         primaryjoin=<span class="string">'Book.auther_id==Persion.id'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'book'</span></span><br><span class="line">    id = Column(Integer, autoincrement=<span class="literal">True</span>, primary_key=<span class="literal">True</span>)</span><br><span class="line">    likes = relationship(<span class="string">'Persion'</span>, backref=<span class="string">'like'</span>, lazy=<span class="string">"dynamic"</span>,</span><br><span class="line">                         primaryjoin=<span class="string">'Persion.like_id==Book.id'</span>)</span><br><span class="line">    name = Column(String(<span class="number">1024</span>))</span><br><span class="line">    auther_id = Column(Integer, ForeignKey(<span class="string">'persion.id'</span>))</span><br></pre></td></tr></table></figure></p><p>主要是添加<code>primaryjoin</code> 属性，说明关联的字段<br>在使用sqlalchemy的时候有很多属性，类似<code>lazy</code> ，<code>backref</code> ，<code>primaryjoin</code> 这样的属性，备选项很多，需要多多查询官方文档。只有使用过过才会比较熟悉</p><h3 id="表的引擎和编码"><a href="#表的引擎和编码" class="headerlink" title="表的引擎和编码"></a>表的引擎和编码</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Table(<span class="string">'mytable'</span>, metadata,</span><br><span class="line">      Column(<span class="string">'data'</span>, String(<span class="number">32</span>)),</span><br><span class="line">      mysql_engine=<span class="string">'InnoDB'</span>,</span><br><span class="line">      mysql_charset=<span class="string">'utf8'</span>,</span><br><span class="line">      mysql_key_block_size=<span class="string">"1024"</span></span><br><span class="line">     )</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">或</span><br><span class="line">```py</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Base)</span>:</span></span><br><span class="line">    <span class="string">"""Users table"""</span></span><br><span class="line">    <span class="comment"># 表的名字</span></span><br><span class="line">    __tablename__=<span class="string">'users'</span></span><br><span class="line">    __table_args__=&#123;<span class="string">'sqlite_autoincrement'</span>: <span class="literal">True</span>,<span class="string">'mysql_engine'</span>: <span class="string">'InnoDB'</span>,<span class="string">'mysql_charset'</span>: <span class="string">'utf8'</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 表结构</span></span><br><span class="line">    id=Column(Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SQLAlchemy的应用&quot;&gt;&lt;a href=&quot;#SQLAlchemy的应用&quot; class=&quot;headerlink&quot; title=&quot;SQLAlchemy的应用&quot;&gt;&lt;/a&gt;SQLAlchemy的应用&lt;/h2&gt;&lt;h3 id=&quot;行数据类型&quot;&gt;&lt;a href=&quot;#行数据类型&quot; class=&quot;headerlink&quot; title=&quot;行数据类型&quot;&gt;&lt;/a&gt;行数据类型&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Integer&lt;/td&gt;
&lt;td&gt;整数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String (size)&lt;/td&gt;
&lt;td&gt;有最大长度的字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;长 unicode 文本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Date&lt;/td&gt;
&lt;td&gt;表示为日期&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DateTime&lt;/td&gt;
&lt;td&gt;表示为 datetime 对象 的时间和日期&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Float&lt;/td&gt;
&lt;td&gt;存储浮点值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;存储布尔值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PickleType&lt;/td&gt;
&lt;td&gt;存储一个持久化 Python 对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LargeBinary&lt;/td&gt;
&lt;td&gt;存储任意大的二进制数据&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="python" scheme="http://blog.fbi.st/categories/python/"/>
    
    
      <category term="python" scheme="http://blog.fbi.st/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>SQLAlchemy的基本操作</title>
    <link href="http://blog.fbi.st/2018/09/23/SQLAlchemy%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://blog.fbi.st/2018/09/23/SQLAlchemy的基本操作/</id>
    <published>2018-09-23T11:57:17.000Z</published>
    <updated>2019-12-26T10:09:15.343Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>通过pip安装SQLAlchemy</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install sqlalchemy</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><h3 id="Flask-config配置方法"><a href="#Flask-config配置方法" class="headerlink" title="Flask config配置方法"></a>Flask config配置方法</h3><p>以MySQL为例<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#config.py</span></span><br><span class="line">DB_URI = <span class="string">"mysql://&#123;&#125;:&#123;&#125;@&#123;&#125;:&#123;&#125;/&#123;&#125;?charset=utf8"</span>.format(USERNAME,PASSWORD,HOST_NAME,PROT,DATABAES)</span><br><span class="line">SQLALCHEMY_DATABASE_URI =DB_URI</span><br><span class="line"></span><br><span class="line"><span class="comment">#models.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line">db = SQLAlchemy()</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config.from_object(config)</span><br><span class="line">db.init_app(app)</span><br></pre></td></tr></table></figure></p><h3 id="直接连接的写法"><a href="#直接连接的写法" class="headerlink" title="直接连接的写法"></a>直接连接的写法</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line"><span class="comment">#sqlite内存：</span></span><br><span class="line">DATABAES_URL = <span class="string">'sqlite:///:memory:'</span></span><br><span class="line"><span class="comment">#sqlite文件: </span></span><br><span class="line">DATABAES_URL = <span class="string">'sqlite:///./test.db'</span></span><br><span class="line"><span class="comment">#mysql+pymysql：</span></span><br><span class="line">DATABAES_URL = <span class="string">'mysql+pymysql://username:password@hostname:port/dbname'</span></span><br><span class="line"><span class="comment">#mssql+pymssql: </span></span><br><span class="line">DATABAES_URL =<span class="string">'mssql+pymssql://username:password@hostname:port/dbname'</span></span><br><span class="line"></span><br><span class="line">engine = create_engine(DATABAES_URL,echo=<span class="literal">True</span>)</span><br><span class="line">DB_Session = sessionmaker(bind=engine)</span><br><span class="line"><span class="comment">#create_engine() 会返回一个数据库引擎，echo 参数为 True 时，会显示每条执行的 SQL 语句，生产环境下可关闭。</span></span><br><span class="line">session = DB_Session()</span><br></pre></td></tr></table></figure><h2 id="创建数据模型"><a href="#创建数据模型" class="headerlink" title="创建数据模型"></a>创建数据模型</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy,Column</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义Person对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(db.Model)</span>:</span></span><br><span class="line"><span class="string">'''Person table'''</span></span><br><span class="line"><span class="comment"># 表的名字</span></span><br><span class="line">    __tablename__  = <span class="string">"person"</span></span><br><span class="line">    __table_args__ = &#123;</span><br><span class="line"><span class="string">"mysql_engine"</span>:<span class="string">"InnoDB"</span>,   <span class="comment"># 表的引擎</span></span><br><span class="line"><span class="string">"mysql_charset"</span>:<span class="string">"utf8"</span>   <span class="comment"># 表的编码格式</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 表结构</span></span><br><span class="line">id=Column(Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span><br><span class="line">name = Column(String(<span class="number">128</span>),primary_key=<span class="literal">True</span>,nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">db.create_all()</span><br></pre></td></tr></table></figure><p><strong>* 表结构更具体的参数设置,如主键、自增、外键等属性，见另一篇文章 [ SQLAlchemy的应用 ]</strong></p><h2 id="数据的CRUD"><a href="#数据的CRUD" class="headerlink" title="数据的CRUD"></a>数据的CRUD</h2><ul><li><p>添加数据  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">person = Person(name = <span class="string">'aaa'</span>)</span><br><span class="line">db.session.add(person)</span><br><span class="line"><span class="comment">#事务提交</span></span><br><span class="line">db.session.commit()</span><br><span class="line">db.session.close()</span><br></pre></td></tr></table></figure></li><li><p>查询数据  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">person = Person.query.filter(Person.name = <span class="string">'aaa'</span>).first()</span><br><span class="line"><span class="keyword">print</span> person.name</span><br></pre></td></tr></table></figure></li><li><p>修改数据  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先把要修改的数据查找出来</span></span><br><span class="line">person = Person.query.filter(Person.name = <span class="string">'aaa'</span>).first()</span><br><span class="line">person.name = <span class="string">'bbb'</span></span><br><span class="line">db.session.commit()</span><br><span class="line">db.session.close()</span><br></pre></td></tr></table></figure></li><li><p>删除数据</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先把要修改的数据查找出来</span></span><br><span class="line">person = Person.query.filter(Person.name = <span class="string">'aaa'</span>).first()</span><br><span class="line">db.session.delete(person)</span><br><span class="line">db.session.commit()</span><br><span class="line">db.session.close()</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>增、删、改操作都需要提交事务<code>db.session.commit()</code> ,查询操作不需要</p></blockquote><h2 id="执行sql语句"><a href="#执行sql语句" class="headerlink" title="执行sql语句"></a>执行sql语句</h2><p>使用<code>execute()</code> 方法<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">s=db.session()</span><br><span class="line"><span class="comment"># 不能用 `?` 的方式来传递参数 要用 `:param` 的形式来指定参数</span></span><br><span class="line"><span class="comment"># s.execute('INSERT INTO person (name, age, password) VALUES (?, ?, ?)',('bigpang',2,'1122121'))  </span></span><br><span class="line"><span class="comment"># 这样执行报错 </span></span><br><span class="line"><span class="comment"># s.execute('INSERT INTO person (name, age, password) VALUES (:aa, :bb, :cc)',(&#123;'aa':'bigpang2','bb':22,'cc':'998'&#125;))</span></span><br><span class="line"><span class="comment"># s.commit()</span></span><br><span class="line"><span class="comment"># 这样执行成功</span></span><br><span class="line">res=s.execute(<span class="string">'select * from person where name=:aaa'</span>,&#123;<span class="string">'aaa'</span>:<span class="string">'aaa'</span>&#125;)</span><br><span class="line"><span class="comment"># print(res['name'])  # 错误</span></span><br><span class="line"><span class="comment"># print(res.name)    # 错误</span></span><br><span class="line"><span class="comment"># print(type(res))   # 错误</span></span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> res:</span><br><span class="line">print(r[<span class="string">'name'</span>])</span><br><span class="line"></span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure></p><h2 id="完整的示例代码"><a href="#完整的示例代码" class="headerlink" title="完整的示例代码"></a>完整的示例代码</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="comment"># ***************************</span></span><br><span class="line"><span class="comment"># 初始化数据库连接</span></span><br><span class="line">DATABAES_URL = <span class="string">'mysql+pymysql://username:password@hostname:port/dbname'</span></span><br><span class="line">engine = create_engine(DATABAES_URL,echo=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 创建对象的基类</span></span><br><span class="line">Base=declarative_base()</span><br><span class="line"><span class="comment"># 创建会话类</span></span><br><span class="line">DBSession=sessionmaker(bind=engine)</span><br><span class="line"><span class="comment"># ******************</span></span><br><span class="line"><span class="comment"># 定义User对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Base)</span>:</span></span><br><span class="line"><span class="string">"""Users table"""</span></span><br><span class="line"><span class="comment"># 表的名字</span></span><br><span class="line">__tablename__=<span class="string">'users'</span></span><br><span class="line">__table_args__=&#123;<span class="string">'sqlite_autoincrement'</span>: <span class="literal">True</span>&#125;</span><br><span class="line"><span class="comment"># 表结构</span></span><br><span class="line">id=Column(Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span><br><span class="line">name=Column(String(<span class="number">32</span>),nullable=<span class="literal">False</span>)</span><br><span class="line">age=Column(Integer,default=<span class="number">0</span>)</span><br><span class="line">password=Column(String(<span class="number">64</span>),unique=<span class="literal">True</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blog</span><span class="params">(Base)</span>:</span></span><br><span class="line"><span class="string">"""docstring for Blog"""</span></span><br><span class="line">__tablename__=<span class="string">'blogs'</span></span><br><span class="line">id=Column(Integer,primary_key=<span class="literal">True</span>)</span><br><span class="line">title=Column(String(<span class="number">100</span>))</span><br><span class="line">desc=Column(String(<span class="number">500</span>))</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tips</span><span class="params">(Base)</span>:</span></span><br><span class="line"><span class="string">"""docstring for Tips"""</span></span><br><span class="line"></span><br><span class="line">__tablename__=<span class="string">'tips'</span></span><br><span class="line"><span class="comment">#表结构</span></span><br><span class="line">id=Column(Integer,primary_key=<span class="literal">True</span>)</span><br><span class="line">name=Column(String(<span class="number">32</span>))</span><br><span class="line"><span class="comment"># ***********************</span></span><br><span class="line"><span class="comment"># 添加一条数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">newUser</span><span class="params">()</span>:</span></span><br><span class="line"><span class="comment"># 创建会话对象</span></span><br><span class="line">session=DBSession()</span><br><span class="line">new_user=User(name=<span class="string">'Jery'</span>,password=<span class="string">'123'</span>)</span><br><span class="line">session.add(new_user)</span><br><span class="line">session.commit()</span><br><span class="line">session.close()</span><br><span class="line"><span class="comment"># 添加一条数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addUserForZhCn</span><span class="params">()</span>:</span></span><br><span class="line">session=DBSession()</span><br><span class="line">new_user=User(name=<span class="string">u'关羽2'</span>,password=<span class="string">'12322233'</span>)</span><br><span class="line">session.add(new_user)</span><br><span class="line">session.commit()</span><br><span class="line">session.close()</span><br><span class="line"><span class="comment"># 新增多条数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addmoreUser</span><span class="params">()</span>:</span></span><br><span class="line">session=DBSession()</span><br><span class="line">session.add_all([</span><br><span class="line">User(name=<span class="string">'guanyu'</span>,age=<span class="number">4</span>,password=<span class="string">'11111'</span>),</span><br><span class="line">User(name=<span class="string">'zhangfei'</span>,password=<span class="string">'2233'</span>),</span><br><span class="line">User(name=<span class="string">'zhenji'</span>,password=<span class="string">'44556'</span>)</span><br><span class="line">])</span><br><span class="line">session.commit()</span><br><span class="line">session.close()</span><br><span class="line"><span class="comment"># 查询</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">queryUser</span><span class="params">()</span>:</span></span><br><span class="line">session=DBSession()</span><br><span class="line">quser=session.query(User).filter(User.id==<span class="number">4</span>).one()</span><br><span class="line">print(<span class="string">'name:'</span>,quser.name)</span><br><span class="line">session.close()</span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deleteUser</span><span class="params">()</span>:</span></span><br><span class="line">session=DBSession()</span><br><span class="line">duser=session.query(User).filter(User.id==<span class="number">2</span>).delete()</span><br><span class="line">session.commit()</span><br><span class="line">session.close()</span><br><span class="line"><span class="comment"># 执行sql语句</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SQlUser</span><span class="params">()</span>:</span></span><br><span class="line">s=DBSession()</span><br><span class="line"><span class="comment"># 不能用 `?` 的方式来传递参数 要用 `:param` 的形式来指定参数</span></span><br><span class="line"><span class="comment"># s.execute('INSERT INTO users (name, age, password) VALUES (?, ?, ?)',('bigpang',2,'1122121'))  </span></span><br><span class="line"><span class="comment"># 这样执行报错 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># s.execute('INSERT INTO users (name, age, password) VALUES (:aa, :bb, :cc)',(&#123;'aa':'bigpang2','bb':22,'cc':'998'&#125;))</span></span><br><span class="line"><span class="comment"># s.commit()</span></span><br><span class="line"><span class="comment"># 这样执行成功</span></span><br><span class="line">res=s.execute(<span class="string">'select * from users where age=:aaa'</span>,&#123;<span class="string">'aaa'</span>:<span class="number">4</span>&#125;)</span><br><span class="line"><span class="comment"># print(res['name'])  # 错误</span></span><br><span class="line"><span class="comment"># print(res.name)    # 错误</span></span><br><span class="line"><span class="comment"># print(type(res))   # 错误</span></span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> res:</span><br><span class="line">print(r[<span class="string">'name'</span>])</span><br><span class="line">s.close()</span><br><span class="line"><span class="comment"># 执行sql语句</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SQlUser2</span><span class="params">()</span>:</span></span><br><span class="line"><span class="comment"># **传统 connection方式**</span></span><br><span class="line"><span class="comment"># 创建一个connection对象，使用方法与调用python自带的sqlite使用方式类似</span></span><br><span class="line"><span class="comment"># 使用with 来创建 conn，不需要显示执行关闭连接</span></span><br><span class="line"><span class="comment"># with engine.connect() as conn:</span></span><br><span class="line"><span class="comment"># res=conn.execute('select * from users')</span></span><br><span class="line"><span class="comment"># data=res.fetchone()</span></span><br><span class="line"><span class="comment"># print('user is %s' %data[1])</span></span><br><span class="line"><span class="comment"># 与python自带的sqlite不同，这里不需要 cursor 光标，执行sql语句不需要commit。如果是增删改，则直接生效，也不需要commit.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># **传统 connection 事务**</span></span><br><span class="line"><span class="keyword">with</span> engine.connect() <span class="keyword">as</span> conn:</span><br><span class="line">trans=conn.begin()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">r1=conn.execute(<span class="string">"select * from users"</span>)</span><br><span class="line">print(r1.fetchone()[<span class="number">1</span>])</span><br><span class="line">r2=conn.execute(<span class="string">"insert into users (name,age,password) values (?,?,?)"</span>,(<span class="string">'tang'</span>,<span class="number">5</span>,<span class="string">'133444'</span>))</span><br><span class="line">trans.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">trans.rollback()</span><br><span class="line"><span class="keyword">raise</span></span><br><span class="line"><span class="comment"># **session**</span></span><br><span class="line">session=DBSession()</span><br><span class="line">session.execute(<span class="string">'select * from users'</span>)</span><br><span class="line">session.execute(<span class="string">'insert into users (name,age,password) values (:name,:age,:password)'</span>,&#123;<span class="string">"name"</span>:<span class="string">'dayuzhishui'</span>,<span class="string">'age'</span>:<span class="number">6</span>,<span class="string">'password'</span>:<span class="string">'887'</span>&#125;)</span><br><span class="line"><span class="comment"># 注意参数使用dict，并在sql语句中使用:key占位</span></span><br><span class="line"><span class="comment"># 如果是增删改，需要 commit</span></span><br><span class="line">session.commit()</span><br><span class="line"><span class="comment"># 用完记得关闭，也可以用 with</span></span><br><span class="line">session.close()</span><br><span class="line"><span class="comment"># 更多操作</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">TestUser</span><span class="params">()</span>:</span></span><br><span class="line">session=DBSession()</span><br><span class="line"><span class="comment"># test1</span></span><br><span class="line"><span class="comment"># 使用merge方法，如果存在则修改，如果不存在则插入（只判断主键，不判断unique列）</span></span><br><span class="line"><span class="comment"># t1=session.query(User).filter(User.name=='zhenji').first()</span></span><br><span class="line"><span class="comment"># t1.age=34</span></span><br><span class="line"><span class="comment"># session.merge(t1)</span></span><br><span class="line"><span class="comment"># session.commit()</span></span><br><span class="line"><span class="comment"># test2</span></span><br><span class="line"><span class="comment"># merge方法，如果数据库中没有则添加</span></span><br><span class="line"><span class="comment"># t2=User()</span></span><br><span class="line"><span class="comment"># t2.name='haha'</span></span><br><span class="line"><span class="comment"># session.merge(t2)</span></span><br><span class="line"><span class="comment"># session.commit()</span></span><br><span class="line"><span class="comment"># test3</span></span><br><span class="line"><span class="comment"># 获取第2-3项</span></span><br><span class="line"><span class="comment"># tUser=session.query(User)[1:3]   </span></span><br><span class="line"><span class="comment"># for u in tUser:</span></span><br><span class="line"><span class="comment"># print(u.id)</span></span><br><span class="line"><span class="comment"># test4</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除全部数据库</span></span><br><span class="line"><span class="comment"># Base.metadata.drop_all(engine)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化数据库</span></span><br><span class="line"><span class="comment"># Base.metadata.create_all(engine)</span></span><br><span class="line"><span class="comment"># 删除全部数据库</span></span><br><span class="line"><span class="comment"># Base.metadata.drop_all(engine)</span></span><br><span class="line"><span class="comment"># 删除指定的数据库</span></span><br><span class="line"><span class="comment"># 如删除 Blogs表</span></span><br><span class="line"><span class="comment"># 详见 ：http://stackoverflow.com/questions/35918605/how-to-delete-a-table-in-sqlalchemy</span></span><br><span class="line"><span class="comment"># Blog.__table__.drop(engine)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增数据</span></span><br><span class="line"><span class="comment"># newUser()</span></span><br><span class="line"><span class="comment"># 新增多条数据</span></span><br><span class="line"><span class="comment"># addmoreUser()</span></span><br><span class="line"><span class="comment"># 新增数据含中文</span></span><br><span class="line"><span class="comment"># addUserForZhCn()</span></span><br><span class="line"><span class="comment"># 查询数据</span></span><br><span class="line"><span class="comment"># queryUser()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line"><span class="comment"># deleteUser()</span></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="comment"># TestUser()</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 执行sql语句</span></span><br><span class="line"><span class="comment"># SQlUser()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行sql语句2</span></span><br><span class="line">SQlUser2()</span><br><span class="line">print(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;通过pip安装SQLAlchemy&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; pip install sqlalchemy&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="python" scheme="http://blog.fbi.st/categories/python/"/>
    
    
      <category term="python" scheme="http://blog.fbi.st/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Redis非权威指南(基本知识)</title>
    <link href="http://blog.fbi.st/2018/08/20/redis%E9%9D%9E%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97(%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86)/"/>
    <id>http://blog.fbi.st/2018/08/20/redis非权威指南(基本知识)/</id>
    <published>2018-08-20T12:07:31.000Z</published>
    <updated>2019-12-26T10:08:58.955Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis-简介"><a href="#Redis-简介" class="headerlink" title="Redis 简介"></a>Redis 简介</h2><p><center><img src="https://i.loli.net/2017/09/11/59b6a42bf239f.png" alt="redis_logo.png"></center><br>Redis是完全开源免费的一个高性能的key-value存储系统。<br>它可以用作数据库、缓存和消息中间件。  </p><blockquote></blockquote><ul><li>Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。</li><li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li><li>Redis支持数据的备份，即master-slave模式的数据备份。</li></ul><a id="more"></a><h2 id="Redis的特点"><a href="#Redis的特点" class="headerlink" title="Redis的特点"></a>Redis的特点</h2><p>Redis将其数据库完全保存在内存中，因此性能极高,能读的速度是110000次/s,写的速度是81000次/s 。<br>Redis支持开发人员常用的大多数数据类型，例如列表，集合，排序集和散列等等。这使得Redis很容易被用来解决各种问题，因为我们知道哪些问题可以更好使用地哪些数据类型来处理解决。<br>Redis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行。<br>Redis还支持 publish/subscribe, 通知, key 过期等等特性。</p><h2 id="Redis在项目中的作用"><a href="#Redis在项目中的作用" class="headerlink" title="Redis在项目中的作用"></a>Redis在项目中的作用</h2><p><b>Redis在项目中使用一般作为主要缓存服务。</b></p><h3 id="1、会话缓存（Session-Cache）"><a href="#1、会话缓存（Session-Cache）" class="headerlink" title="1、会话缓存（Session Cache）"></a>1、会话缓存（Session Cache）</h3><p>最常用的一种使用Redis的情景是会话缓存（session cache）。用Redis缓存会话比其他存储（如Memcached）的优势在于：Redis提供持久化。</p><p>随着 Redis 这些年的改进，很容易找到怎么恰当的使用Redis来缓存会话的文档。甚至广为人知的商业平台Magento也提供Redis的插件。</p><h3 id="2、全页缓存（FPC）"><a href="#2、全页缓存（FPC）" class="headerlink" title="2、全页缓存（FPC）"></a>2、全页缓存（FPC）</h3><p>除基本的会话token之外，Redis还提供很简便的FPC平台。回到一致性问题，即使重启了Redis实例，因为有磁盘的持久化，用户也不会看到页面加载速度的下降，这是一个极大改进，类似PHP本地FPC。</p><p>再次以Magento为例，Magento提供一个插件来使用Redis作为全页缓存后端。</p><p>此外，对WordPress的用户来说，Pantheon有一个非常好的插件  wp-redis，这个插件能帮助你以最快速度加载你曾浏览过的页面。</p><h3 id="3、队列"><a href="#3、队列" class="headerlink" title="3、队列"></a>3、队列</h3><p>Reids在内存存储引擎领域的一大优点是提供 list 和 set 操作，这使得Redis能作为一个很好的消息队列平台来使用。Redis作为队列使用的操作，就类似于本地程序语言（如Python）对 list 的 push/pop 操作。</p><p>如果你快速的在Google中搜索“Redis queues”，你马上就能找到大量的开源项目，这些项目的目的就是利用Redis创建非常好的后端工具，以满足各种队列需求。例如，Celery有一个后台就是使用Redis作为broker，你可以从这里去查看。</p><h3 id="4、排行榜-计数器"><a href="#4、排行榜-计数器" class="headerlink" title="4、排行榜/计数器"></a>4、排行榜/计数器</h3><p>Redis在内存中对数字进行递增或递减的操作实现的非常好。集合（Set）和有序集合（Sorted Set）也使得我们在执行这些操作的时候变的非常简单，Redis只是正好提供了这两种数据结构。</p><h3 id="5、发布-订阅"><a href="#5、发布-订阅" class="headerlink" title="5、发布/订阅"></a>5、发布/订阅</h3><p>发布/订阅的使用场景确实非常多。人们在社交网络连接中使用，还可作为基于发布/订阅的脚本触发器，甚至用Redis的发布/订阅功能来建立聊天系统！</p><h2 id="Redis-对比-memcached"><a href="#Redis-对比-memcached" class="headerlink" title="Redis 对比 memcached"></a>Redis 对比 memcached</h2><hr><table><thead><tr><th>对比</th><th>持久化</th><th>数据一致性</th><th>数据类型</th></tr></thead><tbody><tr><td>redis</td><td>支持持久化</td><td>无cas命令/有事务</td><td>多种数据结构</td></tr><tr><td>memcached</td><td>不支持持久化</td><td>有cas保证数据一致性</td><td>单一key-value结构  </td></tr></tbody></table><h2 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h2><h3 id="Window-下安装"><a href="#Window-下安装" class="headerlink" title="Window 下安装"></a>Window 下安装</h3><p>下载地址：<a href="https://github.com/MSOpenTech/redis/releases" target="_blank" rel="noopener">https://github.com/MSOpenTech/redis/releases</a></p><p>Redis 支持 32 位和 64 位。这个需要根据你系统平台的实际情况选择，这里我们下载 Redis-x64-xxx.zip压缩包到 C 盘，解压后，将文件夹重新命名为 redis。<br><img src="https://i.loli.net/2017/09/11/59b6985850bac.png" alt="file.png"></p><p>打开一个 cmd 窗口 使用cd命令切换目录到 C:\redis 运行 :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server.exe redis.windows.conf</span><br></pre></td></tr></table></figure></p><p>如果想方便的话，可以把 redis 的路径加到系统的环境变量里，这样就省得再输路径了，后面的那个 redis.windows.conf 可以省略，如果省略，会启用默认的。输入之后，会显示如下界面：<br><img src="https://i.loli.net/2017/09/11/59b699409e6c5.png" alt="cmd.png"></p><p>这时候另启一个cmd窗口，原来的不要关闭，不然就无法访问服务端了。<br>切换到redis目录下运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli.exe -h 127.0.0.1 -p 6379</span><br></pre></td></tr></table></figure></p><p>设置键值对: <code>set myKey abc</code><br>取出键值对: <code>get myKey</code><br><img src="https://i.loli.net/2017/09/11/59b69a1a58b58.png" alt="cli.png"></p><h3 id="Linux下安装"><a href="#Linux下安装" class="headerlink" title="Linux下安装"></a>Linux下安装</h3><p>下载地址：<a href="http://redis.io/download" target="_blank" rel="noopener">http://redis.io/download</a>，下载最新文档版本。<br>本教程使用的最新文档版本为 2.8.17，下载并安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://download.redis.io/releases/redis-2.8.17.tar.gz</span><br><span class="line">$ tar xzf redis-2.8.17.tar.gz</span><br><span class="line">$ cd redis-2.8.17</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure></p><p>make完后 redis-2.8.17目录下会出现编译后的redis服务程序redis-server, 还有用于测试的客户端程序redis-cli,两个程序位于安装目录 src 目录下：<br>下面启动redis服务.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd src</span><br><span class="line">$ ./redis-server</span><br></pre></td></tr></table></figure><p>注意这种方式启动redis 使用的是默认配置。<br>也可以通过启动参数告诉redis使用指定配置文件使用下面命令启动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd src</span><br><span class="line">$ ./redis-server redis.conf</span><br></pre></td></tr></table></figure><p>redis.conf是一个默认的配置文件。我们可以根据需要使用自己的配置文件。<br>启动redis服务进程后，就可以使用测试客户端程序redis-cli和redis服务交互了。 比如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cd src</span><br><span class="line">$ ./redis-cli</span><br><span class="line">redis&gt; set foo bar</span><br><span class="line">OK</span><br><span class="line">redis&gt; get foo</span><br><span class="line">&quot;bar&quot;</span><br></pre></td></tr></table></figure><h3 id="Ubuntu-下安装"><a href="#Ubuntu-下安装" class="headerlink" title="Ubuntu 下安装"></a>Ubuntu 下安装</h3><p>在 Ubuntu 系统安装 Redi 可以使用以下命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$sudo apt-get update</span><br><span class="line">$sudo apt-get install redis-server</span><br></pre></td></tr></table></figure><p>启动 Redis</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ redis-server</span><br></pre></td></tr></table></figure><p>查看 redis 是否启动？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli</span><br></pre></td></tr></table></figure><p>以上命令将打开以下终端：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p>127.0.0.1 是本机 IP ，6379 是 redis 服务端口。现在我们输入 PING 命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br></pre></td></tr></table></figure><p>以上说明我们已经成功安装了redis。</p><h2 id="Redis-配置"><a href="#Redis-配置" class="headerlink" title="Redis 配置"></a>Redis 配置</h2><p>Redis 的配置文件位于 Redis 安装目录下，文件名为 redis.conf。<br>你可以通过 CONFIG 命令查看或设置配置项。</p><h3 id="1-查看配置-GET命令"><a href="#1-查看配置-GET命令" class="headerlink" title="1.查看配置(GET命令)"></a>1.查看配置(GET命令)</h3><p>Redis CONFIG 命令格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; CONFIG GET CONFIG_SETTING_NAME</span><br></pre></td></tr></table></figure><h4 id="例如"><a href="#例如" class="headerlink" title="例如"></a>例如</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; CONFIG GET loglevel</span><br></pre></td></tr></table></figure><p>1) “loglevel”<br>2) “notice”</p><h3 id="2-配置redis-SET命令"><a href="#2-配置redis-SET命令" class="headerlink" title="2.配置redis(SET命令)"></a>2.配置redis(SET命令)</h3><p>CONFIG SET 命令基本语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; CONFIG SET CONFIG_SETTING_NAME NEW_CONFIG_VALUE</span><br></pre></td></tr></table></figure><h4 id="例如-1"><a href="#例如-1" class="headerlink" title="例如"></a>例如</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; CONFIG SET loglevel &quot;notice&quot;  </span><br><span class="line">OK   </span><br><span class="line">redis 127.0.0.1:6379&gt; CONFIG GET loglevel  </span><br><span class="line"></span><br><span class="line">1) &quot;loglevel&quot;</span><br><span class="line">2) &quot;notice&quot;</span><br></pre></td></tr></table></figure><h3 id="3-redis配置文件详解"><a href="#3-redis配置文件详解" class="headerlink" title="3.redis配置文件详解"></a>3.redis配置文件详解</h3><p>查看链接：<a href="http://blog.51yip.com/nosql/1724.html" target="_blank" rel="noopener">redis 配置 参数 详解</a></p><h2 id="Redis-数据类型"><a href="#Redis-数据类型" class="headerlink" title="Redis 数据类型"></a>Redis 数据类型</h2><p>Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。</p><h3 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h3><p>string是redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value。<br>string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。<br>string类型是Redis最基本的数据类型，一个键最大能存储512MB。</p><blockquote><p>例如</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; SET name &quot;hello&quot;</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; GET name</span><br><span class="line">&quot;hello&quot;</span><br></pre></td></tr></table></figure><p>在以上实例中我们使用了 Redis 的 SET 和 GET 命令。键为 name，对应的值为 hello。</p><p><i>注意：一个键最大能存储512MB。</i></p><h3 id="Hash（哈希）"><a href="#Hash（哈希）" class="headerlink" title="Hash（哈希）"></a>Hash（哈希）</h3><p>Redis hash 是一个键名对集合。<br>Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。</p><blockquote><p>例如</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HMSET user:1 username hello password hello points 200</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; HGETALL user:1</span><br><span class="line">1) &quot;username&quot;</span><br><span class="line">2) &quot;hello&quot;</span><br><span class="line">3) &quot;password&quot;</span><br><span class="line">4) &quot;hello&quot;</span><br><span class="line">5) &quot;points&quot;</span><br><span class="line">6) &quot;200&quot;</span><br></pre></td></tr></table></figure><p>以上实例中 hash 数据类型存储了包含用户脚本信息的用户对象。 实例中我们使用了 <code>Redis HMSET</code>, <code>HGETALL</code>命令，user:1 为键值。<br>每个 hash 可以存储 232 -1 键值对（40多亿）。</p><h3 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h3><p>Redis表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p><blockquote><p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; lpush hello redis</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; lpush hello mongodb</span><br><span class="line">(integer) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; lpush hello rabitmq</span><br><span class="line">(integer) 3</span><br><span class="line">redis 127.0.0.1:6379&gt; lrange hello 0 10</span><br><span class="line">1) &quot;rabitmq&quot;</span><br><span class="line">2) &quot;mongodb&quot;</span><br><span class="line">3) &quot;redis&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure></p></blockquote><p>列表最多可存储 2^32 - 1 元素 (4294967295, 每个列表可存储40多亿)。</p><h3 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h3><p>Redis的Set是string类型的无序集合。<br>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。</p><p><strong> sadd命令 </strong><br>添加一个string元素到,key对应的set集合中，成功返回1,如果元素已经在集合中返回0,key对应的set不存在返回错误。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sadd key member</span><br></pre></td></tr></table></figure><blockquote><p>例如：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; sadd hello redis</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; sadd hello mongodb</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; sadd hello rabitmq</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; sadd hello rabitmq</span><br><span class="line">(integer) 0</span><br><span class="line">redis 127.0.0.1:6379&gt; smembers hello</span><br><span class="line"></span><br><span class="line">1) &quot;rabitmq&quot;</span><br><span class="line">2) &quot;mongodb&quot;</span><br><span class="line">3) &quot;redis&quot;</span><br></pre></td></tr></table></figure><p>注意：以上实例中 rabitmq 添加了两次，但根据集合内元素的唯一性，第二次插入的元素将被忽略。<br>集合中最大的成员数为 232 - 1(4294967295, 每个集合可存储40多亿个成员)。  </p><h3 id="zset-sorted-set：有序集合"><a href="#zset-sorted-set：有序集合" class="headerlink" title="zset(sorted set：有序集合)"></a>zset(sorted set：有序集合)</h3><p>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。<br>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。<br><strong> zset的成员是唯一的,但分数(score)却可以重复。</strong></p><p><strong> zadd 命令</strong><br>添加元素到集合，元素在集合中存在则更新对应score<br><code>zadd key score member</code></p><blockquote><p>例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; zadd hello 0 redis</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; zadd hello 0 mongodb</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; zadd hello 0 rabitmq</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; zadd hello 0 rabitmq</span><br><span class="line">(integer) 0</span><br><span class="line">redis 127.0.0.1:6379&gt; ZRANGEBYSCORE hello 0 1000</span><br><span class="line"></span><br><span class="line">1) &quot;redis&quot;</span><br><span class="line">2) &quot;mongodb&quot;</span><br><span class="line">3) &quot;rabitmq&quot;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Redis-简介&quot;&gt;&lt;a href=&quot;#Redis-简介&quot; class=&quot;headerlink&quot; title=&quot;Redis 简介&quot;&gt;&lt;/a&gt;Redis 简介&lt;/h2&gt;&lt;p&gt;&lt;center&gt;&lt;img src=&quot;https://i.loli.net/2017/09/11/59b6a42bf239f.png&quot; alt=&quot;redis_logo.png&quot;&gt;&lt;/center&gt;&lt;br&gt;Redis是完全开源免费的一个高性能的key-value存储系统。&lt;br&gt;它可以用作数据库、缓存和消息中间件。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。&lt;/li&gt;
&lt;li&gt;Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。&lt;/li&gt;
&lt;li&gt;Redis支持数据的备份，即master-slave模式的数据备份。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://blog.fbi.st/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://blog.fbi.st/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="Redis" scheme="http://blog.fbi.st/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>基本的shell操作HBase</title>
    <link href="http://blog.fbi.st/2018/05/20/%E5%9F%BA%E6%9C%AC%E7%9A%84shell%E6%93%8D%E4%BD%9CHBase/"/>
    <id>http://blog.fbi.st/2018/05/20/基本的shell操作HBase/</id>
    <published>2018-05-20T14:13:01.000Z</published>
    <updated>2019-12-26T09:55:24.943Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-进入hbase-shell-console"><a href="#1-进入hbase-shell-console" class="headerlink" title="1.进入hbase shell console"></a><strong>1.进入hbase shell console</strong></h2><blockquote><figure class="highlight plain"><figcaption><span>shell```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 如果有kerberos认证，需要事先使用相应的keytab进行一下认证（使用kinit命令），</span><br><span class="line">&gt; 认证成功之后再使用hbase shell进入可以使用``whoami``命令可查看当前用户</span><br></pre></td></tr></table></figure></blockquote><p>hbase(main) &gt; whoami<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line">## **2表的管理**</span><br><span class="line">&gt; 1）查看有哪些表hbase(main)&gt; list</span><br><span class="line"></span><br><span class="line">&gt; 2）创建表</span><br><span class="line">*语法*：</span><br><span class="line">```create &lt;table&gt;, &#123;NAME =&gt; &lt;family&gt;, VERSIONS =&gt; &lt;VERSIONS&gt;&#125;</span><br></pre></td></tr></table></figure></p><p>例如：创建表t1，有两个family name：f1，f2，且版本数均为2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hbase(main)&gt; create &apos;t1&apos;,</span><br><span class="line">&#123;NAME =&gt;&apos;f1&apos;, VERSIONS =&gt; 2&#125;,</span><br><span class="line">&#123;NAME =&gt;&apos;f2&apos; , VERSIONS =&gt; 2&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>3）删除表<br>分两步：首先disable，然后drop<br>例如：删除表t1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hbase(main)&gt; disable &apos;t1&apos;</span><br><span class="line">hbase(main)&gt; drop &apos;t1&apos;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>4）查看表的结构<br><em>语法</em>：<code>describe &lt;table&gt;</code><br>例如：查看表t1的结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase(main)&gt; describe &apos;t1&apos;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>5）修改表结构修改表结构必须先disable<br><em>语法</em>：<code>alter &#39;t1&#39;, {NAME =&gt; &#39;f1&#39;}, {NAME =&gt; &#39;f2&#39;, METHOD =&gt; &#39;delete&#39;}</code><br>例如：修改表test1的cf的TTL为180天<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hbase(main)&gt; disable &apos;test1&apos;</span><br><span class="line">hbase(main)&gt; alter &apos;test1&apos;</span><br><span class="line">,&#123;NAME=&gt;&apos;body&apos; ,TTL=&gt;&apos;15552000&apos;&#125;</span><br><span class="line">,&#123;NAME=&gt;&apos;meta&apos;, TTL=&gt;&apos;15552000&apos;&#125;</span><br><span class="line">hbase(main)&gt;enable &apos;test1&apos;</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="3-权限管理"><a href="#3-权限管理" class="headerlink" title="3.权限管理"></a><strong>3.权限管理</strong></h2><blockquote><p>1）分配权限# 语法 : grant <user> <permissions> <table> <column family> <column qualifier> 参数后面用逗号分隔<br><strong>权限</strong>用五个字母表示： “RWXCA”.<br><figure class="highlight plain"><figcaption><span>WRITE('W'), EXEC('X'), CREATE('C'), ADMIN('A')```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例如，给用户‘test&apos;分配对表t1有读写的权限，</span><br><span class="line">```hbase(main)&gt; grant &apos;test&apos; , &apos;RW&apos; , &apos;t1&apos;</span><br></pre></td></tr></table></figure></column></column></table></permissions></user></p></blockquote><blockquote><p>2）查看权限<br><em>语法</em>：<code>user_permission &lt;table&gt;</code><br>例如，查看表t1的权限列表<br><figure class="highlight plain"><figcaption><span>user_permission 't1'```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 3）收回权限</span><br><span class="line">与分配权限类似,</span><br><span class="line">*语法*：```revoke &lt;user&gt; &lt;table&gt; &lt;column family&gt; &lt;column qualifier&gt;</span><br></pre></td></tr></table></figure></p></blockquote><p>例如，收回test用户在表t1上的权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase(main)&gt; revoke &apos;test&apos; , &apos;t1&apos;</span><br></pre></td></tr></table></figure></p><h2 id="4-表数据的增删改查"><a href="#4-表数据的增删改查" class="headerlink" title="4.表数据的增删改查"></a><strong>4.表数据的增删改查</strong></h2><blockquote><p>1）添加数据<br>语法：<code>put &lt;table&gt;,&lt;rowkey&gt;,&lt;family:column&gt;,&lt;value&gt;,&lt;timestamp&gt;</code><br>例如：给表t1的添加一行记录：rowkey是rowkey001，family name：f1，column name：col1，value：value01，timestamp：系统默认<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hbase(main)&gt; put &apos;t1&apos; ,</span><br><span class="line"> &apos;rowkey001&apos; ,</span><br><span class="line"> &apos;f1:col1&apos;, &apos;value01&apos;</span><br></pre></td></tr></table></figure></p></blockquote><p>用法比较单一。</p><blockquote><p>2）查询数据<br>a）查询某行记录<br><em>语法</em>：<code>get &lt;table&gt;,&lt;rowkey&gt;,[&lt;family:column&gt;,....]</code><br>例如：查询表t1，rowkey001中的f1下的col1的值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hbase(main)&gt; get &apos;t1&apos;,</span><br><span class="line">&apos;rowkey001&apos; , &apos;f1:col1&apos;</span><br></pre></td></tr></table></figure></p></blockquote><p> 或者：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hbase(main)&gt; get &apos;t1&apos; , &apos;rowkey001&apos; ,</span><br><span class="line">&#123;COLUMN=&gt;&apos;f1:col1&apos;&#125;</span><br></pre></td></tr></table></figure></p><p>查询表t1，rowke002中的f1下的所有列值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase(main)&gt; get &apos;t1&apos;,&apos;rowkey001&apos;</span><br></pre></td></tr></table></figure></p><p>b）扫描表<br><em>语法</em>：<code>scan &lt;table&gt;, {COLUMNS =&gt; [ &lt;family:column&gt;,.... ], LIMIT =&gt; num}</code><br>另外，还可以添加STARTROW、TIMERANGE和FITLER等高级功能<br>例如：扫描表t1的前5条数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase(main)&gt; scan &apos;t1&apos; , &#123;LIMIT=&gt;5&#125;</span><br></pre></td></tr></table></figure></p><p>c）查询表中的数据行数<br><em>语法</em>：<figure class="highlight plain"><figcaption><span><table>, &#123;INTERVAL </table></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INTERVAL设置多少行显示一次及对应的rowkey，默认1000；CACHE每次去取的缓存区大小，默认是10，调整该参数可提高查询速度.</span><br><span class="line">例如，查询表t1中的行数，每100条显示一次，缓存区为500</span><br></pre></td></tr></table></figure></p><p>hbase(main)&gt; count ‘t1’,<br>{INTERVAL =&gt; 100, CACHE =&gt; 500}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; 3）删除数据</span><br><span class="line">a )删除行中的某个列值</span><br><span class="line">*语法*：``delete &lt;table&gt;, &lt;rowkey&gt;,  &lt;family:column&gt; , &lt;timestamp&gt;``,必须指定列名</span><br><span class="line">例如：删除表t1，rowkey001中的f1:col1的数据</span><br></pre></td></tr></table></figure></p><p>hbase(main)&gt; delete ‘t1’ ,<br>‘rowkey001’ ,’f1:col1’<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">注：将删除改行f1:col1列所有版本的数据</span><br><span class="line">b )删除行</span><br><span class="line">*语法*：```deleteall &lt;table&gt;, &lt;rowkey&gt;,  &lt;family:column&gt; , &lt;timestamp&gt;```，可以不指定列名，删除整行数据</span><br><span class="line">例如：删除表t1，rowk001的数据</span><br></pre></td></tr></table></figure></p><p>hbase(main)&gt; deleteall ‘t1’,’rowkey001’<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c）删除表中的所有数据</span><br><span class="line">*语法*： ``truncate &lt;table&gt;``</span><br><span class="line">其具体过程是：``disable table -&gt; drop table -&gt; create table``</span><br><span class="line">例如：删除表t1的所有数据</span><br></pre></td></tr></table></figure></p><p>hbase(main)&gt; truncate ‘t1’<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## **5.Region管理**</span><br><span class="line">&gt; 1）移动region</span><br><span class="line">*语法*:``move &apos;encodeRegionName&apos;, &apos;ServerName&apos;``</span><br><span class="line">``encodeRegionName``指的``regioName``后面的编码，``ServerName``指的是``master-status``的``Region Servers``列表</span><br><span class="line">示例</span><br></pre></td></tr></table></figure></p><p>hbase(main)&gt;move<br>‘4343995a58be8e5bbc739af1e91cd72d’ ,<br>‘db-41.xxx.xxx.org,60020,1390274516739’<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 2）开启/关闭region</span><br><span class="line">*语法*：``balance_switch true|false``</span><br></pre></td></tr></table></figure></p><p>hbase(main)&gt; balance_switch<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; 3）手动split</span><br><span class="line">*语法*：``split &apos;regionName&apos;, &apos;splitKey&apos;``</span><br><span class="line"></span><br><span class="line">&gt; 4）手动触发major compaction</span><br><span class="line">*语法*：``Compact all regions in a table:``</span><br></pre></td></tr></table></figure></p><p>hbase&gt; major_compact ‘t1’<br>Compact an entire region:<br>hbase&gt; major_compact ‘r1’<br>Compact a single column family within a region:<br>hbase&gt; major_compact ‘r1’, ‘c1’<br>Compact a single column family within a table:<br>hbase&gt; major_compact ‘t1’, ‘c1’<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## **6.配置管理及节点重启**</span><br><span class="line">&gt; 1）修改hdfs配置hdfs配置位置：</span><br></pre></td></tr></table></figure></p><p>/etc/hadoop/conf<br><code>` 同步hdfs配置</code><br>cat /home/hadoop/slaves | xargs -i -t scp /etc/hadoop/conf/hdfs-site.xml hadoop@{}: /etc/hadoop/conf/hdfs-site.xml<code>关闭：</code><br>cat /home/hadoop/slaves | xargs -i -t ssh hadoop@{} “sudo /home/hadoop/cdh4/hadoop-2.0.0-cdh4.2.1/sbin/hadoop-daemon.sh –config /etc/hadoop/conf stop datanode”<br><code>启动：</code>cat /home/hadoop/slaves | xargs -i -t ssh hadoop@{} “sudo /home/hadoop/cdh4/hadoop-2.0.0-cdh4.2.1/sbin/hadoop-daemon.sh –config /etc/hadoop/conf start datanode”<br><code></code></p><blockquote><p>2）修改hbase配置hbase配置位置：<br>同步hbase配置<br><code>cat /home/hadoop/hbase/conf/regionservers | xargs -i -t scp /home/hadoop/hbase/conf/hbase-site.xml hadoop@{}:/home/hadoop/hbase/conf/hbase-site.xml</code><br>graceful重启<br><code>cd ~/hbasebin/graceful_stop.sh --restart --reload --debug inspurXXX.xxx.xxx.org</code></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-进入hbase-shell-console&quot;&gt;&lt;a href=&quot;#1-进入hbase-shell-console&quot; class=&quot;headerlink&quot; title=&quot;1.进入hbase shell console&quot;&gt;&lt;/a&gt;&lt;strong&gt;1.进入hbase
      
    
    </summary>
    
      <category term="数据库" scheme="http://blog.fbi.st/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Hadoop" scheme="http://blog.fbi.st/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>php实现快速排序算法</title>
    <link href="http://blog.fbi.st/2018/03/12/php%E5%AE%9E%E7%8E%B0%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://blog.fbi.st/2018/03/12/php实现快速排序算法/</id>
    <published>2018-03-12T02:35:11.000Z</published>
    <updated>2019-12-27T04:39:24.011Z</updated>
    
    <content type="html"><![CDATA[<p>快速排序由C. A. R. Hoare在1960年提出。</p><h2 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h2><p>通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列.</p><p>快速排序又是一种分而治之思想在排序算法上的典型应用。本质上来看，快速排序应该算是在冒泡排序基础上的递归分治法。<br><a id="more"></a></p><h2 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h2><p>在平均状况下，排序 n 个项目要 Ο(nlogn) 次比较。在最坏状况下则需要 Ο(n2) 次比较，但这种状况并不常见。事实上，快速排序通常明显比其他 Ο(nlogn) 算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来。</p><h2 id="示意图"><a href="#示意图" class="headerlink" title="示意图"></a>示意图</h2><p><img src="https://i.loli.net/2019/12/27/plkW653EmtYIGLN.png" alt="image.png"></p><h2 id="动态图"><a href="#动态图" class="headerlink" title="动态图"></a>动态图</h2><p><img src="https://i.loli.net/2019/12/27/gRTB2Jh5cwmpifx.gif" alt="b7003af33a87e950707fdf2110385343fbf2b416.gif"></p><h2 id="PHP实现"><a href="#PHP实现" class="headerlink" title="PHP实现"></a>PHP实现</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span><span class="params">($arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment"># 数组总数小于1时候返回本身</span></span><br><span class="line">    <span class="keyword">if</span> (count($arr) &lt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> $arr;</span><br><span class="line"><span class="comment"># 随机选取一个中间数</span></span><br><span class="line">$middle = $arr[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    $leftArray = <span class="keyword">array</span>();</span><br><span class="line">    $rightArray = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ($i = <span class="number">1</span>; $i &lt; count($arr); $i++) &#123;</span><br><span class="line"><span class="keyword">if</span> ($arr[$i] &gt; $middle)</span><br><span class="line"><span class="comment"># 小于中间数放到左边</span></span><br><span class="line">$rightArray[] = $arr[$i];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="comment"># 大于中间数放到右边</span></span><br><span class="line">            $leftArray[] = $arr[$i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">## 左边递归</span></span><br><span class="line">$leftArray = quickSort($leftArray);</span><br><span class="line"><span class="comment">## 加入中间数</span></span><br><span class="line">$leftArray[] = $middle;</span><br><span class="line"></span><br><span class="line">    $rightArray = quickSort($rightArray);</span><br><span class="line">    <span class="keyword">return</span> array_merge($leftArray, $rightArray);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;快速排序由C. A. R. Hoare在1960年提出。&lt;/p&gt;
&lt;h2 id=&quot;基本思想&quot;&gt;&lt;a href=&quot;#基本思想&quot; class=&quot;headerlink&quot; title=&quot;基本思想&quot;&gt;&lt;/a&gt;基本思想&lt;/h2&gt;&lt;p&gt;通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列.&lt;/p&gt;
&lt;p&gt;快速排序又是一种分而治之思想在排序算法上的典型应用。本质上来看，快速排序应该算是在冒泡排序基础上的递归分治法。&lt;br&gt;
    
    </summary>
    
      <category term="php" scheme="http://blog.fbi.st/categories/php/"/>
    
    
      <category term="php" scheme="http://blog.fbi.st/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>2018_应该静下来</title>
    <link href="http://blog.fbi.st/2018/02/27/2018-%E5%BA%94%E8%AF%A5%E9%9D%99%E4%B8%8B%E6%9D%A5/"/>
    <id>http://blog.fbi.st/2018/02/27/2018-应该静下来/</id>
    <published>2018-02-27T14:32:35.000Z</published>
    <updated>2019-12-26T09:09:44.348Z</updated>
    
    <content type="html"><![CDATA[<p>写下这个日志标题的时候还是三月份。开始写内容的时候已经是6月了。  </p><p>现在还清楚的记得那个时候的心情：早期的项目由于当时能力问题和当时认知的限制，留下了很多bug，客户提出来需要升级。我在其中感受到了一些不满意。晚上下班后的我心情有些低落。思来想去，决定痛改这个项目，并暗自告诉自己。以后再也不写烂代码了。同时也告诉自己，这一年应该静下心来，好好的审视自己，好好的充实自己。</p><a id="more"></a><p>不知不觉过了三个月，当时的感受还在，但心情又有所不同。这三个月里，我扔掉了之前的“烂代码”，重构了该项目。这三个月，每次写代码都会想起自己当时心里立下的那个flag：以后再也不写烂代码了。当然，我很清楚，我肯定又写了很多以后的我眼中的“烂代码”。但这个时候，却是有所不同。</p><p>我知道，未来的我会否定我现在的这些“烂代码”，但一定不会否定我现在认真的态度。这段时间，我抱着一个敬畏的心态去写下我每行代码。也抱着敬畏的心情去过好生活。突然发现，自己好像静下来了。</p><p>再说说，2018。过了今年，会完成大家口中的人生几件大事。父母渐渐变老。家里的事情也要慢慢抗在我身上了。</p><p>想起2008的“年少才轻狂”，好像年少轻狂的年纪已经过去了。奔向而立之年的我，应该静下来，看清自己的位置，看清自己的方向，静下来，抛弃轻浮，静下来稳步往前。</p><p>三个月前的立下的flag我会一留着，时刻告诉自己：别写烂代码，好好生活。</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="298" height="52" src="https://music.163.com/outchain/player?type=2&id=517567264&auto=1&height=32"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写下这个日志标题的时候还是三月份。开始写内容的时候已经是6月了。  &lt;/p&gt;
&lt;p&gt;现在还清楚的记得那个时候的心情：早期的项目由于当时能力问题和当时认知的限制，留下了很多bug，客户提出来需要升级。我在其中感受到了一些不满意。晚上下班后的我心情有些低落。思来想去，决定痛改这个项目，并暗自告诉自己。以后再也不写烂代码了。同时也告诉自己，这一年应该静下心来，好好的审视自己，好好的充实自己。&lt;/p&gt;
    
    </summary>
    
      <category term="live" scheme="http://blog.fbi.st/categories/live/"/>
    
    
      <category term="生活" scheme="http://blog.fbi.st/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>《楚门的世界》，关于选择和自由</title>
    <link href="http://blog.fbi.st/2018/01/22/%E3%80%8A%E6%A5%9A%E9%97%A8%E7%9A%84%E4%B8%96%E7%95%8C%E3%80%8B%EF%BC%8C%E5%85%B3%E4%BA%8E%E9%80%89%E6%8B%A9%E5%92%8C%E8%87%AA%E7%94%B1/"/>
    <id>http://blog.fbi.st/2018/01/22/《楚门的世界》，关于选择和自由/</id>
    <published>2018-01-22T02:54:04.000Z</published>
    <updated>2019-12-26T09:09:17.012Z</updated>
    
    <content type="html"><![CDATA[<h2 id="电影相关"><a href="#电影相关" class="headerlink" title="电影相关"></a>电影相关</h2><h3 id="楚门的世界（The-Truman-Show）"><a href="#楚门的世界（The-Truman-Show）" class="headerlink" title="楚门的世界（The Truman Show）"></a>楚门的世界（The Truman Show）</h3><p><center><img src="https://i.loli.net/2018/04/08/5aca1c7d5b30d.jpg" alt="tumen.jpg"></center></p><h3 id="内容简介"><a href="#内容简介" class="headerlink" title="内容简介"></a>内容简介</h3><p>楚门是一个平凡得不能再平凡的人，除了一些有些稀奇的经历之外——初恋女友突然失踪、溺水身亡的父亲忽然似乎又出现在眼前，他和绝大多数30多岁的美国男人绝无异样。这令他倍感失落。他也曾试过离开自己生活了多年的地方，但总因种种理由而不能成行。<br>　　直到有一天，他忽然发觉自己似乎一直在被人跟踪，无论他走到哪里，干什么事情。这种感觉愈来愈强烈。楚门决定不惜一切代价逃离这个他生活了30多年的地方，去寻找他的初恋女友。</p><h3 id="关于金·凯瑞-Jim-Carrey"><a href="#关于金·凯瑞-Jim-Carrey" class="headerlink" title="关于金·凯瑞(Jim Carrey)"></a>关于金·凯瑞(Jim Carrey)</h3><p>在看这部电影之前，我看到的金凯瑞的作品都还是《变相怪杰》、神探飞机头之类的无厘头喜剧电影。<br>通过这部电影，重新认识了他。电影中塑造的“楚门”形象让人映像深刻。</p><a id="more"></a><h2 id="观影后感"><a href="#观影后感" class="headerlink" title="观影后感"></a>观影后感</h2><h3 id="关于电影"><a href="#关于电影" class="headerlink" title="关于电影"></a>关于电影</h3><p>站在电影拍摄年代看，这部电影的想法大胆，某种程度还“预言”了现在的直播行业。楚门算是直播界的鼻祖吧？<br>电影中很多重复的镜头和场景，但电影情节设计合理，所以在观看的时候注意力也一直比较集中，不会有疲劳。<br>关于电影中的人物：楚门。他积极乐观，从小到大的几十年的生活直播，鼓舞了电影中很多“电视机前的观众”。最后选择离开“楚门的世界”的勇敢，也鼓舞了很多我这个看电影的观众。  </p><h3 id="我的感受"><a href="#我的感受" class="headerlink" title="我的感受"></a>我的感受</h3><h4 id="我们世界，楚门的世界"><a href="#我们世界，楚门的世界" class="headerlink" title="我们世界，楚门的世界"></a>我们世界，楚门的世界</h4><p>看完电影的时候，我会有一个疑惑：我是不是也处在一“XX的世界”？转瞬又会笑自己想多了。<br>但再认真的思考一下又会发现事情并不简单（细思极恐）：我真的处在一个真实的世界里么？我们看楚门，会不会也有人正在看着我们？（想得有点多啊，哈哈）<br>电影中，我们看得到的是：楚门走出了他的世界。<br>生活中，我们看不到的是：我们走不出自己的世界。<br>虽然我们不会真的在一场直播中，但我们的确被困在了自己的世界中。很多时候，我们都会计较生活中的点滴得失。我们会恐惧去改变。身体虽然没有被禁锢，但灵魂却甘心在“楚门的世界”中安逸。  </p><h4 id="关于自由和选择"><a href="#关于自由和选择" class="headerlink" title="关于自由和选择"></a>关于自由和选择</h4><p>电影中，楚门走出了“直播世界”，获得了自由，看起来是如此。可是我认为楚门在出门之前就已经获得了自由。<br>我认为，自由的概念不是“无拘无束”，而是“有得选”，也就是有选择的权利。楚门在出门前的那一刻，他是有选择走出去还是留下的权利，所以在这一刻，他是自由的。他知道了真相后，无论是留在电影世界，还是走出去，这件事情上，他都已经获得了“自由”。<br>我对自由最直观感受到的是在第一次搭上梯子翻出去的那一刻，一瞬间，我好像获得了某种自由。因为我终于可以选择是选用百度还是google，我是选择优酷还是youtube。有点不可思议，但就是这么简单。<br>自由好像就是这样，在你有选择的那一刻，你就有自由。你可以选择去旅行还是宅家里，监狱里的囚徒不行。<br>这么想，好像是有点道理。</p><p>最后：</p><blockquote><ul><li>如果我再也见不到你，我会祝你早安、午安还有晚安。</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;电影相关&quot;&gt;&lt;a href=&quot;#电影相关&quot; class=&quot;headerlink&quot; title=&quot;电影相关&quot;&gt;&lt;/a&gt;电影相关&lt;/h2&gt;&lt;h3 id=&quot;楚门的世界（The-Truman-Show）&quot;&gt;&lt;a href=&quot;#楚门的世界（The-Truman-Show）&quot; class=&quot;headerlink&quot; title=&quot;楚门的世界（The Truman Show）&quot;&gt;&lt;/a&gt;楚门的世界（The Truman Show）&lt;/h3&gt;&lt;p&gt;&lt;center&gt;&lt;img src=&quot;https://i.loli.net/2018/04/08/5aca1c7d5b30d.jpg&quot; alt=&quot;tumen.jpg&quot;&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3 id=&quot;内容简介&quot;&gt;&lt;a href=&quot;#内容简介&quot; class=&quot;headerlink&quot; title=&quot;内容简介&quot;&gt;&lt;/a&gt;内容简介&lt;/h3&gt;&lt;p&gt;楚门是一个平凡得不能再平凡的人，除了一些有些稀奇的经历之外——初恋女友突然失踪、溺水身亡的父亲忽然似乎又出现在眼前，他和绝大多数30多岁的美国男人绝无异样。这令他倍感失落。他也曾试过离开自己生活了多年的地方，但总因种种理由而不能成行。&lt;br&gt;　　直到有一天，他忽然发觉自己似乎一直在被人跟踪，无论他走到哪里，干什么事情。这种感觉愈来愈强烈。楚门决定不惜一切代价逃离这个他生活了30多年的地方，去寻找他的初恋女友。&lt;/p&gt;
&lt;h3 id=&quot;关于金·凯瑞-Jim-Carrey&quot;&gt;&lt;a href=&quot;#关于金·凯瑞-Jim-Carrey&quot; class=&quot;headerlink&quot; title=&quot;关于金·凯瑞(Jim Carrey)&quot;&gt;&lt;/a&gt;关于金·凯瑞(Jim Carrey)&lt;/h3&gt;&lt;p&gt;在看这部电影之前，我看到的金凯瑞的作品都还是《变相怪杰》、神探飞机头之类的无厘头喜剧电影。&lt;br&gt;通过这部电影，重新认识了他。电影中塑造的“楚门”形象让人映像深刻。&lt;/p&gt;
    
    </summary>
    
      <category term="live" scheme="http://blog.fbi.st/categories/live/"/>
    
    
      <category term="生活" scheme="http://blog.fbi.st/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="电影" scheme="http://blog.fbi.st/tags/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>看电影《十二怒汉》</title>
    <link href="http://blog.fbi.st/2017/12/28/%E7%9C%8B%E7%94%B5%E5%BD%B1%E3%80%8A%E5%8D%81%E4%BA%8C%E6%80%92%E6%B1%89%E3%80%8B/"/>
    <id>http://blog.fbi.st/2017/12/28/看电影《十二怒汉》/</id>
    <published>2017-12-28T09:36:53.000Z</published>
    <updated>2019-12-26T09:55:55.602Z</updated>
    
    <content type="html"><![CDATA[<h2 id="相关介绍"><a href="#相关介绍" class="headerlink" title="相关介绍"></a>相关介绍</h2><h3 id="十二怒汉-12-Angry-Men-1957"><a href="#十二怒汉-12-Angry-Men-1957" class="headerlink" title="十二怒汉 12 Angry Men (1957)"></a>十二怒汉 12 Angry Men (1957)</h3><p><img src="https://i.loli.net/2017/12/28/5a44c091705d6.png" alt="12nuhan.png"></p><h3 id="剧情简介"><a href="#剧情简介" class="headerlink" title="剧情简介"></a>剧情简介</h3><p>一个在贫民窟长大的18岁少年因为涉嫌杀害自己的父亲被告上法庭，证人言之凿凿，各方面的证据都对他极为不利。十二个不同职业的人组成了这个案件的陪审团，他们要在休息室达成一致的意见，裁定少年是否有罪，如果罪名成立，少年将会被判处死刑。  </p><p>十二个陪审团成员各有不同，除了8号陪审员（H enry Fonda 饰）之外，其他人对这个犯罪事实如此清晰的案子不屑一顾，还没有开始讨论就认定了少年有罪。8号陪审员提出了自己的“合理疑点”，耐心地说服其他的陪审员，在这个过程中，他们每个人不同的人生观也在冲突和较量……  </p><a id="more"></a> <h2 id="观影有感"><a href="#观影有感" class="headerlink" title="观影有感"></a>观影有感</h2><h3 id="关于电影"><a href="#关于电影" class="headerlink" title="关于电影"></a>关于电影</h3><p>在看本片之前，我在网上看到过有人总结：“那些因为名字而被错过的电影”，我记得其中就有印度电影《三傻大闹宝莱坞》。我不记得其中是否有这部《十二怒汉》，但我知道我在很长一段时间内错过这部电影就是因为他的名字。“十二怒汉” 这个名字给我的第一感觉好像是类似“三百斯巴达勇士”一样，而我并不太喜欢这类型的电影。 </p><p>至于，后面拿起这部电影看的原因是是在逛b站的时候，看到介绍这部电影的一个视频。通过那段视频我简单的了解了这部电影。然后找了一个周末的晚上，仔细观赏了这部电影。  </p><p>由于拍摄年代比较久远，所以是黑白的。但这丝毫不影响导演和演员在黑白光影之间，讲述形象、深刻的故事。  </p><p>不谈剧情，整个电影的一个半小时剧情，除了开场和结束的几个镜头，整个故事其余镜头都是在一个带洗手间的会议室中完成的。故事讲述得丝丝入扣，导演的才华和演员的演技，在这单调到离谱的场景中展现的淋漓尽致。  </p><p>关于整部电影，有人说这是一部伟大的电影，我个人觉得，这部电影绝对对得住“伟大”两个字。非常推荐一看。  </p><h3 id="我的感受"><a href="#我的感受" class="headerlink" title="我的感受"></a>我的感受</h3><h4 id="关于决策"><a href="#关于决策" class="headerlink" title="关于决策"></a>关于决策</h4><p>整部电影，最让我印象深刻的地方是当所有人都在选择“赞同”的时候，8号陪审员站出来选择“不赞同”。心理学上，有我们很熟悉的一个现象，叫“从众效应”，在很多时候，我们更喜欢，更愿意，站在大多数的一方。买东西时，我们会选择销量好的，在舆论方面，我们跟愿意去关注大家都关注的事物。</p><p>8号评审员在“证据确凿”，除了自己外11个成员都投“赞成票”的情况下，勇敢的投出“反对票”，并阐述自己的观点。</p><p>我不禁想到自己在做决策时候，我是否有勇气去做出这样的“投票”。在遇到大多数人反对自己观点的时候，我是否能坚持自己的想法，能坚持的与他辩论。我知道，很多时候这个答案都是否定的，这值得我去反思。</p><h4 id="关于态度"><a href="#关于态度" class="headerlink" title="关于态度"></a>关于态度</h4><p>关于对待事情的态度，这个要从人物的关系说起。陪审团的成员都与他们所讨论的男孩在生活上是没有任何关系的。所以他们大多数人开始也并不太在乎他的生死。也不会在心里为男孩做辩解。这也是开始他对小男孩这件事情的一个态度。</p><p>轻视的态度决定了，11位评审员不会深入的去思考整件事情，更加不会站在为小男孩辩解的角度去思考，因为这跟‘我’无关。</p><p>当然，也正是因为他们对小男孩的态度是一种事不关己的态度，一种没有态度的态度，所以他们后面才能做到轻易的转换思路，为小男孩找到合理的解释。</p><p>对待事情的态度决定，我们对事情的思考方式，从何决定了我们的行为。所以表明态度，要谨慎。</p><h4 id="关于生命"><a href="#关于生命" class="headerlink" title="关于生命"></a>关于生命</h4><p>影片中，小男孩失去了父亲，也没有出现过他的母亲。除了8号评审员，片中出现的人物几乎没有人在意小男孩的生命。假如评审团中没有出现8号评审员，小男孩被判死刑，估计世界上也不会有人为他心痛，一个月后，一年以后，也不会有人记得世界上有小男孩这样一个人出现过。</p><p>包括，片中指认小男孩的老人，一生没有什么作为，到死去之前也不会有人注意到他。</p><p>这让我想到了电影《嫌疑人X的献身》中被数学家杀死的流浪汉，他的死去没有给世界带来丝毫的影响。</p><p>我还想到了很多死去的伟人，他们的逝去得到了整个世界的关注。他们的生命在这个星球上留下了不可磨灭的印记。</p><p>生命就是这样的神奇，可以灿烂如星空，也可以平淡如水滴。</p><h3 id="还有很多"><a href="#还有很多" class="headerlink" title="还有很多"></a>还有很多</h3><p>影片看完了，这篇简短的观后感也差不多结束了。由于文字水平有限，也可能是很多东西没有体悟透彻，所以漏掉了很多。影片和文字结束了，但生活还在继续，我相信，这部电影收获的更多的东西，是我现在在没有感受到的，没有讲述出来的，他会无形的影响着我今后的生活，生活会越来越好。</p><p>其他电影也是，其他书籍也是。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;相关介绍&quot;&gt;&lt;a href=&quot;#相关介绍&quot; class=&quot;headerlink&quot; title=&quot;相关介绍&quot;&gt;&lt;/a&gt;相关介绍&lt;/h2&gt;&lt;h3 id=&quot;十二怒汉-12-Angry-Men-1957&quot;&gt;&lt;a href=&quot;#十二怒汉-12-Angry-Men-1957&quot; class=&quot;headerlink&quot; title=&quot;十二怒汉 12 Angry Men (1957)&quot;&gt;&lt;/a&gt;十二怒汉 12 Angry Men (1957)&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2017/12/28/5a44c091705d6.png&quot; alt=&quot;12nuhan.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;剧情简介&quot;&gt;&lt;a href=&quot;#剧情简介&quot; class=&quot;headerlink&quot; title=&quot;剧情简介&quot;&gt;&lt;/a&gt;剧情简介&lt;/h3&gt;&lt;p&gt;一个在贫民窟长大的18岁少年因为涉嫌杀害自己的父亲被告上法庭，证人言之凿凿，各方面的证据都对他极为不利。十二个不同职业的人组成了这个案件的陪审团，他们要在休息室达成一致的意见，裁定少年是否有罪，如果罪名成立，少年将会被判处死刑。  &lt;/p&gt;
&lt;p&gt;十二个陪审团成员各有不同，除了8号陪审员（H enry Fonda 饰）之外，其他人对这个犯罪事实如此清晰的案子不屑一顾，还没有开始讨论就认定了少年有罪。8号陪审员提出了自己的“合理疑点”，耐心地说服其他的陪审员，在这个过程中，他们每个人不同的人生观也在冲突和较量……  &lt;/p&gt;
    
    </summary>
    
      <category term="live" scheme="http://blog.fbi.st/categories/live/"/>
    
    
      <category term="生活" scheme="http://blog.fbi.st/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="电影" scheme="http://blog.fbi.st/tags/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
</feed>
